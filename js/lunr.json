[
    {
        "uri": "/posts/blog_cmdln-linux_fish",
        "title": "The Linux Command Line with Fish Shell",
        "content": "\nThe Linux terminal typically implemented with the Bourne Again Shell Script BASH can be intimidating for beginners and annoying for experienced programmers But it is a necessity for most users of Linux and in many situations it can also be a huge productivity enhancer over graphical interfaces Fish is a commandline tool that is a great complement to BASH It is highly configureable and provides nice features such as syntax coloring and TAB command completion out of the box For this tutorial we will use a quick docker set up with the smallest but still capable Linux image bitnami minideb Then we will install fish and try some of the most common Linux commands Fish isn t necessary for most of these bash commands however it can make your life a little easier while flying through various directories working on your next project Two great references that are much more in depth than this tutorial are the following The Art of the Command Line https github com jlevy the art of command line Linux Journey https linuxjourney com Preparation Some terminology to know before working includes https askubuntu com questions 506510 what is the difference between terminal console shell and command line terminal text input output environment console physical terminal older hardware oriented term command line where user enters commands shell command line interpreter The user you will be opening terminal interface and entering the command line through the fish application shell Install docker for your operating system then run Bitnami s minideb mini debian https github com bitnami minideb so that you have a disposable Linux container You can break whatever you want in this container and not worry that you ve hurt your actual operating system To reset it just create a new container python list current images docker images obtain and run minideb container docker run rm it bitnami minideb latest enter container s bash interface application docker exec it cntr minideb bash install and use fish apt get update apt get upgrade apt get install fish fish Before you get started on the basics you might want to install two additioanl applications The nano text editor can be much more intuitive than the more common vim Also the Cheat https github com cheat cheat application can help in your learning Digital Ocean has a tutorial for getting started https www digitalocean com community tutorials how to install and use command line cheat sheets on ubuntu 14 04 python apt get nano apt get install python pip pip install cheat cheat v Later to exit the applications and shut down docker python from fish exit from bash exit continue with docker container later docker stop cntr minideb kill container docker rm cntr minideb Basic File System These basic commands are common to many different shell systems They include commands for working with files and directories as well as some basic programming concepts such as variables that show up throughout working in the terminal Quickstart python directory structure echo HOME mkdir dir cd dir pwd tree display file statistics stat file file file display help man command help command type command whatis command Variables One way that the shell keeps track of all of these settings and details is through an area it maintains called the environment Environmental variables are variables that are defined for the current shell and are inherited and override variables by any child shells or processes Environmental variables are used to pass information into processes that are spawned from the shell Shell variables are variables that are contained exclusively within the shell in which they were set or defined They are often used to keep track of ephemeral data like the current working directory By convention these types of variables are usually defined using all capital letters Environment variables python environment variables printenv print specific variable printenv var set specific variable env VAR1 blahblah command to run command options Shell variables python shell variables set less without functions env VAR1 blahblah command to run command options Typical environment variables python describes the shell SHELL specifies the type of terminal to emulate when running the shell TERM current logged in user USER current working directory PWD previous working directory OLDPWD defines color codes used to add colored output to the ls command LS COLORS path to the current user s mailbox MAIL list of ordered directories that the system will check when looking for commands PATH current language and localization settings LANG current user s home directory HOME previously executed command Common shell variables python list of options that were used when bash was executed BASHOPTS verion BASH VERSION BASH VERSINFO number of columns wide that are being used to draw output COLUMNS stack of directories that are available with the pushd and popd commands DIRSTACK number of lines of command history stored to a file HISTFILESIZE number of lines of command history allowed in memory HISTSIZE The hostname of the computer at this time HOSTNAME internal field separator to separate input on the command line space by default IFS primary command prompt definition PS1 secondary prompts for when a command spans multiple lines PS2 shell options that can be set with the set option SHELLOPTS the UID of the current user UID Test shell variables python define shell var TEST VAR Hello World confirm set grep TEST VAR printenv grep TEST VAR reference echo TEST VAR shell vars are not passed to child processes bash echo TEST VAR Test environment variables python export shell var to the environment export TEST VAR available in child process bash echo TEST VAR exit convert back to shell var export n TEST VAR remove completely unset TEST VAR Typical usage python nano bash profile add export TEST VAR Hello World exit source bash profile instead of restarting the terminal Creation redirection and wildcards These commands are a little more advanced but you see them often in instructions Once you get comfortable using them they become very helpful python new file touch filename overwrites stream filename appends stream filename pipe output of left to input on right stream stream A common usage of the pipe python printenv less Additional operators python takes input from the file on the right instead of the keyboard redirect standard error to the location on the right match any character string that does not include matche any single character not including match any string including recusively Examples of the above commands python list files in that directory and child directories ls etc conf stand output to file stand error to where stand output goes same file ls etc ls results txt 1 Command history and TAB completion The history of your previous commands is key for moving quickly and remembering completed tasks You can move up chronologically in your history by using the UP key You can move in the reverse direction by using the DOWN key This is fairly standard If we wish to return to our prompt we just hit the escape key We can also type in part of a previous command and then press the UP key to search for the latest instances of that specific command Furthermore we can use the ALT UP and ALT DOWN commands to recall the command line arguments only python previous commands history last argument cmd cmd 1 last command File manipulation Download files or get them via http request then familiarize yourself with them python download wget http requests curl concatenate cat word count wc print file head tail System Administration Administration of a Linux server is a huge field External references are provided in various sections to give more detailed explanation Machine configuration These are basic commands to understand your machine and prepare it for use python os version cat etc os release kernel version uname r number of core python c import multiprocessing as mp print mp cpu count make current sudo apt get update sudo apt get upgrade Displaying disk usage To understand the foundations around these commands take a look at the following disk usage https www tecmint com check linux disk usage of files and directories disk space https www tecmint com how to check disk space in linux python du max depth 1 human readable home vagrant sort human numeric sort du d1 h home ubuntu sort h du sh df h df i inodes Describing CPU and memory usage This is another field where you really need to know the internals to understand what you re looking at Get a better understanding of cpu utilization here http www brendangregg com blog 2017 05 09 cpu utilization is wrong html python sudo apt get install linux tools common linux tools generic linux tools 3 13 0 110 perf stat a sleep 10 Notes IPC is 1 0 you are likely memory stalled and software tuning strategies include reducing memory I O and improving CPU caching and memory locality IPC is 1 0 you are likely instruction bound Look for ways to reduce code execution eliminate unnecessary work cache operations etc CPU flame graphs are a great tool for this investigation Installing applications This is a very old field and you will likely encounter many types of applications of varying history and quality Getting to know how to install applications and build packages can give you a greater appreciation before you inevitably do it yourself python pre approved sources to get packages from nano etc apt sources list install package dpkg i some deb package deb remove package dpkg r some deb package deb list packages dpkg l package manager advanced package tool apt install package apt list apt moo Building packages This may include many other commands based upon the language of the application python build tools apt install build essential tar xzvf package tar gz check dependencies configure install copy the correct files to the correct locations on your computer make install uninstall make uninstall instead make deb and install it checkinstall Processes The kernel is the software between applications and hardware It is managing the processes and resources provided to them The Linux kernel is named for Linus Torvalds who first created a replacement for Bell s proprietary Unix kernel He also created git version control system and so his discussions and comments on web boaurds come with a healthy dose of ego python example process sleep 1 run in background sleep 1 jobs all details and non tty ps ps aux refresh 10sec and NIceness priority top htop renice 10 p pid pstree p pgrep process pkill process process filesystem ls proc process state cat proc pid status find from what directory process is run pwdx pid ps ef what processes are listening netstat lntp how long system is running uptime Routing Routing is a HUGE subject but these commands can give you a good support for the first 20 python apt install net tools route n ifconfig apt install iproute2 all interfaces ip link show stats of an interface ip s link show eth0 show ip addresses allocated to interfaces ip address show network manager apt install nm tool Background shells Multiple screens will become much more useful has you become more capable from the commandline There are three main systems take a look at these references for getting a comparison of them tmux vs screen https superuser com questions 236158 tmux vs screen nohup vs screen https stackoverflow com questions 20766300 nohup vs screen which is better for long running process python nohup screen tmux Profiles Once you have commands down you will want to start using the terminal on your host machine and customizing it to get your work down more quickly There are two main files for customizing your system bashrc Save aliases shell settings and functions you commonly use in bashrc and arrange for login shells to source it This will make your setup available in all your shell sessions bash profile Put the settings of environment variables as well as commands that should be executed when you login in bash profile Separate configuration will be needed for shells you launch from graphical environment logins and cron jobs A login shell is a shell session that begins by authenticating the user If you are signing into a terminal session or through SSH and authenticate your shell session will be set as a login shell A session started as a login session will read configuration details from the etc profile file first It will then look for the first login shell configuration file in the user s home directory to get user specific configuration details It reads the first file that it can find out of bash profile bash login and profile and does not read any further files A non login shell is created if you start a new shell session from within your authenticated session like we did by calling the bash command from the terminal You were not asked for your authentication details when you started your child shell A non login shell will read etc bash bashrc and then the user specific bashrc file to build its environment An interactive shell session such as one that begins with ssh is a shell session that is attached to a terminal A non interactive shell session is one is not attached to a terminal session such as a script run from the command line Non interactive shells read the environmental variable called BASH ENV and read the file specified to define the new environment We will usually be setting user specific environmental variables and we usually will want our settings to be available in both login and non login shells This means that the place to define these variables is in the bashrc file If you need to set system wide variables you may want to think about adding them to etc profile etc bash bashrc or etc environment Alias and functions This is another way to customize your system For more detailed explanation try this tutorial https www digitalocean com community tutorials an introduction to useful bash aliases and functions python alias ls ls group directories first color cdls cd ls cddu cd du d1 h sort h du1 du d1 h sort h du2 du d2 h sort h Path Your Path is where the shell looks for commands It is an ordered list so the first application that fits the command is used python export PATH PATH path to dir User Management Access and groups Access can take a while to become comfortable with understanding Stay with it as security and protection is a necessity for every usage python list of groups cat etc group list all users in a Linux group getent group groupname list all groups you belong to groups create new user sudo adduser name remove user deluser name add user to group sudo usermod G name of group a name of user remove user from group gpasswd d user group SSH to remote server login to remote python ssh keygen t rsa ssh copy id githubstats 144 76 39 53 ssh githubstats 144 76 39 53 VPS system admin ref user config https www digitalocean com community tutorials how to use git to manage your user configuration files on a linux vps Advanced File System Copying moving and merging files python copy without subfolders find worker 1 data db type f exec cp data all Random Net python integrate databases py src data ALL dest COMBINED db Data files moving merge rsync aP worker 1 data db data all rsync aP worker 2 data db data all Copy files to remote server python scp file txt remote username ip address remote directory scp file txt jason 10 10 0 2 remote directory scp remote username host name from directory to directory scp jason hetzner com mnt jason file xml Users jason Desktop Find files directories commands and applications This another topic that can take a while to learn all of the functionality but can make your life amazinginly easier in the long run Refer back to over time and reference a few of these tutorials at Digital Ocean https www digitalocean com community tutorials how to use find and locate to search for files on a linux vps and Binary Tides https www binarytides com linux find command examples python files dir find find location comparison criteria search term find path type f d maxdepth 2 iname name ignore case iname or name find ipath path ignore case find lname symbolic link find regex name by regex find files and remove them find maxdepth 1 type d name feature exec rm rf check everywhere locate filename commands history grep ssh application binaries whereis b application Find files that contain matching text Searching among millions of files for specific text is a very powerful feature Be sure to include this in your daily habits and it will be a live saver for some future endeavor python grep rnw path to somewhere e pattern r or R is recursive n line number w match the whole word i ignore case l lower case L can be added to just give the file name of matching files Along with these exclude include exclude dir flags could be used for efficient searching This will only search through those files which have c or h extensions grep include c h rnw path to somewhere e pattern This will exclude searching all the files ending with o extension grep exclude o rnw path to somewhere e pattern For directories it s possible to exclude a particular directory ies through exclude dir parameter For example this will exclude the dirs dir1 dir2 and all of them matching dst grep exclude dir dir1 dir2 dst rnw path to somewhere e pattern Perform command on multiple files There are two ways you can apply the same command across multiple files The first is a one liner using find with exec The second is using a for loop The examples use the following Clojure compilation on a javascript file java jar compiler jar js filename js js output file newfilename js python find and execute find name js exec java jar compiler jar js js output file new python typical for loop for filename in js do java jar compiler jar js filename js output file new filename done Compress and archive python create zip automatic compression zip r desired file zip dir path exclude file from zip zip desired file zip r dir path x file extension add to existing zip zip r existing file zip path to dir tar compress maintains folder structure tar czvf desired tar file dir path list files tar tf tarfilename uncompress extract tar xzvf tarball file Delete and trash safe delete python rm file sudo apt get install trash cli trash file trash list trash restore file trash empty Processing Files This subject is quite popular after the big data and data science movement Being able to work with files as they exist on the file system without bringing them into a memory hungry processing environment such as R or Python can be a life saver These are a few popular resources for learning more Data science tools for the command line https www datascienceworkshops com blog seven command line tools for data science book Data science at the command line https www datascienceatthecommandline com tools Count files in dir python echo Files ls 1q wc l echo Files in subs find type f wc l Data files summarizing python check number of lines wc l Data taxi green tripdata 2015 09 csv check first few lines head n3 Data taxi green tripdata 2015 09 csv Regex python env grep i User Tools For YAML use shyaml For Amazon S3 s3cmd is convenient and s4cmd is faster Amazon s aws and the improved saws are essential for other AWS related tasks jq sed for JSON For interactive use also see jid and jiq json2csv convert JSON to CSV csvkit suite of utilities for working with CSV provides in2csv csvcut csvjoin csvgrep etc scrape HTML extraction using XPath or CSS selectors xml2json convert XML to JSON Version Control and Github The awesome github https github com jlevy awesome github 1 page provides a good understanding of the functionality that made Github the universal repo site for public source code projects Its private couterpart is an emulation named Gitlab https about gitlab com python Git git checkout HEAD my file txt git push origin delete branch name git branch d branch name git remote set url origin https some url some repo git reset hard git clean f d Conclusion This post is more of a cheatsheet and summary than it is for learning Each individual subject could be expounded upon in a book The reader can use this to gain a superficial understanding and have some commands to try After learning more about the details it can be referenced for a quick review",
        "tags": [
            "commandline",
            "tag2",
            "tag3"
        ]
    },
    {
        "uri": "/posts/blog_datastore-elasticsearch",
        "title": "Simple, Scalable, and Responsive Data Retrieval with ElasticSearch",
        "content": "\nDistributed systems are very popular tools in the big data market space and ElasticSearch evolved to become one of the major players It serves the niche role of scaling to store large amounts of data then allows querying it quickly It evolved greatly over the last ten years to provide a variety of functionality While it serves its primary purpose well teams should resist the urge to use it in other roles such as advanced analytics Tool Characteristics Strengths ElasticSearch is a Java Lucene based tool that queries large unstructured data very quickly It can be deployed using docker and offers just a simple http endpoint for interaction In the realm of big data it provides much the expected functionality Because is distributed it has great ability to scale horizontally The data is also replicated automatically in case of server node failure ElasticSearch can execute complex queries very quickly This is because it indexes all data Part of its speed is that it caches many of the queries used as a filter so it only executes them once This is performed with support for all commonly used data types such as Text structured and unstructured Numbers long integer short byte double float Dates as well as complex types such as arrays objects nested types geo spatial iPV4 and others Additional functionality is provided through a variety of plugins This supports scenarios for great security and analysis Weaknesses Despite these strengths Elasticsearch has drawbacks that are quite similar to other big data tools Particularly it is great with data search and recovery but not for creating and modifying data MongoDb is still popular for unstructured transactional data ElasticSearch is a type of data warehousing paradigm not a database replacement Specifically the Elastic company with its many related products really grew in size when it was applied to logging and log search problems The last decade saw a growing demand for analysts to be able to search the large amounts of metadata created by machines Elastic attempted to make in roads as an analytics and data science platform This is a dangerous road for teams to go down While it can retrieve data specifically in time series scenarios ElasticSearch is an unstructured only tool Data science demands structure in the final stages of modeling The balance of working with structured and unstructured data is handled very well by Apache Spark s RDD s and DataFrames ElasticSearch has no such complimentary models The most sophisticated role it can handel is the analyst answering basic business questions Another difficulty is the major breakages that occur between versions For a fast moving team keeping up to date with the latest ElasticSearch can be a big obstacle Installation ElasticSearch can be quickly deployed on a single node using docker One requirement is the vm max map count kernel setting needs to be set to at least 262144 for production use python get the container running docker run d p 9200 9200 p 9300 9300 e discovery type single node name cntr elastic docker elastic co elasticsearch elasticsearch 7 0 1 enter container to check out configs docker exec it user root cntr elastic bash The configuration is loaded from files under usr share elasticsearch config Some configurations that may need changing in elasticsearch yml cluster name docker cluster path logs path to logs discovery zen ping unicast hosts localhost To install directly on MacOS it is simple enough Afterward make appropriate updates to bash profile python brew install elasticsearch Check that node es01 listens on localhost 9200 while es02 talks to es01 over a Docker network NOTE because we are running these curl command from within docker and they must reach the host s ip address then when must use host docker internal for the ip address since the host is a MacOS Read more about your host s ip address by referencing this stackoverflow post https stackoverflow com questions 22944631 how to get the ip address of the docker host from inside a docker container python curl http host docker internal 9200 cat health output nb output 1559051160 13 46 00 docker cluster green 1 1 0 0 0 0 0 0 100 0 output Operation Typical command syntax All commands follow similar pattern HTTP Verb Index Endpoint ID Explore cluster Get health of the cluster Green everything is good cluster is fully functional Yellow all data is available but some replicas are not yet allocated cluster is fully functional Red some data is not available for whatever reason cluster is partially functional python curl X GET host docker internal 9200 cat health v output nb output epoch timestamp cluster status node total node data shards pri relo init unassign pending tasks max task wait time active shards percent 1559051178 13 46 18 docker cluster green 1 1 0 0 0 0 0 0 100 0 output List the available nodes python curl X GET host docker internal 9200 cat nodes v output nb output ip heap percent ram percent cpu load 1m load 5m load 15m node role master name 172 17 0 3 31 31 16 0 33 0 25 0 14 mdi fa57091880ec output List indices being used python curl X GET host docker internal 9200 cat indices v output nb output health status index uuid pri rep docs count docs deleted store size pri store size output Create a new index customer and use pretty print in json There is now one index named customer and it has one primary shard and one replica the defaults and it contains zero documents in it python curl X PUT host docker internal 9200 customer pretty output nb output acknowledged true shards acknowledged true index customer output Add Index one document with id of 1 specific id provided python curl X PUT host docker internal 9200 customer doc 1 pretty H Content Type application json d name John Doe output nb output index customer type doc id 1 version 1 result created shards total 2 successful 1 failed 0 seq no 0 primary term 1 output no id specified python curl X POST host docker internal 9200 customer doc pretty H Content Type application json d name Jane Doe output nb output index customer type doc id K4Sy moBhQilF9iEcwe version 1 result created shards total 2 successful 1 failed 0 seq no 1 primary term 1 output Query the index python curl X GET host docker internal 9200 customer doc 1 pretty output nb output index customer type doc id 1 version 1 seq no 0 primary term 1 found true source name John Doe output Delete the index python curl X DELETE host docker internal 9200 customer pretty output nb output acknowledged true output Modify data Add Index one document with id of 1 specific id provided python curl X PUT host docker internal 9200 customer doc 1 pretty H Content Type application json d name John Doe output nb output index customer type doc id 1 version 1 result created shards total 2 successful 1 failed 0 seq no 0 primary term 1 output Update document Change the name and provide a new field python curl X POST host docker internal 9200 customer update 1 pretty H Content Type application json d doc name Jane Doe age 20 output nb output index customer type doc id 1 version 2 result updated shards total 2 successful 1 failed 0 seq no 1 primary term 1 output Increment with script python curl X POST host docker internal 9200 customer update 1 pretty H Content Type application json d script ctx source age 5 output nb output index customer type doc id 1 version 3 result updated shards total 2 successful 1 failed 0 seq no 2 primary term 1 output Delete the document python curl X DELETE host docker internal 9200 customer doc 2 pretty output nb output index customer type doc id 2 version 1 result not found shards total 2 successful 1 failed 0 seq no 3 primary term 1 output Run a Batch process update the first doc delete the second if a single action fails it will continue to process others may get an error n different for each operating system python curl X POST host docker internal 9200 customer bulk pretty H Content Type application json d index id 1 name John Doe index id 2 Explore data Bulk load json load data file accounts json python curl H Content Type application json XPOST host docker internal 9200 bank bulk pretty refresh data binary Data ElasticSearch accounts json Query uri python curl X GET host docker internal 9200 bank search q sort account number asc pretty Query body more typical and expressive search source is used to select fields from is 0 based defaults to 0 size defaults to 10 python curl X GET host docker internal 9200 bank search H Content Type application json d query match all source account number balance sort account number asc from 10 size 1 output nb output took 11 timed out false shards total 1 successful 1 skipped 0 failed 0 hits total value 1000 relation eq max score null hits index bank type doc id 10 score null source account number 10 balance 46170 sort 10 output Query where clause bool must clause specifies AND all the queries that must be true bool should clause for OR bool must not clause for NONE python curl X GET host docker internal 9200 bank search H Content Type application json d query bool must match address mill match address lane output nb output took 25 timed out false shards total 1 successful 1 skipped 0 failed 0 hits total value 1 relation eq max score 9 507477 hits index bank type doc id 136 score 9 507477 source account number 136 balance 45801 firstname Winnie lastname Holland age 38 gender M address 198 Mill Lane employer Neteria email winnieholland neteria com city Urie state IL output Query filter clause get a range of values bool query contains a match all query the query part and a range query the filter part python curl X GET host docker internal 9200 bank search H Content Type application json d query bool must match all filter range balance gte 20000 lte 30000 For more specific queries using Aggregations https www elastic co guide en elasticsearch reference current getting started aggregations html check the docs Conclusion ElasticSearch is a powerful tool for a very specific use case of fast data querying However do not attempt over extend its functional uses References docker configurations https www elastic co guide en elasticsearch reference current docker html gettings started guide https www elastic co guide en elasticsearch reference current index html",
        "tags": [
            "elasticsearch",
            "tag2"
        ]
    },
    {
        "uri": "/posts/blog_datastore-xml_elementtree",
        "title": "Working with XML Data Using Python",
        "content": "\nTogether with JSON the XML format is the most popular structure for data on the web It is not only used for data storage but also for websites in the form of HTML XML was seen as the ubiquitous data format but with the ascent of Javascript JSON became more popular for web applications Still XML is an effective format and learning to parse and work with it is necessary for anyone who works with a variety of data sources Introduction to ElementTree ElementTree is written in C formerly cElementTree and is part of the Python stdlib While the API may not be as easy as some other modules such as minidom and beautifulsoup ElementTree is quite fast and efficient Below are the results of tests performed by the ElementTree maintainers Library Time Space xml dom minidom Python 2 1 6 3 s 80000K gnosis objectify 2 0 s 22000k xml dom minidom Python 2 4 1 4 s 53000k ElementTree 1 2 1 6 s 14500k ElementTree 1 2 4 1 3 1 1 s 14500k cDomlette C extension 0 540 s 20500k PyRXPU C extension 0 175 s 10850k libxml2 C extension 0 098 s 16000k readlines read as utf 8 0 093 s 8850k cElementTree C extension 0 047 s 4900K readlines read as ascii 0 032 s 5050k Config Begin by ensuring that your xml file is well formed You can get a sense of this by visual inspection If the XML is not valid then you will not be able to load the file python ls Data example output nb output example xml output python head n3 Data example example xml output nb output xml version 1 0 collection genre category Action output python tail n3 Data example example xml output nb output decade genre collection output python import xml etree ElementTree as ET python file path Data example example xml tree ET parse file path Explore Continue exploring the structure of the xml There is typically a level of the branch where there are many leaves These leaves are often the data you are most interested in examining python root tree getroot python print root print root tag print root attrib output nb output Element collection at 0x7fc18cd36db8 collection output python x tag x attrib for x in root output nb output genre category Action genre category Thriller output python x tag x attrib for idx x in enumerate root iter if idx 10 output nb output collection genre category Action decade years 1980s movie favorite True title Indiana Jones The raiders of the lost Ark format multiple No year rating description movie favorite True title THE KARATE KID format multiple Yes output It looks like a path of branches gets us to our movie leaf To get there we must follow genre decade movie python print ET tostring root encoding utf8 decode utf8 700 output nb output xml version 1 0 encoding utf8 collection genre category Action decade years 1980s movie favorite True title Indiana Jones The raiders of the lost Ark format multiple No DVD format year 1981 year rating PG rating description Archaeologist and adventurer Indiana Jones is hired by the U S government to find the Ark of the Covenant before the Nazis description movie movie favorite True title THE KARATE KID format multiple Yes DVD Online format output XPath Expressions XPath is a query language used to search through an XML quickly and easily XPath is a path like syntax to identify and navigate nodes in an XML document ElementTree has a findall function that will traverse the immediate children of the referenced element You can use XPath expressions to specify more useful searches python for movie in root findall genre decade movie print movie attrib output nb output favorite True title Indiana Jones The raiders of the lost Ark favorite True title THE KARATE KID favorite False title Back 2 the Future favorite False title X Men favorite True title Batman Returns favorite False title Reservoir Dogs favorite False title ALIEN favorite True title Ferris Bueller s Day Off favorite FALSE title American Psycho output Search on child tag python for leaf in root findall genre decade movie year 1992 print leaf attrib output nb output favorite True title Batman Returns favorite False title Reservoir Dogs output Search on child tag s attribute python for leaf in root findall genre decade movie format multiple Yes print leaf output nb output Element format at 0x7fc18c4e6138 Element format at 0x7fc18c4e64a8 Element format at 0x7fc18c4e69f8 output use inside of XPath to return the parent element of the current element python for leaf in root findall genre decade movie format multiple Yes print leaf attrib output nb output favorite True title THE KARATE KID favorite False title X Men favorite False title ALIEN output Modifying XML Single element Obtain a single element of the tree and assign it to a variable python b2tf root find genre decade movie title Back 2 the Future print b2tf output nb output Element movie at 0x7fc18c4e6278 output python b2tf attrib output nb output favorite False title Back 2 the Future output python b2tf attrib title Back to the Future print b2tf attrib output nb output favorite False title Back to the Future output Because the assignment is not a deep copy the change is made in place Now we can write the corrected tree to file python for movie in root findall genre decade movie print movie attrib output nb output favorite True title Indiana Jones The raiders of the lost Ark favorite True title THE KARATE KID favorite False title Back to the Future favorite False title X Men favorite True title Batman Returns favorite False title Reservoir Dogs favorite False title ALIEN favorite True title Ferris Bueller s Day Off favorite FALSE title American Psycho output python import os path os path dirname file path corr file os path join path example corr xml tree write corr file python ls Data example output nb output example corr xml example xml output Multiple elements You can use regex to find commas that will tell whether the multiple attribute should be Yes or No Adding and modifying attributes can be done easily with the set method python for form in root findall genre decade movie format print form attrib form text output nb output multiple No DVD multiple Yes DVD Online multiple False Blu ray multiple Yes dvd digital multiple No VHS multiple No Online multiple Yes DVD multiple No DVD multiple No blue ray output python import re for form in root findall genre decade movie format Search for the commas in the format text match re search form text if match form set multiple Yes else form set multiple No python for form in root findall genre decade movie format print form attrib form text output nb output multiple No DVD multiple Yes DVD Online multiple No Blu ray multiple Yes dvd digital multiple No VHS multiple No Online multiple No DVD multiple No DVD multiple No blue ray output python import os path os path dirname file path corr file os path join path example corr xml tree write corr file Move elements Check if movies are correctly categorized by year and fix them if not python for decade in root findall genre decade print decade attrib for year in decade findall movie year print year text n output nb output years 1980s 1981 1984 1985 years 1990s 2000 1992 1992 years 1970s 1979 years 1980s 1986 2000 output python for movie in root findall genre decade movie year 2000 print movie attrib output nb output favorite False title X Men favorite FALSE title American Psycho output Add a new decade tag to the end of the XML using the SubElement method python action root find genre category Action new dec ET SubElement action decade new dec attrib years 2000s print ET tostring action encoding utf8 decode utf8 500 output nb output xml version 1 0 encoding utf8 genre category Action decade years 1980s movie favorite True title Indiana Jones The raiders of the lost Ark format multiple No DVD format year 1981 year rating PG rating description Archaeologist and adventurer Indiana Jones is hired by the U S government to find the Ark of the Covenant before th output Use append and remove to move the element python xmen root find genre decade movie title X Men dec2000s root find genre category Action decade years 2000s dec2000s append xmen dec1990s root find genre category Action decade years 1990s dec1990s remove xmen python print ET tostring action encoding utf8 decode utf8 500 output nb output xml version 1 0 encoding utf8 genre category Action decade years 1980s movie favorite True title Indiana Jones The raiders of the lost Ark format multiple No DVD format year 1981 year rating PG rating description Archaeologist and adventurer Indiana Jones is hired by the U S government to find the Ark of the Covenant before th output python import os path os path dirname file path corr file os path join path example corr xml tree write corr file XML schema xsd ElementTree does not have support for XML schema However lxml library is based on ElementTree and it does have support for schemas If you have access to external libraries and need the functionality then lxml may solve your problems With a XMLSchema you can enforce the schema standards python from lxml import etree Create the schema object with open xsd file as f xmlschema doc etree parse f xmlschema etree XMLSchema xmlschema doc Create a tree for the XML document doc etree parse xml text Validate the XML document using the schema return xmlschema validate doc Or if you want a exception to be raised xmlschema assertValid doc Conclusion Working with XML is an important skill and Python stdlib s ElementTree library is invaluable for getting things done fast With a little knowledge of the ElementTree API and XPath expressions you re fully capable of most functionality needed for XML CRUD operations",
        "tags": [
            "xml",
            "python"
        ]
    },
    {
        "uri": "/posts/blog_ds_spark_deployment",
        "title": "Spark Deployments",
        "content": "\nHadoop is seen as the staple of clusters and distributed management Spark is ubiquitous data science tool What if you combine Hadoop with Spark We will explore that question and compare different deployment architectures in this post Introduction As Storage you use HDFS Analytics is done with Apache Spark and YARN is taking care of the resource management Why does that work so well together From a platform architecture perspective Hadoop and Spark are usually managed on the same cluster This means on each server where a HDFS data node is running a Spark worker thread runs as well In distributed processing network transfer between machines is a large bottle neck Transferring data within a machine reduces this traffic significantly Spark is able to determine on which data node the needed data is stored This allows a direct load of the data from the local storage into the memory of the machine This reduces network traffic a lot Spark on Yarn You need to make sure that your physical resources are distributed perfectly between the services This is especially the case when you run Spark workers with other Hadoop services on the same machine It just would not make sense to have two resource managers managing the same server s resources Sooner or later they will get in each others way That s why the Spark standalone resource manager is seldom used So the question is not Spark or Hadoop The question has to be Should you use Spark or MapReduce alongside Hadoop s HDFS and YARN Spark is an in memory distributed computing engine Hadoop is a framework for distributed storage HDFS and distributed processing YARN Spark can run with or without Hadoop components HDFS YARN Since Spark does not have its own distributed storage system it has to depend on one of these storage systems for distributed computing S3 Non urgent batch jobs S3 fits very specific use cases when data locality isn t critical Cassandra Perfect for streaming data analysis and an overkill for batch jobs HDFS Great fit for batch jobs without compromising on data locality Architectures We can explore some different architectures that are commonly used These are constantly evolving as new IAAS and open source projects become available Traditional The traditional approach is to keep a cluster of servers running 24x7 The cluster uses HDFS as data storage and Hadoop yarn managing the servers MapReduce can perform simple ETL but if advanced processing is needed then Spark can be employed on top of the cluster This is used for traditional batch processing of large volumes of data when software requirements do not allow for the cluster to be automatically configured It is also the most expensive design witch typical arrangements costing 20K per month While expensive you have access to the entire Hadoop ecosystem the additional applications are trivial to use once you have the hardware You use Apache Kafka to ingest data and store the it in HDFS You do the analytics with Apache Spark and as a backend for the display you store data in Apache HBase To have a working system you also need YARN for resource management You also need Zookeeper a configuration management service to use Kafka and HBase Spark for instance can directly access Kafka to consume messages It is able to access HDFS for storing or processing stored data It also can write into HBase to push analytics results to the front end The cool thing of such ecosystem is that it is easy to build in new functions Want to store data from Kafka directly into HDFS without using Spark No problem there is a project for that Apache Flume has interfaces for Kafka and HDFS It can act as an agent to consume messages from Kafka and store them into HDFS You even do not have to worry about Flume resource management A large bank can now process payments and update accounts daily with just a small team of engineers available for potential problems Analysts can create thorough reports from the data warehouse Lambda Once businesses started demanding that the Traditional architecture provide more data faster the batch processing pipeline was not going to deliver So a second pipeline speed processing was setup next to the Traditional for near real time performance may not be as accurate or complete as the ones eventually produced by the batch layer but they are available almost immediately after data is received A large bank now has a current view of customer transactions and accounts and can make tactical decisions hourly SMACK Stack This high throughput scalable design uses all of the latest Apache tools in a streaming manner for the latest Internet Of Things IOT data ingestion problems SMACK is an acronym for Spark Mesos Akka Cassandra and Kafka Spark and Mesos are obvious replacements for Hadoop Akka is an event driven functional paradigm for managing all of this Cassandra is a data store while Kafka is a messaging pipe like RabbitMQ A large bank can now provide instant feedback to the customer on products customized for their background and the banks current situation Highest Value The deployment that allows you to be most productive for the lowest cost is batch ETL of temporary clusters In this arrangement a cluster is spun up data is processed then the cluster is brought down AWS popularized this technique with S3 Spark Mesos all coordinated with Lambda Challenges arise when working with custom legacy software that may make automated cluster creation difficult A bank can now replace its constantly running cluster with a batch process that may cost a few hundred dollars a week Conclusion These deployment categories are useful as a guide to the different ways Big Data tools can be used together If you have the time and resources and are feeling adventurous you can try something new on dedicated machines However for solution architects on a budget these tried and true lessons can be employed fairly quickly and with confidence that problems can be fixed with stable solutions",
        "tags": [
            "spark",
            "deployment"
        ]
    },
    {
        "uri": "/posts/blog_ds-dataframe_r_and_pandas",
        "title": "The R and Pandas Dataframe",
        "content": "\nAlthough Pandas uses the Dataframe as its primary data structure just as R does the Pandas syntax and underlying fundamentals can be disorienting for R users This post will describe some basic comparisons and inconsistencies between the two languages It will also provide some examples of very non intuitive solutions to common problems Introduction In the Datascience R versus Pandas debate it is really an apples and oranges comparison R is a domain specific language in the field of statistics analytics and data visualization This makes R great for consulting research and basic analysis especially within a careful academic context In contrast Python s statistics packages are woefully inadequate and rarely mention details which are of great importance to statistical practicioners An example of this is the use of contrasts in linear models The different Types I IV of Analysis Of Variance models use different encodings for data Determining their estimators is not trivial However if you want tight integration with other applications the strengths of typical programming languages and want to just get models done then Python Pandas is a great solution Pandas is quite good at data manipulation Python has the very strong NumPy and SciKit Learn module which are very good for matrix operations and predictive modeling And the Python language is a really good general scripting language with strong support for strings and datetime types Setup Ensure to import the proper libraries Let s compare with R syntax directly using rpy2 python import pandas as pd import numpy as np python load ext rpy2 ipython python R require ggplot2 output nb output array 1 dtype int32 output These Dataframes will be used for the various problems python trades pd DataFrame 2016 05 25 13 30 01 023 MSFT 51 95 75 2016 05 25 13 30 01 038 MSFT 51 95 155 2016 05 25 13 30 03 048 GOOG 720 77 100 2016 05 25 13 30 03 048 GOOG 720 92 100 2016 05 25 13 30 03 048 AAPL 98 00 100 columns timestamp ticker price quantity set index during assignment index col timestamp trades timestamp pd to datetime trades timestamp trades head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 0 th td 2016 05 25 13 30 01 023 td td MSFT td td 51 95 td td 75 td tr tr th 1 th td 2016 05 25 13 30 01 038 td td MSFT td td 51 95 td td 155 td tr tr th 2 th td 2016 05 25 13 30 03 048 td td GOOG td td 720 77 td td 100 td tr tr th 3 th td 2016 05 25 13 30 03 048 td td GOOG td td 720 92 td td 100 td tr tr th 4 th td 2016 05 25 13 30 03 048 td td AAPL td td 98 00 td td 100 td tr tbody table div We then set the index to the timestamp The index allows selecting rows with the loc and at methods python trades idx trades set index timestamp trades idx head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th ticker th th price th th quantity th tr tr th timestamp th th th th th th th tr thead tbody tr th 2016 05 25 13 30 01 023 th td MSFT td td 51 95 td td 75 td tr tr th 2016 05 25 13 30 01 038 th td MSFT td td 51 95 td td 155 td tr tr th 2016 05 25 13 30 03 048 th td GOOG td td 720 77 td td 100 td tr tr th 2016 05 25 13 30 03 048 th td GOOG td td 720 92 td td 100 td tr tr th 2016 05 25 13 30 03 048 th td AAPL td td 98 00 td td 100 td tr tbody table div Syntax Differences Basic selection The primary purpose of the DataFrame indexing operator df is to select columns python trades ticker head 3 output nb output 0 MSFT 1 MSFT 2 GOOG Name ticker dtype object output python trades ticker price head 3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th ticker th th price th tr thead tbody tr th 0 th td MSFT td td 51 95 td tr tr th 1 th td MSFT td td 51 95 td tr tr th 2 th td GOOG td td 720 77 td tr tbody table div r R i trades head trades ticker 3 output nb output ticker 0 MSFT 1 MSFT 2 GOOG output r R i trades head trades c ticker price 3 output nb output ticker price 0 MSFT 51 95 1 MSFT 51 95 2 GOOG 720 77 output When the indexing operator is passed a string or integer it attempts to find a column with that particular name and return it as a Series For example df 2 searches for a column name matching the integer value 2 This column does not exist and a KeyError is raised python try trades 2 except print got key error output nb output got key error output r R i trades head trades 2 3 output nb output ticker 0 MSFT 1 MSFT 2 GOOG output r R i trades head trades 2 3 output nb output 1 MSFT MSFT GOOG output We can use integer indexing of columns in R Its not necessary to use the c concatenate function to create a vector but it can often make your code cleaner r R i trades head trades c 2 3 3 output nb output ticker price 0 MSFT 51 95 1 MSFT 51 95 2 GOOG 720 77 output However the DataFrame indexing operator completely changes behavior to select rows when slice notation is used The DataFrame indexing operator selects rows in this manner and can also do so by integer location or by index label python trades 3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 0 th td 2016 05 25 13 30 00 023 td td MSFT td td 51 95 td td 75 td tr tr th 1 th td 2016 05 25 13 30 00 038 td td MSFT td td 51 95 td td 155 td tr tr th 2 th td 2016 05 25 13 30 00 048 td td GOOG td td 720 77 td td 100 td tr tbody table div r R i trades head trades 1 3 3 output nb output timestamp ticker price quantity 0 2016 05 25 13 30 00 MSFT 51 95 75 1 2016 05 25 13 30 00 MSFT 51 95 155 2 2016 05 25 13 30 00 GOOG 720 77 100 output The following selects rows beginning at integer location 1 up to but not including 6 by every third row python trades 1 6 3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 1 th td 2016 05 25 13 30 00 038 td td MSFT td td 51 95 td td 155 td tr tr th 4 th td 2016 05 25 13 30 00 048 td td AAPL td td 98 00 td td 100 td tr tbody table div You can also use slices consisting of string labels if your DataFrame index has strings in it Here we have new operators iloc to explicity support only integer indexing and loc to explicity support only label indexing python trades iloc 1 6 3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 1 th td 2016 05 25 13 30 00 038 td td MSFT td td 51 95 td td 155 td tr tr th 4 th td 2016 05 25 13 30 00 048 td td AAPL td td 98 00 td td 100 td tr tbody table div With the timestamp index we can subset using a variety of input string formats python trades idx loc 2016 05 head 3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th ticker th th price th th quantity th tr tr th timestamp th th th th th th th tr thead tbody tr th 2016 05 25 13 30 00 023 th td MSFT td td 51 95 td td 75 td tr tr th 2016 05 25 13 30 00 038 th td MSFT td td 51 95 td td 155 td tr tr th 2016 05 25 13 30 00 048 th td GOOG td td 720 77 td td 100 td tr tbody table div python trades idx loc May 2016 head 3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th ticker th th price th th quantity th tr tr th timestamp th th th th th th th tr thead tbody tr th 2016 05 25 13 30 00 023 th td MSFT td td 51 95 td td 75 td tr tr th 2016 05 25 13 30 00 038 th td MSFT td td 51 95 td td 155 td tr tr th 2016 05 25 13 30 00 048 th td GOOG td td 720 77 td td 100 td tr tbody table div The loc iloc operators can select on both rows and columns simultaneously the indexing operator cannot python trades idx loc May 2016 ticker output nb output timestamp 2016 05 25 13 30 00 023 MSFT 2016 05 25 13 30 00 038 MSFT 2016 05 25 13 30 00 048 GOOG 2016 05 25 13 30 00 048 GOOG 2016 05 25 13 30 00 048 AAPL Name ticker dtype object output python try trades 2 ticker except print use R output nb output use R output This all seems very tideous for R users just get on with it r R i trades head trades 2 ticker 3 output nb output 1 MSFT output Dataframe Index One of the fundamental differences between R and pandas is that pandas leans heavily upon the dataframe index For R users it can seem like an annoyance however using it is required because many results of pandas methods return a dataframe with an index The index is already set for trades idx but if we want to replace it with a new one it is easily done python trades idx set index price div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th ticker th th quantity th tr tr th price th th th th th tr thead tbody tr th 51 95 th td MSFT td td 75 td tr tr th 51 95 th td MSFT td td 155 td tr tr th 720 77 th td GOOG td td 100 td tr tr th 720 92 th td GOOG td td 100 td tr tr th 98 00 th td AAPL td td 100 td tr tbody table div There are two ways to move the index into a column python new trades idx trades idx copy new trades idx timestamp trades idx index new trades idx div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th ticker th th price th th quantity th th timestamp th tr tr th timestamp th th th th th th th th th tr thead tbody tr th 2016 05 25 13 30 00 023 th td MSFT td td 51 95 td td 75 td td 2016 05 25 13 30 00 023 td tr tr th 2016 05 25 13 30 00 038 th td MSFT td td 51 95 td td 155 td td 2016 05 25 13 30 00 038 td tr tr th 2016 05 25 13 30 00 048 th td GOOG td td 720 77 td td 100 td td 2016 05 25 13 30 00 048 td tr tr th 2016 05 25 13 30 00 048 th td GOOG td td 720 92 td td 100 td td 2016 05 25 13 30 00 048 td tr tr th 2016 05 25 13 30 00 048 th td AAPL td td 98 00 td td 100 td td 2016 05 25 13 30 00 048 td tr tbody table div python trades idx reset index level 0 inplace False div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 0 th td 2016 05 25 13 30 00 023 td td MSFT td td 51 95 td td 75 td tr tr th 1 th td 2016 05 25 13 30 00 038 td td MSFT td td 51 95 td td 155 td tr tr th 2 th td 2016 05 25 13 30 00 048 td td GOOG td td 720 77 td td 100 td tr tr th 3 th td 2016 05 25 13 30 00 048 td td GOOG td td 720 92 td td 100 td tr tr th 4 th td 2016 05 25 13 30 00 048 td td AAPL td td 98 00 td td 100 td tr tbody table div When using a timestamp as an index default datetime format ISO8601 yyyy mm dd hh mm ss is used when selecting data with partial string indexing python try trades idx loc 2016 05 25 13 30 00 023 except print cannot use fractions of seconds output nb output cannot use fractions of seconds output python trades idx loc 2016 05 25 13 30 01 2016 05 25 13 30 02 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th ticker th th price th th quantity th tr tr th timestamp th th th th th th th tr thead tbody tr th 2016 05 25 13 30 01 023 th td MSFT td td 51 95 td td 75 td tr tr th 2016 05 25 13 30 01 038 th td MSFT td td 51 95 td td 155 td tr tbody table div While the index of a R dataframe is immutable the index of a pandas dataframe can expand or even lose arbitrary items In this example some rows are removed and the index goes with them If we don t reset index then those rows will always be missing python tmp2 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th ticker th th price th th quantity th th timestamp th tr tr th timestamp th th th th th th th th th tr thead tbody tr th 2016 05 25 13 30 00 023 th td MSFT td td 51 95 td td 75 td td 2016 05 25 13 30 00 023 td tr tr th 2016 05 25 13 30 00 038 th td MSFT td td 51 95 td td 155 td td 2016 05 25 13 30 00 038 td tr tr th 2016 05 25 13 30 00 048 th td GOOG td td 720 77 td td 100 td td 2016 05 25 13 30 00 048 td tr tr th 2016 05 25 13 30 00 048 th td GOOG td td 720 92 td td 100 td td 2016 05 25 13 30 00 048 td tr tr th 2016 05 25 13 30 00 048 th td AAPL td td 98 00 td td 100 td td 2016 05 25 13 30 00 048 td tr tbody table div python tmp2 trades copy tmp3 tmp2 0 4 2 tmp3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 0 th td 2016 05 25 13 30 01 023 td td MSFT td td 51 95 td td 75 td tr tr th 2 th td 2016 05 25 13 30 03 048 td td GOOG td td 720 77 td td 100 td tr tbody table div python tmp3 reset index inplace True tmp3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th index th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 0 th td 0 td td 2016 05 25 13 30 01 023 td td MSFT td td 51 95 td td 75 td tr tr th 1 th td 2 td td 2016 05 25 13 30 03 048 td td GOOG td td 720 77 td td 100 td tr tbody table div Forgetting to reset index can cause serious problems You can also create a multi index to make things even more confusing python index pd MultiIndex from product TX FL CA North South names State Direction df pd DataFrame index index data np random randint 0 10 6 4 columns list abcd python df div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th th th a th th b th th c th th d th tr tr th State th th Direction th th th th th th th th th tr thead tbody tr th rowspan 2 valign top TX th th North th td 6 td td 4 td td 1 td td 5 td tr tr th South th td 0 td td 9 td td 3 td td 2 td tr tr th rowspan 2 valign top FL th th North th td 3 td td 2 td td 9 td td 3 td tr tr th South th td 7 td td 2 td td 3 td td 0 td tr tr th rowspan 2 valign top CA th th North th td 9 td td 6 td td 3 td td 4 td tr tr th South th td 5 td td 6 td td 9 td td 0 td tr tbody table div Subset replacement the SettingWithCopy warning Conditionally replacing values in R is straightforward because we can use simultaneous selection r R i trades tmp1 trades tmp1 tmp1 quantity 80 c price 100 tmp1 output nb output timestamp ticker price quantity 0 2016 05 25 13 30 01 MSFT 51 95 75 1 2016 05 25 13 30 01 MSFT 100 00 155 2 2016 05 25 13 30 03 GOOG 100 00 100 3 2016 05 25 13 30 03 GOOG 100 00 100 4 2016 05 25 13 30 03 AAPL 100 00 100 output We know that we cannot use simultaneous selection in pandas using the indexing operator python tmp1 trades copy try tmp1 tmp1 quantity 80 price 100 except print TypeError Series objects are mutable thus they cannot be hashed output nb output TypeError Series objects are mutable thus they cannot be hashed output Replacing by index doesn t give us what we want either The direct way fails too Oh pandas why must you be so difficult python tmp1 trades copy tmp1 tmp1 quantity 80 price 100 tmp1 output nb output opt conda lib python3 7 site packages ipykernel launcher py 2 SettingWithCopyWarning A value is trying to be set on a copy of a slice from a DataFrame Try using loc row indexer col indexer value instead See the caveats in the documentation http pandas pydata org pandas docs stable user guide indexing html returning a view versus a copy output div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 0 th td 2016 05 25 13 30 01 023 td td MSFT td td 51 95 td td 75 td tr tr th 1 th td 2016 05 25 13 30 01 038 td td MSFT td td 51 95 td td 155 td tr tr th 2 th td 2016 05 25 13 30 03 048 td td GOOG td td 720 77 td td 100 td tr tr th 3 th td 2016 05 25 13 30 03 048 td td GOOG td td 720 92 td td 100 td tr tr th 4 th td 2016 05 25 13 30 03 048 td td AAPL td td 98 00 td td 100 td tr tbody table div To understand we must look under the hood df loc df A 5 B 4 becomes df setitem df A 5 B 4 With a single setitem call to df On the otherhand consider this code df df A 5 B 4 becomes df getitem df A 5 setitem B 4 Now depending on whether getitem returned a view or a copy the setitem operation may not work The documentation addresses these issues here https pandas docs github io pandas docs travis user guide indexing html returning a view versus a copy But to summarize Whenever an array of labels or a boolean vector are involved in the indexing operation the result will be a copy With single label scalar indexing and slicing e g df ix 3 6 or df ix A a view will be returned Finally the loc method gives us what we want because we can use it with boolean indexing python tmp1 quantity 80 output nb output 0 False 1 True 2 True 3 True 4 True Name quantity dtype bool output python tmp1 trades copy tmp1 loc tmp1 quantity 80 price 100 tmp1 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th timestamp th th ticker th th price th th quantity th tr thead tbody tr th 0 th td 2016 05 25 13 30 01 023 td td MSFT td td 51 95 td td 75 td tr tr th 1 th td 2016 05 25 13 30 01 038 td td MSFT td td 100 00 td td 155 td tr tr th 2 th td 2016 05 25 13 30 03 048 td td GOOG td td 100 00 td td 100 td tr tr th 3 th td 2016 05 25 13 30 03 048 td td GOOG td td 100 00 td td 100 td tr tr th 4 th td 2016 05 25 13 30 03 048 td td AAPL td td 100 00 td td 100 td tr tbody table div General Usage Timestamps A pandas object type is used for text or mixed numeric and non numeric values To get the correct order of the timestamp column we need to change it to the datetime64 type Replacing datetime values has its own unique manner of course Don t want to lose this python df timestamp pd to datetime df timestamp str replace D T Merge Merge with an indicator for where the rows came from python df merge left merge right on key how left indicator True The merge column is used to check for unexpected rows python df merge merge value counts Merge by the nearest not exact timestamp python pd merge asof trades quotes on timestamp by ticker tolerance pd Timedelta 10ms direction backward Missing values Because Numpy has no native NA type pandas uses multiple values denote a missing value NaN for numeric object missing values NaT for DateTime missing values None which comes from Python What surprised me is that None equals None in Python but nan doesn t equal nan in numpy python None None python pd np nan pd np nan This is important so that we don t filter values by None python df df some column None instead use df df some column isnull Report creation Pandas with XlsxWriter library allows us to make an Excel sheet with graphs and other Excel functionality We need to define the type of the chart line chart in our example and the data series for the chart the data series needs to be in the Excel spreadsheet python report name example report xlsx sheet name Sheet1 writer pd ExcelWriter report name engine xlsxwriter df to excel writer sheet name sheet name index False writer save define the workbook workbook writer book worksheet writer sheets sheet name create a chart line object chart workbook add chart type line configure the series of the chart from the spreadsheet using a list of values instead of category value formulas sheetname first row first col last row last col chart add series categories sheet name 1 0 3 0 values sheet name 1 1 3 1 configure the chart axes chart set x axis name Index position axis on tick chart set y axis name Value major gridlines visible False place the chart on the worksheet worksheet insert chart E2 chart output the excel file writer save Saving objects When we save this file as CSV it takes almost 300 MB on the hard drive python df to csv random data csv index False With a single argument compression gzip we can reduce the file size to 136 MB df to csv random data gz compression gzip index False It is also easy to read the gzipped data to the DataFrame so we don t lose any functionality python df pd read csv random data gz Specific examples Negate a string replacement You can use negative look ahead assertion fish will firstly assert the pattern doesn t contain the word fish and then match every thing till the end of string and replace it with foo denotes the beginning of string combined with fish it asserts at BOS that there is no pattern like fish in the string If the assertion succeeds it matches everything till the end of string and replaces it with foo If the assertion fails the pattern doesn t match nothing would happen so python df replace r fish foo regex True Remove Outliers python df size clip df size clip df size quantile 0 01 df size quantile 0 99 df size clip plot kind box Bin group data python df price discrete labels pd cut df price 5 labels very low low mid high very high df price discrete labels value counts Equal sized groups python df price discrete equal bins pd qcut df price 5 df price discrete equal bins value counts Conclusion After reviewing these examples we hope you agree that R is a terse minimalistic and powerful language You can do so many things with just the dataframe operator that it makes interacting with R a joy It is so much of a joy that I typically don t know how the operations are actually being performed they just work Pandas is different It is bolted on to Python and its syntax is either not consistent or is just un wieldly But maybe that is a good thing because with Python I m typically automating a process not performing an interactive investigation I want to be forced to understand how the data is actually being worked and I want to optimize operations for performance because it is a process that will be automated Let s stop the impassioned vitrioles of one clan against another and use each of these tools for their respective strengths",
        "tags": [
            "python",
            "pandas",
            "r_language",
            "dataframe"
        ]
    },
    {
        "uri": "/posts/blog_ds-intro_numpy_pandas",
        "title": "An Introduction to Numpy and Pandas",
        "content": "\nNumpy and Pandas are the basic data science tools in the Python environment Having a good understanding of their capabilities and how they process data is imperative to writing optimal code This post provides an introductory overview and a refresher for those who might come back to the libraries after taking a break The end of the post explains external interfaces for increasing code execution and performing more sophisticated matrix operations Pandas Series and Dataframe These are the basic data structures used by Pandas Pandas derives its name from Pan el da ta s Panel data is an econometrics term for data recorded over time Pandas author Wes McKinney was working in the finanical industry when he began writing it Series objects 1D array similar to a column in a spreadsheet DataFrame objects 2D table similar to a spreadsheet dictionary of Series Panel objects Dictionary of DataFrames similar to sheet in MS Excel removed in 0 25 0 Config Let s load our modules Numpy is always used with Pandas because it is an underlying dependency python import numpy as np import pandas as pd We will create a few DataFrames to work with throughout the post Series are similar to R s vector c and is a column within a Pandas Dataframe python import pandas as pd s pd Series 1 3 5 np nan 6 8 dates pd date range 20130101 periods 6 df1 pd DataFrame np random randn 6 4 index dates columns list ABCD df1 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td tr tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td tr tbody table div python df2 pd DataFrame E 1 F pd Timestamp 20130102 G pd Series 1 index list range 4 dtype float32 H np array 3 4 dtype int32 I pd Categorical test train test train J foo df2 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th E th th F th th G th th H th th I th th J th tr thead tbody tr th 0 th td 1 0 td td 2013 01 02 td td 1 0 td td 3 td td test td td foo td tr tr th 1 th td 1 0 td td 2013 01 02 td td 1 0 td td 3 td td train td td foo td tr tr th 2 th td 1 0 td td 2013 01 02 td td 1 0 td td 3 td td test td td foo td tr tr th 3 th td 1 0 td td 2013 01 02 td td 1 0 td td 3 td td train td td foo td tr tbody table div python tmpdf2 df2 copy deep True tmpdf2 set index tmpdf2 F inplace True df3 df1 join tmpdf2 how outer or df3 pd merge df1 tmpdf2 how outer left index True right index True df3 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th E th th F th th G th th H th th I th th J th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td td 2013 01 02 td td 1 0 td td 3 0 td td test td td foo td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td td 2013 01 02 td td 1 0 td td 3 0 td td train td td foo td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td td 2013 01 02 td td 1 0 td td 3 0 td td test td td foo td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td td 2013 01 02 td td 1 0 td td 3 0 td td train td td foo td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tbody table div python df4 pd DataFrame A foo bar foo bar foo bar foo foo B one one two three two two one three C np random randn 8 D np random randn 8 df4 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th tr thead tbody tr th 0 th td foo td td one td td 0 870843 td td 1 255164 td tr tr th 1 th td bar td td one td td 0 678605 td td 0 569444 td tr tr th 2 th td foo td td two td td 0 270890 td td 0 692131 td tr tr th 3 th td bar td td three td td 1 008900 td td 1 841500 td tr tr th 4 th td foo td td two td td 0 381278 td td 0 918376 td tr tr th 5 th td bar td td two td td 0 666534 td td 0 483262 td tr tr th 6 th td foo td td one td td 0 132010 td td 1 949751 td tr tr th 7 th td foo td td three td td 1 517630 td td 0 458782 td tr tbody table div Index and axes python c df1 columns tolist c output nb output A B C D output python n df1 index tolist n output nb output Timestamp 2013 01 01 00 00 00 freq D Timestamp 2013 01 02 00 00 00 freq D Timestamp 2013 01 03 00 00 00 freq D Timestamp 2013 01 04 00 00 00 freq D Timestamp 2013 01 05 00 00 00 freq D Timestamp 2013 01 06 00 00 00 freq D output python calculate sum across rows for each column df1 sum axis 0 output nb output A 5 885887 B 0 973229 C 3 602993 D 1 248308 dtype float64 output python pd concat df1 df3 axis 0 sort False head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th E th th F th th G th th H th th I th th J th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td NaN td td NaT td td NaN td td NaN td td NaN td td NaN td tr tbody table div Data types NumPy arrays have one dtype for the entire array while pandas DataFrames have one dtype per column When you call DataFrame to numpy pandas will find the NumPy dtype that can hold all of the dtypes in the DataFrame This may end up being object which requires casting every value to a Python object python arr np array 1 2 3 pd Series arr values output nb output array 1 2 3 output python arr dtype output nb output dtype int64 output python df1 A to numpy output nb output array 1 36082656 0 2104261 1 82932214 1 32563421 1 18457701 0 024899 output Locate by column label index python n 0 output nb output Timestamp 2013 01 01 00 00 00 freq D output python df1 loc n 0 output nb output A 1 360827 B 0 871347 C 1 603602 D 0 073078 Name 2013 01 01 00 00 00 dtype float64 output python df1 loc c 0 c 1 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td tr tr th 2013 01 06 th td 0 024899 td td 0 252519 td tr tbody table div python df1 loc n 0 c 0 output nb output 1 3608265619610327 output python df1 c 0 5 output nb output 2013 01 01 1 360827 2013 01 02 0 210426 2013 01 03 1 829322 2013 01 04 1 325634 2013 01 05 1 184577 Freq D Name A dtype float64 output python df1 iloc 0 output nb output A 1 360827 B 0 871347 C 1 603602 D 0 073078 Name 2013 01 01 00 00 00 dtype float64 output python df1 iloc 0 output nb output 2013 01 01 1 360827 2013 01 02 0 210426 2013 01 03 1 829322 2013 01 04 1 325634 2013 01 05 1 184577 2013 01 06 0 024899 Freq D Name A dtype float64 output python df1 iloc 0 0 output nb output 1 3608265619610327 output Locate by boolean python df1 A 0 output nb output 2013 01 01 False 2013 01 02 False 2013 01 03 False 2013 01 04 False 2013 01 05 False 2013 01 06 True Freq D Name A dtype bool output python df1 df1 A 0 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th tr thead tbody tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td tr tbody table div python df5 df1 copy df5 K one one two three four three df5 K output nb output 2013 01 01 one 2013 01 02 one 2013 01 03 two 2013 01 04 three 2013 01 05 four 2013 01 06 three Freq D Name K dtype object output python df5 df5 K isin two four div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th K th tr thead tbody tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td two td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td four td tr tbody table div Sort values python sort df1 sort values c 0 ascending False div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th tr thead tbody tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td tr tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td tr tbody table div Subset python df1 query A 0 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th tr thead tbody tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td tr tbody table div python df1 df1 A 0 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th tr thead tbody tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td tr tbody table div Setting values python s1 pd Series 1 2 3 4 5 6 index pd date range 20130102 periods 6 df1 F s1 df1 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th F th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td td NaN td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td 2 0 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td 3 0 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td 4 0 td tr tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td td 5 0 td tr tbody table div python df5 df1 copy df5 df5 0 df5 df5 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th F th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td td NaN td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td 2 0 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td 3 0 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td 4 0 td tr tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td td 5 0 td tr tbody table div python df5 index to series apply pd to datetime output nb output 2013 01 01 2013 01 01 2013 01 02 2013 01 02 2013 01 03 2013 01 03 2013 01 04 2013 01 04 2013 01 05 2013 01 05 2013 01 06 2013 01 06 Freq D dtype datetime64 ns output python df5 index to series dt year output nb output 2013 01 01 2013 2013 01 02 2013 2013 01 03 2013 2013 01 04 2013 2013 01 05 2013 2013 01 06 2013 Freq D dtype int64 output Calculations python df1 apply np cumsum div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th F th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td td NaN td tr tr th 2013 01 02 th td 1 571253 td td 0 359628 td td 2 641412 td td 0 673604 td td 1 0 td tr tr th 2013 01 03 th td 3 400575 td td 0 016067 td td 2 646715 td td 1 986209 td td 3 0 td tr tr th 2013 01 04 th td 4 726209 td td 0 158169 td td 3 567816 td td 2 052103 td td 6 0 td tr tr th 2013 01 05 th td 5 910786 td td 1 225748 td td 2 769514 td td 1 138541 td td 10 0 td tr tr th 2013 01 06 th td 5 885887 td td 0 973229 td td 3 602993 td td 1 248308 td td 15 0 td tr tbody table div python df1 apply lambda x x max x min output nb output A 1 854221 B 1 895637 C 2 401903 D 2 226167 F 4 000000 dtype float64 output python string ops vectorized df1 iloc 1 astype str str lower output nb output 2013 01 01 0 8713474062085093 2013 01 02 0 5117196166006319 2013 01 03 0 3435604532681823 2013 01 04 0 17423665911328937 2013 01 05 1 3839171647406576 2013 01 06 0 2525192847352602 Freq D Name B dtype object output Missing values python missing data df1 dropna how any div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th F th tr thead tbody tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td 2 0 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td 3 0 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td 4 0 td tr tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td td 5 0 td tr tbody table div python df1 dropna subset F how all div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th F th tr thead tbody tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td 2 0 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td 3 0 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td 4 0 td tr tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td td 5 0 td tr tbody table div python df1 fillna value 5 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th F th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td td 5 0 td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td 2 0 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td 3 0 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td 4 0 td tr tr th 2013 01 06 th td 0 024899 td td 0 252519 td td 0 833479 td td 0 109767 td td 5 0 td tr tbody table div python pd isnull df1 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th F th tr thead tbody tr th 2013 01 01 th td False td td False td td False td td False td td True td tr tr th 2013 01 02 th td False td td False td td False td td False td td False td tr tr th 2013 01 03 th td False td td False td td False td td False td td False td tr tr th 2013 01 04 th td False td td False td td False td td False td td False td tr tr th 2013 01 05 th td False td td False td td False td td False td td False td tr tr th 2013 01 06 th td False td td False td td False td td False td td False td tr tbody table div Merge and shape python df1 append df2 ignore index True sort True head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th E th th F th th G th th H th th I th th J th tr thead tbody tr th 0 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td td NaN td td NaN td td NaN td td NaN td td NaN td td NaN td tr tr th 1 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td NaN td td 1 td td NaN td td NaN td td NaN td td NaN td tr tr th 2 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td NaN td td 2 td td NaN td td NaN td td NaN td td NaN td tr tr th 3 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td NaN td td 3 td td NaN td td NaN td td NaN td td NaN td tr tr th 4 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td NaN td td 4 td td NaN td td NaN td td NaN td td NaN td tr tbody table div python pieces df1 3 df1 3 7 df1 7 pd concat pieces head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th F th tr thead tbody tr th 2013 01 01 th td 1 360827 td td 0 871347 td td 1 603602 td td 0 073078 td td NaN td tr tr th 2013 01 02 th td 0 210426 td td 0 511720 td td 1 037810 td td 0 746683 td td 1 0 td tr tr th 2013 01 03 th td 1 829322 td td 0 343560 td td 0 005303 td td 1 312605 td td 2 0 td tr tr th 2013 01 04 th td 1 325634 td td 0 174237 td td 0 921101 td td 0 065894 td td 3 0 td tr tr th 2013 01 05 th td 1 184577 td td 1 383917 td td 0 798301 td td 0 913562 td td 4 0 td tr tbody table div GroupBy python df4 groupby A B sum div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th th th C th th D th tr tr th A th th B th th th th th tr thead tbody tr th rowspan 3 valign top bar th th one th td 0 678605 td td 0 569444 td tr tr th three th td 1 008900 td td 1 841500 td tr tr th two th td 0 666534 td td 0 483262 td tr tr th rowspan 3 valign top foo th th one th td 1 002854 td td 3 204916 td tr tr th three th td 1 517630 td td 0 458782 td tr tr th two th td 0 652168 td td 1 610507 td tr tbody table div Stacked python stacked df4 stack stacked index 4 output nb output MultiIndex 0 A 0 B 0 C 0 D output python stacked head output nb output 0 A foo B one C 0 870843 D 1 25516 1 A bar dtype object output python stacked unstack head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th tr thead tbody tr th 0 th td foo td td one td td 0 870843 td td 1 25516 td tr tr th 1 th td bar td td one td td 0 678605 td td 0 569444 td tr tr th 2 th td foo td td two td td 0 27089 td td 0 692131 td tr tr th 3 th td bar td td three td td 1 0089 td td 1 8415 td tr tr th 4 th td foo td td two td td 0 381278 td td 0 918376 td tr tbody table div Pivot table python df4 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th tr thead tbody tr th 0 th td foo td td one td td 0 870843 td td 1 255164 td tr tr th 1 th td bar td td one td td 0 678605 td td 0 569444 td tr tr th 2 th td foo td td two td td 0 270890 td td 0 692131 td tr tr th 3 th td bar td td three td td 1 008900 td td 1 841500 td tr tr th 4 th td foo td td two td td 0 381278 td td 0 918376 td tr tr th 5 th td bar td td two td td 0 666534 td td 0 483262 td tr tr th 6 th td foo td td one td td 0 132010 td td 1 949751 td tr tr th 7 th td foo td td three td td 1 517630 td td 0 458782 td tr tbody table div python pivot tables http pbpython com pandas pivot table explained html df4 A df4 A astype category df4 A cat set categories foo bar inplace True python pd pivot table df4 index A B same as df4 groupby A B mean df4 groupby A B D agg np sum np std div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th th th sum th th std th tr tr th A th th B th th th th th tr thead tbody tr th rowspan 3 valign top foo th th one th td 3 204916 td td 0 491147 td tr tr th three th td 0 458782 td td NaN td tr tr th two th td 1 610507 td td 0 159980 td tr tr th rowspan 3 valign top bar th th one th td 0 569444 td td NaN td tr tr th three th td 1 841500 td td NaN td tr tr th two th td 0 483262 td td NaN td tr tbody table div python pd pivot table df4 index A B values D aggfunc np sum div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th th th D th tr tr th A th th B th th th tr thead tbody tr th rowspan 3 valign top foo th th one th td 3 204916 td tr tr th three th td 0 458782 td tr tr th two th td 1 610507 td tr tr th rowspan 3 valign top bar th th one th td 0 569444 td tr tr th three th td 1 841500 td tr tr th two th td 0 483262 td tr tbody table div python pd pivot table df4 index A columns B values D aggfunc np sum div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead tr th text align left dataframe thead tr last of type th text align right style table border 1 class dataframe thead tr th th th colspan 3 halign left D th tr tr th B th th one th th three th th two th tr tr th A th th th th th th th tr thead tbody tr th foo th td 3 204916 td td 0 458782 td td 1 610507 td tr tr th bar th td 0 569444 td td 1 841500 td td 0 483262 td tr tbody table div python pd pivot table df4 index A columns B values D aggfunc np sum fill value 0 margins True div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead tr th text align left dataframe thead tr last of type th text align right style table border 1 class dataframe thead tr th th th colspan 4 halign left D th tr tr th B th th one th th three th th two th th All th tr tr th A th th th th th th th th th tr thead tbody tr th foo th td 3 204916 td td 0 458782 td td 1 610507 td td 4 356641 td tr tr th bar th td 0 569444 td td 1 841500 td td 0 483262 td td 1 927682 td tr tr th All th td 3 774359 td td 1 382718 td td 1 127246 td td 6 284323 td tr tbody table div python pd pivot table df4 index A B columns C values D div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th C th th 1 008900 th th 0 870843 th th 0 678605 th th 0 666534 th th 0 132010 th th 0 270890 th th 0 381278 th th 1 517630 th tr tr th A th th B th th th th th th th th th th th th th th th th th tr thead tbody tr th rowspan 3 valign top foo th th one th td NaN td td 1 255164 td td NaN td td NaN td td 1 949751 td td NaN td td NaN td td NaN td tr tr th three th td NaN td td NaN td td NaN td td NaN td td NaN td td NaN td td NaN td td 0 458782 td tr tr th two th td NaN td td NaN td td NaN td td NaN td td NaN td td 0 692131 td td 0 918376 td td NaN td tr tr th rowspan 3 valign top bar th th one th td NaN td td NaN td td 0 569444 td td NaN td td NaN td td NaN td td NaN td td NaN td tr tr th three th td 1 8415 td td NaN td td NaN td td NaN td td NaN td td NaN td td NaN td td NaN td tr tr th two th td NaN td td NaN td td NaN td td 0 483262 td td NaN td td NaN td td NaN td td NaN td tr tbody table div python pd pivot table df4 index A columns B C values D div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead tr th text align left dataframe thead tr last of type th text align right style table border 1 class dataframe thead tr th B th th colspan 3 halign left one th th colspan 2 halign left three th th colspan 3 halign left two th tr tr th C th th 0 870843 th th 0 678605 th th 0 132010 th th 1 008900 th th 1 517630 th th 0 666534 th th 0 270890 th th 0 381278 th tr tr th A th th th th th th th th th th th th th th th th th tr thead tbody tr th foo th td 1 255164 td td NaN td td 1 949751 td td NaN td td 0 458782 td td NaN td td 0 692131 td td 0 918376 td tr tr th bar th td NaN td td 0 569444 td td NaN td td 1 8415 td td NaN td td 0 483262 td td NaN td td NaN td tr tbody table div Timeseries python rng pd date range 1 1 2012 periods 100 freq S ts pd Series np random randint 0 500 len rng index rng ts head output nb output 2012 01 01 00 00 00 114 2012 01 01 00 00 01 279 2012 01 01 00 00 02 32 2012 01 01 00 00 03 495 2012 01 01 00 00 04 433 Freq S dtype int64 output python frequency conversion e g converting secondly data into 5 minutely data ts resample 5Min sum output nb output 2012 01 01 24652 Freq 5T dtype int64 output python time zones ts utc ts tz localize UTC ts utc tz convert US Eastern head output nb output 2011 12 31 19 00 00 05 00 114 2011 12 31 19 00 01 05 00 279 2011 12 31 19 00 02 05 00 32 2011 12 31 19 00 03 05 00 495 2011 12 31 19 00 04 05 00 433 Freq S dtype int64 output python format rng pd date range 1 1 2012 periods 5 freq M ts pd Series np random randn len rng index rng ps ts to period ps to timestamp output nb output 2012 01 01 2 490119 2012 02 01 0 237758 2012 03 01 0 249177 2012 04 01 0 015938 2012 05 01 0 314638 Freq MS dtype float64 output python timestamp conversion prng pd period range 1990Q1 2000Q4 freq Q NOV ts pd Series np random randn len prng prng ts index prng asfreq M e 1 asfreq H s 9 ts head output nb output 1990 03 01 09 00 0 546684 1990 06 01 09 00 0 091767 1990 09 01 09 00 1 180808 1990 12 01 09 00 0 929530 1991 03 01 09 00 1 646660 Freq H dtype float64 output Categorical data python df5 df4 copy deep True python create categories df5 incomeranges pd cut df5 C 14 df5 A df5 A astype category df5 head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th incomeranges th tr thead tbody tr th 0 th td foo td td one td td 0 870843 td td 1 255164 td td 1 011 0 828 td tr tr th 1 th td bar td td one td td 0 678605 td td 0 569444 td td 0 828 0 648 td tr tr th 2 th td foo td td two td td 0 270890 td td 0 692131 td td 0 254 0 435 td tr tr th 3 th td bar td td three td td 1 008900 td td 1 841500 td td 1 011 0 828 td tr tr th 4 th td foo td td two td td 0 381278 td td 0 918376 td td 0 254 0 435 td tr tbody table div python df5 A output nb output 0 foo 1 bar 2 foo 3 bar 4 foo 5 bar 6 foo 7 foo Name A dtype category Categories 2 object foo bar output python rename to more meaningful df5 A cat categories foo bar df5 head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th incomeranges th tr thead tbody tr th 0 th td foo td td one td td 0 870843 td td 1 255164 td td 1 011 0 828 td tr tr th 1 th td bar td td one td td 0 678605 td td 0 569444 td td 0 828 0 648 td tr tr th 2 th td foo td td two td td 0 270890 td td 0 692131 td td 0 254 0 435 td tr tr th 3 th td bar td td three td td 1 008900 td td 1 841500 td td 1 011 0 828 td tr tr th 4 th td foo td td two td td 0 381278 td td 0 918376 td td 0 254 0 435 td tr tbody table div python domain of categories df5 A df5 A cat set categories very bad bar medium foo very good df5 sort values by A head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th incomeranges th tr thead tbody tr th 1 th td bar td td one td td 0 678605 td td 0 569444 td td 0 828 0 648 td tr tr th 3 th td bar td td three td td 1 008900 td td 1 841500 td td 1 011 0 828 td tr tr th 5 th td bar td td two td td 0 666534 td td 0 483262 td td 0 828 0 648 td tr tr th 0 th td foo td td one td td 0 870843 td td 1 255164 td td 1 011 0 828 td tr tr th 2 th td foo td td two td td 0 270890 td td 0 692131 td td 0 254 0 435 td tr tbody table div python df5 A value counts output nb output foo 5 bar 3 very good 0 medium 0 very bad 0 Name A dtype int64 output python subset on category tmp df5 df5 A foo tmp div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th A th th B th th C th th D th th incomeranges th tr thead tbody tr th 0 th td foo td td one td td 0 870843 td td 1 255164 td td 1 011 0 828 td tr tr th 2 th td foo td td two td td 0 270890 td td 0 692131 td td 0 254 0 435 td tr tr th 4 th td foo td td two td td 0 381278 td td 0 918376 td td 0 254 0 435 td tr tr th 6 th td foo td td one td td 0 132010 td td 1 949751 td td 0 287 0 107 td tr tr th 7 th td foo td td three td td 1 517630 td td 0 458782 td td 1 337 1 518 td tr tbody table div python TODO subset with limited column df5 A B C D 10 python TODO Plotting options Make the graphs a bit prettier and bigger pd set option display mpl style default Always display all the columns pd set option display line width 5000 pd set option display max columns 60 figsize 15 5 Series calculations python df2 div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th E th th F th th G th th H th th I th th J th tr thead tbody tr th 0 th td 1 0 td td 2013 01 02 td td 1 0 td td 3 td td test td td foo td tr tr th 1 th td 1 0 td td 2013 01 02 td td 1 0 td td 3 td td train td td foo td tr tr th 2 th td 1 0 td td 2013 01 02 td td 1 0 td td 3 td td test td td foo td tr tr th 3 th td 1 0 td td 2013 01 02 td td 1 0 td td 3 td td train td td foo td tr tbody table div python df2 H values output nb output array 3 3 3 3 dtype int32 output python df2 H abs tolist output nb output 3 3 3 3 output python df2 H mean tolist output nb output 3 0 output Numpy Pandas uses Numpy s ndarray for many of its underlying operations For example you can use the DataFrame attribute values to represent a DataFrame df as a NumPy array You can also pass pandas data structures to NumPy methods Now that we ve looked into Pandas columns Series lets take at what is driving these operations This low level perspective will help us understand strengths and weeknesses as well as give us a much better look into how to improve our code References doc numpy https docs scipy org doc numpy reference generated numpy ndarray html doc ndarray https docs scipy org doc numpy reference arrays ndarray html Introduction NumPy s arrays are more compact than Python lists a list of lists as you describe in Python would take at least 20 MB or so while a NumPy 3D array with single precision floats in the cells would fit in 4 MB Access in reading and writing items is also faster with NumPy The difference is mostly due to indirectness a Python list is an array of pointers to Python objects at least 4 bytes per pointer plus 16 bytes for even the smallest Python object 4 for type pointer 4 for reference count 4 for value and the memory allocators rounds up to 16 A NumPy array is an array of uniform values single precision numbers takes 4 bytes each double precision ones 8 bytes Less flexible but you pay substantially for the flexibility of standard Python lists Because Numpy s popularity is based on optimization lets focus work on memory and speed during our discussion Memory layout The following attributes contain information about the memory layout of the array ndarray flags Information about the memory layout of the array ndarray shape Tuple of array dimensions ndarray ndim Number of array dimensions ndarray strides Tuple of bytes to step in each dimension when traversing an array ndarray data Python buffer object pointing to the start of the array s data ndarray size Number of elements in the array ndarray itemsize Length of one array element in bytes ndarray Dtype Type of elements in the array i e int64 character ndarray nbytes Total bytes consumed by the elements of the array ndarray base Base object if memory is from some other object ndarray sizeof is somewhat bigger includes the object overhead than ndarray nbytes which is the number of bytes in the allocated array python import sys python arr np random randn 10 3 lst list arr arr2d arr reshape 20 50 python print len lst print arr shape print arr2d shape output nb output 1000 1000 20 50 output python print type lst print type arr print type arr2d print type lst 0 print arr dtype output nb output class list class numpy ndarray class numpy ndarray class numpy float64 float64 output python item print sys getsizeof lst 0 print arr itemsize total print sys getsizeof lst print sys getsizeof arr print sys getsizeof arr2d print arr nbytes print arr2d nbytes output nb output 32 8 9112 8096 112 8000 8000 output python print arr tobytes 100 output nb output b 1 xcdk xf0 x8b x0f x93 x19 xf0 xe7 v xec3 xcb e xbf x89 x92 x0b xac xc4 xb7 x1d xdb xdaG xe2 x16 xf8n x99 xcd xd7 xbfc xf3 xf9g x87 xb5 x03 xc0 x04 x86 xc7 x08 xf4 xb8j xd6 x03 xed xef xbf xe6 xcf xb0 x0e x90 xe1 xd8 xbf xa2 x1dn xe1 xef xe1 xbfF x90 xfd xf2 x14 xde xbf xb8pv output Comparison of ndarry to list Numpy array is easier to assign values than a list python a np array 1 2 5 7 8 a 1 3 1 a output nb output array 1 1 1 7 8 output python b 1 2 5 7 8 try b 1 3 1 except print TypeError can only assign an iterable output nb output TypeError can only assign an iterable output ndarray slices are actually views on the same data buffer If you modify it it is going to modify the original ndarray as well python a 1 2 5 7 8 b a 1 5 b 1 3 print a print b output nb output 1 2 5 7 8 2 3 7 8 output python a np array 1 2 5 7 8 a slice a 1 5 a slice 1 1000 print a print a slice output nb output 1 2 1000 7 8 2 1000 7 8 output python a np array 1 2 5 7 8 a slice a 1 5 copy a slice 1 1000 print a print a slice output nb output 1 2 5 7 8 2 1000 7 8 output ndarray slicing is different It uses arr row start row end col start col end ndarray also allows boolean indexing python a np array 0 1 2 5 7 8 reshape 3 2 a output nb output array 0 1 2 5 7 8 output python rows on np array True False True a rows on output nb output array 0 1 7 8 output python arr 2 10 output nb output array True True True True True True True True True True output python arr arr 2 10 output nb output array 1 02256375 0 74806647 0 12264239 0 09130506 0 57127102 0 37192379 2 46363717 1 26026228 0 99774028 0 38876726 output A comparison test of speed python from numpy import arange from timeit import Timer Nelements 10000 Ntimeits 10000 x arange Nelements y range Nelements t numpy Timer x sum from main import x t list Timer sum y from main import y print numpy 3e t numpy timeit Ntimeits Ntimeits print list 3e t list timeit Ntimeits Ntimeits output nb output numpy 1 171e 05 list 1 768e 04 output Creating matrices Your typical arrays of random initializers are always useful python print np random randint 1 10 5 print np arange 1 10 output nb output 8 8 7 4 3 1 2 3 4 5 6 7 8 9 output A matrix of random numbers python print np random rand 3 3 output nb output 0 24273703 0 4428199 0 51066964 0 66546027 0 83538717 0 92546135 0 63670416 0 83450213 0 57655533 output A matrix of zeros python np zeros 4 3 output nb output array 0 0 0 0 0 0 0 0 0 0 0 0 output The identity matrix python np eye 4 output nb output array 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 output Scalar operations python arr np arange 1 10 np append arr 12 output nb output array 1 2 3 4 5 6 7 8 9 12 output python print arr size print arr mean output nb output 9 5 0 output python print arr min print arr max output nb output 1 9 output python print type arr tolist output nb output class list output python print arr astype str print arr astype int output nb output 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 output Matrix operations python arr np arange 1 10 np append arr 12 output nb output array 1 2 3 4 5 6 7 8 9 12 output python print arr arr print arr arr output nb output 2 4 6 8 10 12 14 16 18 0 0 0 0 0 0 0 0 0 output python A n 1 A n np diff arr n 1 output nb output array 1 1 1 1 1 1 1 1 output Broadcasting provides a means of vectorizing array operations so that looping occurs in an implementation of C instead of in Python The term refers how numpy treats arrays with different shapes during arithmetic operations The smaller array is repeated so that it matches the size of the larger array doc broadcasting https docs scipy org doc numpy 1 10 0 user basics broadcasting html python arr 2 output nb output array 2 4 6 8 10 12 14 16 18 output python arr 4 output nb output array 5 6 7 8 9 10 11 12 13 output python timeit arr 2 output nb output 1 36 s 22 ns per loop mean std dev of 7 runs 1000000 loops each output python twos np ones 9 2 python timeit arr twos output nb output 1 45 s 153 ns per loop mean std dev of 7 runs 1000000 loops each output python M np arange 1 10 reshape 3 3 M output nb output array 1 2 3 4 5 6 7 8 9 output python M T output nb output array 1 4 7 2 5 8 3 6 9 output python M diagonal output nb output array 1 5 9 output python np dot M M output nb output array 30 36 42 66 81 96 102 126 150 output python np sum M output nb output 45 output python np sum M axis 1 sum along rows use axis 0 for columns output nb output array 6 15 24 output External Interfaces Using CUDA with Numba doc nividia https devblogs nvidia com numba python cuda acceleration ref nyu intro to numba https nyu cds github io python numba 05 cuda ref code maven https code maven com showing speed improvement with gpu cuda numpy Basic C ref using C with pandas https blog esciencecenter nl irregular data in pandas using c 88ce311cb9ef Working with Eigen ref eigen3topython https github com jrl umi3218 Eigen3ToPython Conclusion Pandas provides fast and thorough means of manipulating data in Python It is powered by the operations in Numpy While Pandas is useful for preparing data actual analysis and computations are typically performed on the Numpy set This is part of the reason Numpy is adopted by so many important libraries such as SciKitLearn PyTorch and many others",
        "tags": [
            "numpy",
            "pandas",
            "python"
        ]
    },
    {
        "uri": "/posts/blog_econ-return_rate",
        "title": "The Cost of Internal Investment",
        "content": "\nThere is one question on every economist s mind Where has inflation gone It is imperative to understanding how actors make decisions and allocate limited resources The fact that the inflation rate is so low for so long is incredibly disconcerting for many reasons with the fear of deflation being just one reason Because of low growth and a lack of inflation the US government and Federal Reserve as well as nearly every nations central Bank are pouring fuel onto the economy and getting a paltry return Their actions include the usual suspects corporate federal taxes are lowered to competitive rates massive quantitative easing by the Fed interest rates continued lowest of any business cycle and crying for lower Despite all of this GDP growth is still just below 3 However the singular understandable financial peculiarity to note is incredible stock buybacks by nearly every corporation using the lowered tax rates that was supposed to be used for investment in capital and dare say it wage growth From a personal perspective individual sales can be quite difficult to make even for strong products For an individual consultant such as myself it usually takes 5 to 7 interactions to make a sale At each interaction I have to tell the client something remarkable about technology that can add value to their business overnight After the 7th I have to stop interaction with the client and let it known they will not get more until a contract is signed But even firms with strong products such as financial oversight technology firm Digital Reasoning http digitalreasoning com can still face headwinds for making sales Proof of concepts are needed and different corporations have various scorecards for determining a win This is for a market leader that has a near monopoly within financial services From the customers perspective the customer being large retail establishments why would businesses invest in new capital or increase worker salaries or do anything Put aside on the complications and mis alignments associated with executive compensation The return on the market can be as high as 20 That means as a business owner you have to grow your business greater than 20 in order to out perform stocks When is the last time you re business has done that What new investment or genius partner can turn an established business into a growth firm That is what every business is asking The stock market growth firms is too hot and has been that way for too long Dividends are at an all time low It ruined nearly all pension funds because fixed income a required fraction of their portfolio provided little to no return Investing in people considering a service based economy is both risky and expensive employment taxes are double those of the amount paid on stock So why is anyone starting a business investing in their business or even hiring full time to maintain their current business They could be investing in one of the small groups of super star FANG monopolies which will inevitably acquire any small business that might be of interest",
        "tags": [
            "sales",
            "fed"
        ]
    },
    {
        "uri": "/posts/blog_history-greatman_insecurity",
        "title": "The Insecurities of the 'Great Men'",
        "content": "\nWhile it may be tough to find the true nature of people past their outward appearance it can provide insight into all people and to yourself The Great Man theory that leaders are born and not made came about in the 19th century when British aristocrats attained powerful positions through nepotism It was primarily concerned with explaining leaders such Walpole Wellington and Caesar Much of what is learned in history is their propoganda getting the reality is much more difficult A recent British Broadcasting Corporation study focused on getting personal aspects of such great men by using death masks skulls sculptures and portraits to reconstruct how they actually looked not how they wanted you to see them The study combined strong evidence with 3D imaging to provide interesting conclusions The difference betwen the propoganda and the reality gives insight to the persons insecurities Julius Ceasar is a terrific example Gaining access to multiple death masks as well as sculptures was challenging They end result showed that mass produced sculptures had high cheek bones and are more balanced nose than the death masks Also lacking in the propoganda sculptures was his baldness Cicero on seeing Ceasar delicately place a strand of across his scalp commented that the Republic was overthrown by a main so vain that he had to topple a country in order to conceal his head with laurel leaves George Washington was well known for his honesty and lack of humour Historians postulated his unhappy demeanor may have been from painful problems associated with teeth ravaged by cavities By comparing his death mask with sculptures and paintings it can be confirmed that his teeth and fake dentures had a large impact on his appearance By virtually placing his fake teeth in the 3D rendered skull it causes his jaw to move forward and become more prominent In fact paintings of Washington show a more defined jaw and square appearing face In addition historians found letters where Washington wrote how he felt a good leader should have a strong well defined jaw These are just a few examples of looking at the man behind the myth Despite being at the center of some epic moments in history there were many other people who supported the great man getting there You may not have a chance to become the emperor of vast lands but you can take pride in maintaining clean teeth and displaying your head no matter how it looks",
        "tags": [
            "tag1",
            "tag2"
        ]
    },
    {
        "uri": "/posts/blog_math-competitive_edge",
        "title": "A Letter to Students: Math is the Basis for Competitive Edge in Every Field",
        "content": "\nMath is the greatest tool humans have for solving problems However it is incredibly expensive to get the experience of using it in the real world This is magnified by most teachers and many university professors not having any experience applying math anyplace other than academic contexts This post shows the author s trying experiences with learning maths in school as well as the excitement of applying them to solve actual industry problems Introduction Throughout my youth and young adult life I had an antagonistic relationship with math I was interested in it especially the geometric graphical and other visualizeable aspects But I never truely felt that it was practical The problems in exercises often seemed contrived soley to teach some material Teachers rarely had experience with real world problems their focus was employing teaching practices not mathematical practices In fact I saw that most real world problem solving typically in business are initially estimated then refined based on the results How many supplies should you order Make some assumptions and try a conservative amount This is done without much thought of the scientific engeineering process or abstracting problems to their fundamentals The 80 answer is fine get on with more the real work I also had real antipathy for much of the reptitive exercises that seemed to form math teaching If you performed it once and the mechanics are easily referenced then where is the value in performing a hundred times Surely more conceptually difficult and interesting problems can be investigated instead Forming the Problem is the Problem Much of the work I performed in my formative years was managerial and the extent of simple mathematical concepts used was either credits and debits of accounting or the cyclical financial metrics I felt it was rare to come across a novel problem Any problem that wasn t novel could be easily referenced So the more mundane and rote aspects of math I never felt compelled to invest time This all changed when I saw a novel solution to a problem that I didn t know existed As a reconnaissance platoon leader I had to lay out the emplacement positions for a battery missile intercept system This included the radar command vehicle generator and launchers Laying out the posts where the vehicles would emplace was the major bottleneck of the deployment The bottleneck of laying out posts was determining the distances distances among equipement because the most accurate approach was for a soldier to run toward a direction using one of several measured tapes Thousands of soldiers had performed this tasks for decades You simply had to drill yourself and comrades to perform faster than other teams Or was that the answer The problem was that I wanted to do it faster than everyone else thereby winning award promotion etc And therein lies the rub you don t need math if you re simply doing the same thing as was always done before But if you want to do things better if you want to innovate or tackle problems not seen before then you have to be independent You must rely on your mathematical foundations because they are the only skills available for abstracting a problem In this situation the bottleneck was quite obvious But in many circumstances careful investigation must be performed to find root cause In addition there can be many alternative perspectives to view the problem Despite the endemic use of case studies by educational institutions it is difficult to get experience in forming problems and applying various problem solving approaches The end state demands that you strip away the extraneous details and enumerate the fundamental variables useful for modeling the problem The Practical Value of Math Continuing with the previous scenario I remembered the simple rule of angle side angle for congruent triangles Using an M2 Aiming Circle for survey equipment and accounting for the two angles by using the surveyor I only needed the height of the soldier to determine congruency when the soldier had achieved the appropriate distance Rather than spending time unspooling tangled measure tapes the soldier simply ran until I told him to stop The improvement cut time for the entire process by about 60 my team took first place for the exercise out of six teams Most importantly I found the magic that comes with seeing things from a different perspective and boldly trying something new in otherwise mundane problems In this situation it was simple to discover the problem and the geometric solution was available even to elementary students But it is rare to see this process occur in the real world This may be from a lack of intellectul curiosity within individuals Many times organizations have a culture that is hostile to critical thinking Rather they prefer leaders who are men of action and use gut instincts not the thoughtful analysis of an introvert Such institutions are dying quickly Since the 1960s several popular movements occured within industry such as six sigma and the data driven firm With the advent of the Information Revolution barely an industry exists where mathematical concepts do not fundamentally determine how business performs its basic functions This can be seen from the survival curves of insurance default risk in banking optimization in logistics and risk return in finance The Data Multiplier Basic mathematical rules are incredibly useful and they are necessary for ensuring higher level reasoning is performed correctly But a primary component in most discovery or empirical learning situations is data While collecting data was historically important in the progression of math it is the fields of probability and statistics that make data the central focus rather than just part of the solution Probabilty is used when the model is known but the data is not available while in statistics the practicioner has data but desires a useful model These two were quickly combined and became necessary for the advancement of all other sciences in general and were hotly debated from philosophical perspectives such as the idea of hypothesis testing Computers made difficult computation possible first The linear algebra necessary for regression could take Karl Pearson s large warehouses of female employees called computers weeks to complete Thirty years ago these tasks became trivial with the introduction of the personal computer Now with distributed computing large swaths of data can be both collected and computed to allow investigators to search for patterns that previously had rarely been mentioned by researchers The Importance of Analysis Alot of people are interested in math but are discouraged by ideas that seem theoretical or that may be derived through analysis These seem impractical and unuseful for the more general problems that they see everyday To the contrary careful analysis provides some of the most valuable insights to practical problems because of their simplicity and wide ranging importance Take for instance the huge impact Big Data has had on the world The reasoning behind the Hadoop distributed ecosystem was simple if we cannot bring the data to the computations then take the computations to the data But this simple idea could not be accomplished without proper understanding of math at an analytical level Distributed systems make use of the three basic axioms i additive ii multiplicative iii distributive properties of real numbers in order to move map reduce computations to disparate servers then bring them back to the user for the final solution In fact computer scientists took such ideas to their extreme By using propositional logic the basis of mathematics researchers created new systems of programming such as proof logic and lambda calculus These fields directly impact programmers in how they perform their craft and indirectly effect all users of computational systems Resources Do Not Determine Progress With such tremendous advancements in data and machine learning many people may again feel discouraged that maths are impractical Artificial intelligence will solve problems faster than they can be introduced Google Amazon and their ilk have such vast resources that rarely will problems persist long enough for them to become apparent to the individual much less to contribute to a solution This is absolutely not the case As an example I have a friend who worked on Apple car and has continued research in machine vision for different industries He had the opportunity to ride in a Tesla prototype car where the display console showed exactly what the car saw while driving This consisted of a video with outlines defining object silouttes and classification predictions for those objects But what happened when the car drove up the hill to see a giant sky on the road s hoizon The same thing that an amateur s machine learning model would see when it encountered data for the first time total nonsense Despite billions being invested in the field s best and brightest the result was little better than that of a novice There are many problems that remain both untackled and unsolved Conclusion Just a few decades ago it was unncessary to think critically about many problems But with the explosion in data availability most organizations are forced to constantly become more data driven in order to squeeze every penny from margins This can be difficult to see when educational institutions are far removed from industry Young students do not have experience with real world problems Much worse most teachers do not have such experience either This chasim probably existed throughout history But in order for youth to have more buy in to education the disparity between those who do and those of teach must be bridged",
        "tags": [
            "tag1",
            "tag2",
            "tag3"
        ]
    },
    {
        "uri": "/posts/blog_math-reuse_tng_sample",
        "title": "Incorporating an Initial Training Sample into a Project",
        "content": "\nDuring a data science project data is often provided in an incremental manner Some customer files are easier to obtain than others such as when lengthy unarchiving processes are warranted To ensure no time is wasted available data can be put to use with initial analyses and model training as a Training Sample The same data is incorporated with Training data when it is formally split into Training and Holdout sets Care must be taken to ensure there is not a systematic difference between the Training Sample and the greater Training Data While this arrangement is not ideal it breaks the principal of data randomization it is sometimes necessary in order to maintain a schedule This post simulates various different scenarios for this process and discusses the outcomes This will review the fundamental concepts and then demonstrate the general case using the R statistical language We will use a uniform distribution sampling with a percentile cut off to simulate a bernoulli random variable The sums of these variables creates a binomial distribution Fundamentals of Randomness The initial code that is sampling from a uniform distribution is easily implementable in most languages so we will proceed with it R options repr plot width 4 repr plot height 3 R bernoulli by sampling from uniform rbern function n p result vector for i in 1 n if runif 1 0 1 p result i 1 else result i 0 n n 1 return result rand rbern 10 5 print t rand output nb output 1 2 3 4 5 6 7 8 9 10 1 0 0 0 0 1 0 0 0 0 1 output R bernoulli distribution using binom bern rbinom 10 1 5 t bern table tbody tr td 0 td td 1 td td 1 td td 0 td td 1 td td 1 td td 1 td td 0 td td 1 td td 0 td tr tbody table R binomial distribution rand rbinom 1 100 5 rand 51 Simulation of Process This is a simulation of the Training Holdout set data splitting process We say there are 100 records total and 5 of them are provided to us and used in an initial analysis We assume a typical 80 20 Training Holdout split R SAMPLE TNG 5 TOTAL RECORDS 100 PCT ORIG 0 8 This will give us an expected 80 Training set records by using the expected value of the binomial pmf begin align k binom n k frac kn k n k frac n k 1 n k frac n n 1 k 1 n k n binom n 1 k 1 end align begin align sum n k 0 k binom nkp k 1 p n k sum k 0 nn binom n 1 k 1 p k 1 p n k n sum k 0 n binom n 1 k 1 p k 1 p n k n sum k 0 n 1 binom n 1 kp k 1 1 p n k 1 np sum k 0 n 1 binom n 1 kp k 1 p n k 1 np Big p 1 p Big n 1 text using the binomial theorem np end align R SPLIT TNG 80 We modify the simulation percentage so that it is corrected for the reduced number of training records begin align TotalRecords TrainingSample TrainingData Binomial 100 p TrainingData Training Sample np TrainingData Training Sample p TrainingData Training Sample n end align R PCT MOD SPLIT TNG SAMPLE TNG TOTAL RECORDS PCT MOD 0 75 We will run the simulation 1 000 times to receive a nice distribution of results R SAMPLE TNG 5 TOTAL RECORDS 100 PCT ORIG 0 8 SPLIT TNG 80 PCT MOD SPLIT TNG SAMPLE TNG TOTAL RECORDS sim function x rand rbern x PCT MOD tng sum rand SAMPLE TNG return tng samples replicate 1000 sim 100 hist samples png output 15 0 png Realistic Example Let us add some more reasonable values for clarity R SAMPLE TNG 143994 TOTAL RECORDS 385 1000 490 PCT ORIG 0 8 SPLIT TNG TOTAL RECORDS PCT ORIG PCT MOD SPLIT TNG SAMPLE TNG TOTAL RECORDS sim function x rand rbern x PCT MOD tng sum rand SAMPLE TNG return tng samples replicate 1000 sim 100 print PCT MOD 100 hist samples output nb output 1 42 6465 output png output 17 1 png Possible Errors In the real world the problem was that the record Ids Stream ID and File Generation Date were not unique so there was a bad count of sample size This didn t adversely effect the splitting because the records were not sent to the Holdout set and the quantity of miss matched records was negligible However it did cause error in the calculation of dataset sizes If the quantity was greater then this could cause confusion as well as inefficiently allocating the split datasets A small simulation of the error can provide insight to the incorrect results R sim function x SAMPLE TNG rand rbern x PCT MOD tng sum rand SAMPLE TNG return tng ITER 100 SAMPLE TNG SEQ seq 5 15 length out ITER result vector i 1 for sample size in SAMPLE TNG SEQ SAMPLE TNG sample size TOTAL RECORDS 100 PCT ORIG 0 8 SPLIT TNG 80 PCT MOD SPLIT TNG SAMPLE TNG TOTAL RECORDS tmp replicate 100 sim 100 SAMPLE TNG result i median tmp i i 1 R plot result SAMPLE TNG SEQ png output 21 0 png Conclusion Seemingly small problems can occur that may have large effects on a project schedule Working around those problems is imperative Some off the cuff calculations and a little stochastic simulation script such as what you see here may be just enough to keep a small problem from becoming a game changer",
        "tags": [
            "machinelearning",
            "tag1",
            "tag2"
        ]
    },
    {
        "uri": "/posts/blog_models-machine_learning",
        "title": "Generalizing the Machine Learning Process",
        "content": "\nThis work describes a general approach to follow when performing machine learning ML manually and when automating in a deployment setting Unlike a classical statistical analysis standard machine learning projects typically follow a general and repeatable process While the practictioner should be aware of details for each of the steps and the reasons for choosing them there is much less design thinking and checking of assumptions that are necessary components of more mathematical modeling fields This makes the machine learning process amenable to deployment as a service because automating the re training and prediction of a model with consistent data is straight forward programming Model Theory Most of the design thinking in the ML process is in choosing a variety of models for comparing performance against The following three characteristics succinctly describe a ML model See here ref posts blog page todo md for more explanation 1 Representation structural model characteristics name family interpretability type generative discriminative bias var fixed variable learner 2 Evaluation functions applied to the structure objective cost loss 3 Optimization algorithms necessary to solve for parameters It is also important to understand how the chosen model effects the modeling process assumptions inherent in representation alignment of loss function with project goals sources of bias variance determination of resource constraints enumeration of how over tuning can occur regularization understanding when manual methods are ineffective fiddling of model implementation parameters statement of strong false assumptions can be better than weak true ones because they need more data Note This should be considered carefully with feature engineering and feature selection to ensure the input transformations align with the model The Machine Learning Process The following are the general steps taken in the ML Process They are similar to many other problem solving processes but tailored to ML specifics There are a few steps where care should be taken to ensure the process is reasonable These are more design oriented and some research may be necessary depending on the scenario The practicioner must ensure he is maintaining honesty with the investigation One important check is laying out proper evaluation methods before implementing them This is similar to classical statistics in choosing an accepatable p value before running the model They include selecting evaluation scores and how they should be evaluated Another check is on model resource and time requirements More sophisticated models need more memory to implement and take a longer time to run These are highly dependent on the environment they are deployed to These should be determined with the customer at the beginning To learn more read here ref posts blog page todo md for more The categories to be predicted on and the percent of records used for each in training is a very important subject If your target data is of a much lower percentage amount than the rest needle in haystack imbalanced data problem then it should be addressed before separating training and testing data The most orthodox and direct way to deal with this problem is to simply resample from the target records with replacement for enough times to reach 50 of your data However this is an important area of research and some time should be taken before moving forward in the process For more information on imbalanced data check here ref posts blog page todo md While classical statistics places a strong emphasis on model exploration and ensuring assumptions are met this is less important in ML Instead much more time should be focused on the features used in the model This is mainly in the form of Feature Engineering which can include several different methodologies such as Feature Extraction Feature Selection Dimensionality Reduction and Feature Engineering Read more about this here ref posts blog page todo md Discover determine problem and constraints determine characteristics the problem scenario dictates on the solution model family acceptable methods of dimensionality reduction and regularization deployment environment decide evaluation primary secondary evaluation score ie accuracy methods of evaluation ie confusion matrix roc Collect and Transform obtain raw data internal data warehouses external APIs and services integration and cleaning filter aggregate and query Summary and Process exploration preparation address balance classification anova etc create Train Validate Test with split above configure Feature Extraction with feature union configure Preprocess and choose model families with pipeline Build train the models apply k folds CV and grid search with Training set perform on multiple model families and hyper parameters evaluate models review afore mentioned confusion matrix scoring classifier threshold and tests select the best model family hyper parameters apply to Validation set or all of Training set to model family to parameterize it and set as the final model refine performance debug performance with learning curve lift chart use Testing set to evaluate final model characteristics export to binary file Deliver select solution design interface most appropriate for using the model automate data integration and pipelines implement model in deployable environment deploy solution within system environments Note Train Validate and Test should be from different independent data sets if possible Stakeholder Interaction and Timeline It is useful to display these in relation to interactions that must take place with stakeholders These may be business users who need a problem solved or technology departments that will have to support applications that implement the solution The y axis show stage proximity to these stakeholders While every project is different most stages use a similar proportion of time The horizontal axis lays out the timeline machine learning process ml process png Demonstation The following code demonstrates the programming portions of these stages and steps using a toy example on a simulated diverse dataset of both numeric and categorical data It separates the columns and uses transform pipelines to perform different dimensionality reduction techniques 1 This does display the important steps that must be taken with stakeholders Configuration Notebook configurations for the kernel and display output python import warnings warnings filterwarnings ignore pd set option display max rows 10 matplotlib inline Provide for utility functions python import random import string def randomString stringLength 10 Generate a random string of fixed length letters string ascii lowercase return join random choice letters for i in range stringLength While importing modules try to organize them in the order they are used and by their parent library python modules import pandas as pd import numpy as np from sklearn preprocessing import LabelEncoder from sklearn preprocessing import OneHotEncoder from sklearn impute import SimpleImputer from sklearn preprocessing import StandardScaler from sklearn compose import ColumnTransformer from sklearn pipeline import Pipeline from sklearn pipeline import FeatureUnion from sklearn feature selection import SelectKBest from sklearn decomposition import PCA from sklearn linear model import LogisticRegression from sklearn model selection import train test split from sklearn model selection import KFold from sklearn model selection import cross val score from sklearn model selection import GridSearchCV from sklearn model selection import learning curve Collect and transform Bring internal and external data together for a combined and succinct dataset Here we are simulating both categorical and numeric data for the same dataset python make data both numeric and categorical iCOLUMNS 50 iROWS 1000 generate classification dataset from sklearn datasets samples generator import make blobs X cat Y cat make blobs n samples iROWS centers 2 n features iCOLUMNS random state 1 categories randomString 5 for x in range 5 cols random choices categories k iCOLUMNS for in range iROWS X cat np array cols generate regression dataset from sklearn datasets samples generator import make regression X num not used make regression n samples iROWS n features iCOLUMNS noise 0 1 random state 1 Your processing is simplified when most of your work is within a dataframe python set in dataframe dfX cat pd DataFrame X cat columns IndepCat str x for x in range iCOLUMNS dfX num pd DataFrame X num columns IndepNum str x for x in range iCOLUMNS dfY cat pd DataFrame Y cat columns Dep dfData pd concat dfY cat dfX cat dfX num axis 1 Summary and process Encode your data with transformations in an appropriate order Remember that some transformations such as scaling should be performed after separation of testing and training datasets because you will be dividing all records by the maximum value within the dataset In model implementation you would not see the maximum value of your original testing dataset rather you would use the current dataset python separate X dfData drop Dep axis 1 y dfData Dep encode y and create datasets enc LabelEncoder y set enc fit transform y X train X test y train y test train test split X y set test size 0 2 print Training records s X train shape 0 print Testing records s X test shape 0 output nb output Training records 800 Testing records 200 output Here you perform scaling imputation Principal Component Analysis PCA and other transformations whose arguments are dependent upon the same dataset Also the transformation pipelines should be divided into numeric and categoric because some transformations such as PCA are inappropriate for categoric data Instead use methods such as Select K Best for dimensionality reduction Working with pipelines can be unwieldly at some times For a reference of pipelines see sklearn docs https scikit learn org stable modules compose html pipelines and composite estimators python create feature union of numeric data features features append pca PCA GRID features append select best SelectKBest GRID num feature eng FeatureUnion features create the preprocessing pipelines for both numeric and categorical data numeric features x for x in X train columns if x split 0 IndepNum numeric transformer Pipeline steps imputer SimpleImputer strategy median scaler StandardScaler num feature eng num feature eng categorical features x for x in X train columns if x split 0 IndepCat categorical transformer Pipeline steps imputer SimpleImputer strategy constant fill value missing onehot OneHotEncoder handle unknown ignore select best SelectKBest k 6 preprocessor ColumnTransformer transformers num numeric transformer numeric features cat categorical transformer categorical features append classifier to preprocessing pipeline full prediction pipeline clf Pipeline steps preprocessor preprocessor classifier LogisticRegression solver lbfgs Optimize your hyper parameters in a grid search You may have to get output for all the pipeline keys to find their names because the notation can become quite lenthy based on the amount of nesting such as this pipeline displays python param grid preprocessor num imputer strategy mean median classifier C 0 1 1 0 10 100 preprocessor num num feature eng pca n components 75 80 85 90 95 preprocessor num num feature eng select best k 5 7 9 11 gridClf GridSearchCV clf param grid cv 5 Build Build your model through optimizing values over the grid This is usually based on stochastic gradient descent or some other iterative routine Convergence may be time consuming depending on the model you ve chosen and the number of parameters and hyper parameters that must be selected NaiveBayes methods can be some of the most costly Run more balanced models first to get an idea of the parameter space before trying more costly approaches python gridClf fit X train y train output nb output GridSearchCV cv 5 error score raise deprecating estimator Pipeline memory None steps preprocessor ColumnTransformer n jobs None remainder drop sparse threshold 0 3 transformer weights None transformers num Pipeline memory None steps imputer SimpleImputer copy True fill value None missing values nan strategy median verbo enalty l2 random state None solver lbfgs tol 0 0001 verbose 0 warm start False fit params None iid warn n jobs None param grid preprocessor num imputer strategy mean median classifier C 0 1 1 0 10 100 preprocessor num num feature eng pca n components 0 75 0 8 0 85 0 9 0 95 preprocessor num num feature eng select best k 5 7 9 11 pre dispatch 2 n jobs refit True return train score warn scoring None verbose 0 output Take the best model with parameters hyper parameters from highest grid search cross validation and apply it to the test data This data is simulated and you should be able to perform better than a coin flip 50 python print best logistic regression from grid search 3f gridClf score X test y test output nb output best logistic regression from grid search 0 515 output Get an idea of the results and parameter space Extreme values may indicate over fitting or some other anomaly is occuring python Cross Validation GridSearchCV Mean cross validated score of the best estimator SGDClassifier Returns the mean accuracy on the given test data and labels print Best Score CV score 0 3f gridClf best score print n print Best Parameters n s gridClf best params print n print Best Estimator n s gridClf best estimator output nb output Best Score CV score 0 484 Best Parameters classifier C 10 preprocessor num imputer strategy mean preprocessor num num feature eng pca n components 0 9 preprocessor num num feature eng select best k 5 Best Estimator Pipeline memory None steps preprocessor ColumnTransformer n jobs None remainder drop sparse threshold 0 3 transformer weights None transformers num Pipeline memory None steps imputer SimpleImputer copy True fill value None missing values nan strategy mean verbose enalty l2 random state None solver lbfgs tol 0 0001 verbose 0 warm start False output A confusion matrix is your basic display of results This is for your training data python Confusion Matrix from sklearn metrics import confusion matrix y train pred gridClf predict X train print Confusion matrix Training confusion matrix y train y train pred output nb output Confusion matrix Training output output nb output array 255 149 146 250 output This confusion matrix is for your test data python y pred gridClf predict X test print Confusion matrix Testing confusion matrix y test y pred output nb output Confusion matrix Testing output output nb output array 51 45 52 52 output After getting a general feel for the situation look at the specific performance metrics you set at the beginning of your problem statement Ensure you hold yourself to this standard and do not change the solutions needs based on current results For a complete listing of performance metrics view the sklearn docs https scikit learn org stable modules model evaluation html model evaluation quantifying the quality of predictions python Testing predictions for outcome labels Predict class probabilities for X The predicted class probabilities of an input sample are computed as the mean predicted class probabilities of the trees in the forest The class probability of a single tree is the fraction of samples of the same class in a leaf y class prob gridClf predict proba X test called predict proba for some classifiers y prob np asarray x 1 for x in y class prob dtype np float32 threshold 0 set threshold y some digit pred y prob threshold print Average training probability 0 3f np mean y prob roc auc from sklearn metrics import roc auc score print Area Under ROC Curve 0 3f roc auc score y test y prob output nb output Average training probability 0 484 Area Under ROC Curve 0 492 output A variety of different plots can be used to explore model and result performance The ROC Curve is one of the most fundamental but several others are of importance Performance graphs are explained in the sklearn docs https scikit learn org stable modules learning curve html validation curves plotting scores to evaluate models python log y prob gridClf decision function X test from sklearn import metrics import numpy as np import matplotlib pyplot as plt plt figure 0 clf LogisticRegression y prob log y prob fpr tpr thresh metrics roc curve y test y prob auc metrics roc auc score y test y prob plt plot fpr tpr label logistic reg auc str auc plt xlabel False Positive Rate plt ylabel True Positive Rate plt title Receiver operating characteristic plt legend loc 0 plt show png output 40 0 png Deliver Save the model for future use especially if you just spent a large amount of time getting the algorithm to converge python from sklearn externals import joblib import os cwd os getcwd file path cwd Data project Models save the model to disk filename file path finalized model sav joblib dump gridClf filename Implement the model within the necessary solution system python in deployment application load the model from disk loaded model joblib load filename result loaded model score X test Y test print result Conclusion In this work we provide an orthodox approach to the ML Process We list the stages involved and the steps for each and align these with more traditional modeling and analysis processes Demo code runs through the basic ideas This code can be modified in order to automate processing in a separate environment such as a deployed service The complete process can be generalized to many situations 1 Column Transformer with Mixed Types https scikit learn org stable auto examples compose plot column transformer mixed types html sphx glr auto examples compose plot column transformer mixed types py",
        "tags": [
            "machine-learning",
            "best-practice"
        ]
    },
    {
        "uri": "/posts/blog_models-matrix_tensor_operations",
        "title": "Working with Matrices and Tensors in PyTorch",
        "content": "\nThe Artificial Intelligence field is moving from single function libraries to frameworks for building different network models TensorFlow was one of the first and has strong production capabilities such as process optimizations However its syntax is unintuitive and the library has a reputation for being difficult for testing new models This led to many organizations adopting PyTorch with underlying Numpy for designing network models This post describes the basic data structures for working with Matrices and Tensors in PyTorch Basics of Tensors and Matrices Basic terminology Before we begin performing opertions we need to have a shared vocabulary on the of the three main data structures using in Artificial Intelligence AI scalar is a single number vector is just one row or column matrix is just a 2 D grid of numbers tensor is a placeholder for the a multi dimensional array vector matrix etc We should discuss tensor in more detail because a placeholder is not a very mathematical definition and it is often confused with a matrix A tensor is often thought of as a generalized matrix That is it could be a 1 D matrix a vector is actually such a tensor a 3 D matrix something like a cube of numbers even a 0 D matrix a single number or a higher dimensional structure that is harder to visualize The dimension of the tensor is called its rank A tensor is a mathematical entity that lives in a structure and interacts with other mathematical entities If one transforms the other entities in the structure in a regular way then the tensor must obey a related transformation rule This dynamical property of a tensor is the key that distinguishes it from a mere matrix It s a team player whose numerical values shift around along with those of its teammates when a transformation is introduced that affects all of them Any rank 2 tensor can be represented as a matrix but not every matrix is really a rank 2 tensor The numerical values of a tensor s matrix representation depend on what transformation rules have been applied to the entire system Indeed speaking of a rank 2 tensor is not really accurate The rank of a tensor has to be given by two numbers The vector to vector mapping is given by a rank 1 1 tensor while the quadratic form is given by a rank 0 2 tensor There s also the type 2 0 which also corresponds to a matrix but which maps two covectors to a number and which again transforms differently So succinctly a tensor is different from a matrix in that a tensor can be rank dimension greater than 2 part of a system such as a neural network that accounts for inter related entities dynamic such that just as a random variable X can have an actualized value x a tensor can be a container for actualized values of an array The bottom line of this is components of a rank 2 tensor can be written in a matrix the tensor is not that matrix because different types of tensors can correspond to the same matrix the differences between those tensor types are uncovered by the basis transformations hence the physicist s definition A tensor is what transforms like a tensor The need for the Tensor construct You can specify a linear transformation between vectors by a matrix Let s call that matrix Now if you do a basis transformation this can also be written as a linear transformation so that if the vector in the old basis is the vector in the new basis is T 1 where v is a column vector Now you can ask what matrix describes the transformation in the new basis Well it s the matrix T 1 AT Well so far so good What I memorized back then is that under basis change a matrix transforms as T 1 AT But then we learned about quadratic forms Those are calculated using a matrix as u TAv Still no problem until we learned about how to do basis changes Now suddenly the matrix did not transform as T 1 AT but rather as T TAT Which confused me like hell How could one and the same object transform differently when used in different contexts Well the solution is Because we are actually talking about different objects In the first case we are talking about a tensor which takes vectors to vectors In the second case we are talking about a tensor which takes two vectors into a scalar or equivalently which takes a vector to a covector Proof basis change rule for quadratic form with being the change of basis matrix between and begin align q begin bmatrix x y z end bmatrix begin bmatrix text A end bmatrix begin bmatrix x y z end bmatrix begin bmatrix x y z end bmatrix top begin bmatrix text A end bmatrix begin bmatrix x y z end bmatrix left P begin bmatrix u v w end bmatrix right top begin bmatrix text A end bmatrix P begin bmatrix u v w end bmatrix begin bmatrix u v w end bmatrix P top begin bmatrix text A end bmatrix P begin bmatrix u v w end bmatrix end align This concludes our discussion of tensors Numpy ndarray PyTorch is A replacement for Numpy to use the power of GPUs PyTorch provides both matrices and tensors Let s dive into Numpy to see what PyTorch is replacing Configure environment python import torch import numpy as np Background At the core numpy provides the excellent ndarray objects short for n dimensional arrays In a ndarray object aka array you can store multiple items of the same data type It is the facilities around the array object that makes numpy so convenient for performing math and data manipulations arrays are designed to handle vectorized operations while a python list is not array size cannot be increased unlike list so a new array must be created array memory size is much smaller than list an array must have all items be of the same data type unlike lists python list1 0 1 2 3 4 arr1d np array list1 try list1 2 except print lack of vectorization on base lists makes this operation impossible print arr1d 2 output nb output lack of vectorization makes this impossible output output nb output array 2 3 4 5 6 output The most commonly used numpy dtypes are float int bool str object python Create a 2d array from a list of lists list2 0 1 2 3 4 5 6 7 8 arr2d np array list2 dtype float arr2d output nb output array 0 1 2 3 4 5 6 7 8 output python arr2d astype str output nb output array 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 dtype U32 output python arr2d tolist output nb output 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 output python memory address print Memory arr2d data shape print Shape arr2d shape dtype print Datatype arr2d dtype size print Size arr2d size ndim print Num Dimensions arr2d ndim output nb output Shape 3 3 Datatype float64 Size 9 Num Dimensions 2 output Operations python np identity 3 output nb output array 1 0 0 0 1 0 0 0 1 output python np concatenate arr2d output nb output array 0 1 2 3 1 1 6 7 8 output python transpose arr2d T output nb output array 0 3 6 1 1 7 2 1 8 output python matrix inversion linalg inv arr2d output nb output array 0 04166667 0 25 0 04166667 1 25 0 5 0 25 1 125 0 25 0 125 output python norm linalg norm arr2d python determinent linalg det arr2d output nb output 24 000000000000004 output Selection python slicing arr2d 2 2 output nb output array 0 1 3 4 output python boolean indexing arr2d 4 output nb output array False False False False False True True True True output python reverse the array on one dimen rows arr2d 1 output nb output array 6 7 8 3 4 5 0 1 2 output Creation python deep copy of array tmp arr2d copy NaN or Infinity arr2d 1 1 np nan not a number arr2d 1 2 np inf infinite print arr2d print Replace nan and inf with 1 Don t use arr2 np nan missing bool np isnan arr2d np isinf arr2d arr2d missing bool 1 print arr2d print print tmp output nb output 0 1 2 3 nan inf 6 7 8 0 1 2 3 1 1 6 7 8 0 1 2 3 4 5 6 7 8 output python reshape print arr2d reshape 9 1 transpose flatten print arr2d flatten ravel new array is reference to the parent array no copy print arr2d ravel output nb output 0 1 2 3 1 1 6 7 8 0 1 2 3 1 1 6 7 8 0 1 2 3 1 1 6 7 8 output python Lower limit is 0 by default print np arange 5 0 to 9 print np arange 0 10 0 to 9 with step of 2 print np arange 0 10 2 10 to 1 decreasing order print np arange 10 0 1 Exactly 10 numbers Start at 1 and end at 50 not equally spaced because of the int rounding print np linspace start 1 stop 50 num 10 dtype int LogSpace start value is actually base start and ends with base stop default base 10 Limit the number of digits after the decimal to 2 np set printoptions precision 2 Start at 10 1 and end at 10 50 print np logspace start 1 stop 50 num 10 base 10 output nb output 0 1 2 3 4 0 1 2 3 4 5 6 7 8 9 0 2 4 6 8 10 9 8 7 6 5 4 3 2 1 1 6 11 17 22 28 33 39 44 50 output python zeros print np zeros 2 2 ones print np ones 2 2 output nb output 0 0 0 0 1 1 1 1 output python a 1 2 3 Repeat whole of a two times print Tile np tile a 2 Repeat each element of a two times print Repeat np repeat a 2 output nb output Tile 1 2 3 1 2 3 Repeat 1 1 2 2 3 3 output python Create random integers of size 10 between 0 10 np random seed 100 arr rand np random randint 0 10 size 10 print arr rand Get the unique items and their counts uniqs counts np unique arr rand return counts True print Unique items uniqs print Counts counts output nb output 8 8 3 7 7 0 4 2 5 2 Unique items 0 2 3 4 5 7 8 Counts 1 2 1 1 1 2 2 output Now that we have a good understanding how to work with Numpy lets see how the PyTorch Tensor may be a replacement as it states in its purpose PyTorch Tensor Let s forget our original discussion of a Tensor for a moment and focus on the concrete PyTorch implementation A torch Tensor is a multi dimensional matrix containing elements of a single data type When an uninitialized matrix is created whatever values were in the allocated memory at the time will appear as the initial values torch Tensor is an alias for the default tensor type torch FloatTensor Creation Since the torch Tensor attempts to be a replacement for ndarray we expect to see a similar class API python x torch empty 5 3 construct a 5x3 matrix uninitialized x torch rand 5 3 randomly initialized matrix x torch zeros 5 3 dtype torch long matrix filled zeros and of dtype long python type x output nb output torch Tensor output python print x type print x shape print x size print x dim output nb output torch LongTensor torch Size 5 3 torch Size 5 3 2 output A tensor can be constructed from a Python list or sequence using the torch tensor constructor torch tensor always copies data If you have a Tensor data and just want to change its requires grad flag use requires grad or detach to avoid a copy If you have a numpy array and want to avoid a copy use torch as tensor python x torch tensor 5 5 3 create a tensor from data python create a tensor new tensor torch Tensor 1 2 3 4 create a 2 x 3 tensor with random values empty tensor torch Tensor 2 3 create a 2 x 3 tensor with random values between 1and 1 uniform tensor torch Tensor 2 3 uniform 1 1 create a 2 x 3 tensor with random values from a uniform distribution on the interval 0 1 rand tensor torch rand 2 3 create a 2 x 3 tensor of zeros zero tensor torch zeros 2 3 Selection and reshaping python slicing examples slice tensor torch Tensor 1 2 3 4 5 6 7 8 9 elements from every row first column python print slice tensor 1 0 print slice tensor 1 0 item output nb output tensor 4 4 0 output python print slice tensor 0 tensor 1 4 7 elements from every row last column print slice tensor 1 tensor 3 6 9 all elements on the second row print slice tensor 2 tensor 4 5 6 all elements from first two rows print slice tensor 2 tensor 1 2 3 4 5 6 output nb output tensor 1 4 7 tensor 3 6 9 tensor 7 8 9 tensor 1 2 3 4 5 6 output python reshape tensor torch Tensor 1 2 3 4 print reshape tensor view 1 4 print reshape tensor view 4 1 output nb output tensor 1 2 3 4 tensor 1 2 3 4 output python my tensor torch rand 2 3 print my tensor output nb output tensor 0 7329 0 2473 0 8068 0 5935 0 4460 0 9787 output Operations There are multiple syntaxes for operations Any operation that mutates a tensor in place is post fixed with an underscore For example x copy y x t will change x While this is a convenient syntax as opposed to Pandas inplace True argument take care to shun this mutability if you prefer the functional programming style The documentation for all operations is here https pytorch org docs stable torch html python x x new ones 5 3 dtype torch double new methods take in sizes print x x torch randn like x dtype torch float override dtype print x output nb output tensor 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 dtype torch float64 tensor 0 2641 0 1227 0 8318 0 8145 0 3912 0 3452 0 9334 1 3681 0 3499 1 9163 0 0799 0 7764 0 7414 1 4728 0 0776 output python y torch rand 5 3 python method print torch add x y output tensor as argument result torch empty 5 3 torch add x y out result print result Addition in place y add x print y output nb output tensor 0 2509 0 9078 0 9634 0 5009 0 2014 0 7240 0 5479 0 4745 0 5204 1 4827 0 4353 0 4762 1 0552 1 4836 0 3999 tensor 0 2509 0 9078 0 9634 0 5009 0 2014 0 7240 0 5479 0 4745 0 5204 1 4827 0 4353 0 4762 1 0552 1 4836 0 3999 tensor 0 2509 0 9078 0 9634 0 5009 0 2014 0 7240 0 5479 0 4745 0 5204 1 4827 0 4353 0 4762 1 0552 1 4836 0 3999 output python print my tensor t regular transpose function print my tensor permute 1 0 transpose via permute function output nb output tensor 0 7329 0 5935 0 2473 0 4460 0 8068 0 9787 tensor 0 7329 0 5935 0 2473 0 4460 0 8068 0 9787 output python cross prod my tensor cross my tensor print cross prod output nb output tensor 4 3144e 09 8 3869e 09 3 0715e 09 4 7199e 09 6 7144e 09 7 1207e 09 output python maxtrix prod my tensor mm my tensor t print maxtrix prod output nb output tensor 1 2493 1 3350 1 3350 1 5091 output python element mult my tensor mul my tensor print element mult output nb output tensor 0 5371 0 0612 0 6510 0 3523 0 1989 0 9579 output Operations on the GPU The crux of the torch Tensor is application to the GPU for faster use in network based modeling python if torch cuda is available my tensor cuda True python my tensor is cuda output nb output False output python Create a numpy array x np array 1 2 3 4 print x output nb output 1 2 3 4 output python Convert the numpy array to a torch tensor y torch from numpy x print y output nb output tensor 1 2 3 4 output python Convert the torch tensor to a numpy array z y numpy print z output nb output 1 2 3 4 output Conclusion This post explains the basic operations of the ndarray and how Tensor adds value Later posts will explore how the Tensor is used in PyTorch and network modeling References framemworks Numpy ref datacamp numpy cheatsheet https s3 amazonaws com assets datacamp com blog assets Numpy Python Cheat Sheet pdf docs numpy quickstart https docs scipy org doc numpy user quickstart html docs numpy api https docs scipy org doc numpy reference PyTorch docs pytorch cheatsheet https pytorch org tutorials beginner ptcheat html docs pytorch api https pytorch org docs stable index html ref kdnuggets pytorch https www kdnuggets com 2019 08 pytorch cheat sheet beginners html ref pytorch cheat https github com Tgaaly pytorch cheatsheet blob master README md ref kaggle pytorch starter with helper functions https github com bfortuner pytorch kaggle starter",
        "tags": [
            "numpy",
            "pytorch",
            "python",
            "deeplearning"
        ]
    },
    {
        "uri": "/posts/blog_nlp-explain_metrics",
        "title": "Explaining Difficult (Abstract) Subjects to Customers",
        "content": "\nStakeholders want to understand what you are selling and how your approach is different However the level of detail they want varies greatly among your different customers A simple whitepaper can be useful enough in most situations But occaisionally a layman will want to know exactly what you are doing and will not be content until you very succinctly explain it to them This post will explain two methods for approaching such obstacles Introduction There are many types of customers and stakeholders that may be encoutered while selling analytics solutions Most non technical stakeholders do not have the time or inclination for the details of analytics They may have a colleague or subject matter expert discuss your approach during initial interactions However some parties have a real desire to understand what you are doing They may also see it as a test of your abilities that you can explain difficult concepts in a way that they can understand In any case their time is limited You will have to make your case clearly and succinctly otherwise they quickly lose patience and you lose your opportunity Two typical failures occur with the too technical and not technical enough approaches Both of these outcomes are due to a lack of preparation In the too technical case the presenter loses perspective of the forest while getting lost in the trees This is common when multi tasking Moments after implementing a difficult programming solution a data scientist is asked to join a call with a customer The scientist has little background on who it is they are engaging and their mind is working at the same level of detail they were just programming a recipe for disaster The scientist gets muddeled in tangents and the customer never gets a straight answer It finally ends long overdue with the customer frustrated and having little interest in future conversations The opposite happens when a seller is caught off guard with some difficult questions Despite the firm s large investment educating the seller with strong fundamentals the seller cannot be an expert The customer asks some technical questions incorrectly or using strange jargon Instead of deferring to an expert the seller presses on but cannot pary the customers inquiries After some stammering the customer feels they ferreted out an imposter Getting their attention again will take time These are painful experiences to undergo With preparation using the methods below the situation will occur much less frequently Methodologies The methodologies are best presented using examples There are many complicated subjects in the analytics field but one of the most common is evaluating a solution Is your solution a good one Is it better than a competitor s solution Why is your method of evaluation correct This is just a taste of the rapid fire inquisition that will take place In this NLP scenario you will need to explain what you are doing and why it makes sense The conclusion of the scenario is that an appropriate balance between precision and recall is necessary for a well performing model It is important to remember that the customer is not your advesary That may be difficult to believe A good basic assumption is that the customer spends the majority of their day looking at powerpoint and has a strong belief that 100 within a green circle is the only correct answer to any question These methods can take considerable time to iterate on the presentation in order to reach the correct balance Golden phrase method The purpose of finding the Golden Phrase is that it instantly makes abstract concepts transparent There are two difficulties discovering a good phrase and ensuring it is universally accepted Discovering a good phrase requires careful thought to create ideas and alot of repitiion trying them with customers It is important not to anchor on your first phrases instead keep brainstorming and allow customers to tell you what is correct by reacting to your words It can be very difficult to view the world from their perspective and to believe you know better than them is the greatest folly After discovering some phrases where customers do have Eureka moments it is important to validate the phrases Not only should the phrase be applicable to different customers within a shared market it should be repeatable with the same customer This is surprisingly difficult In the provided scenario explaining Precision and Recall a data scientist gave the phrase 100 Precision ensures there are no False Positives 100 Recall ensures there are no Misses The customer shouted with joy that he understood completely Alas a week went by and the phrase was used again on the same customer This time the customer was dumbfounded and had lost confidence the team s work Sometimes that is how it goes Example method This straight forward approach explains exactly what you are doing and is made clear by performing each of the steps sequentially just as it is performed The difficutly is that it is just one case so it may not be the correct balance for some audiences This is better used with executives that are content with a cursory understanding of a topic and don t ask too many questions example method nlp example method png Notice the layout is top to bottom left to right in essentially two rows This is important for the sequential steps The green text matches with the first case of naive threshold The blue text matches with the second case of balanced threshold black text is actual text gray text is supporting notes Baby steps method Baby steps are for audiences who really want to understand what you are doing but have little to no technical background While it is thorough you skip the gory details Baby steps provide the essence of what is happening in as simple an explanation as possible but not simpler We perform the process using the following steps We use models to retrieve information within electronic communications A model may produce one of four outcomes There are many methods for evaluating a model s effectiveness Precision Recall is the most effective evaluation for this NLP scenario Precision Recall have important relationships Challenges in improving Precision Recall example method nlp baby steps 1 png example method nlp baby steps 2 png example method nlp baby steps 3 png example method nlp baby steps 4 png example method nlp baby steps 5 png example method nlp baby steps 6 png example method nlp baby steps 7 png Drill down method This method can be really useful for providing the appropriate detail for many different audiences It can be conceived of as an onion Additional layers can be peeled back for greater detail and understanding The drawback is that it is very time consuming to create and also lengthy in presentation example method img PLACEHOLDER png Aspects for Iterative Improvement Some presentations are collected and used in case they are of value But others may be the key for clenching a deal These important jewels need to be continuously polished presented and updated to ensure they are ready for the next deal Is the color schema meaningful and distinctive Does the diagramming tool provide reasonable way to perceive the idea What audience is best least suited for the presentation What supporting notes should we maintain to help explain While using these presentations in practice and with customers be sure to maintain key phrases that either you or the audience says These are triggers that immediately create an ah ha moment Conclusion",
        "tags": [
            "nlp",
            "precision-recall",
            "tag3"
        ]
    },
    {
        "uri": "/posts/blog_nlp-history_nlp_deep_learn",
        "title": "Historical Background of NLP with Deep Learning",
        "content": "\nThe automated linguistic annotation of natural languages kept linguists and computer scientists hard at work for many decades This work focused on the syntax of language as well as basic understanding and includes part of speech named entity categorization and syntatic dependency Language meta data tagging became much more accurate with the introduction of neural network and deep learning models Because pairing meta data with more powerful models is sure to allow for an explosion of new applications it is important to understand the developments that allowed for the creation of this technology This post explores the development of Deep Learning and Natural Language Processing It also highlights strengths and weaknesses for future application History of Deep Learning This section is a summary of an excellent three part series by Andrey Kurenkov http www andreykurenkov com writing ai a brief history of neural nets and deep learning Perceptron and ArtificialNNs Neuron built by Warren McCulloch and Walter Pitts Mcculoch Pitts who showed that a neuron model that sums binary inputs and outputs a 1 if the sum exceeds a certain threshold value and otherwise outputs a 0 can model the basic OR AND NOT functions ref http www minicomplexity org pubs 1943 mcculloch pitts bmb pdf A psychologist Rosenblatt conceived of the Perceptron as a simplified mathematical model of how the neurons in our brains operate it takes a set of binary inputs nearby neurons multiplies each input by a continuous valued weight the synapse strength to each nearby neuron and thresholds the sum of these weighted inputs to output a 1 if the sum is big enough and otherwise a 0 in the same way neurons either fire or do not ref http psycnet apa org index cfm fa buy optionToBuy id 1959 09865 001 Hebb put forth the unexpected and hugely influential idea that knowledge and learning occurs in the brain primarily through the formation and change of synapses between neurons concisely stated as Hebb s Rule When an axon of cell A is near enough to excite a cell B and repeatedly or persistently takes part in firing it some growth process or metabolic change takes place in one or both cells such that A s efficiency as one of the cells firing B is increased Multiple outputs can be learned by having multiple Perceptrons in a layer such that all these Perceptrons receive the same input and each one is responsible for one output of the function Indeed neural nets or formally Artificial Neural Networks ANNs are nothing more than layers of Perceptrons Only one of the 10 neurons output 1 the highest weighted sum is taken to be the correct output and the rest output 0 Finding the right weights using the derivatives of the training error with respect to each weight is exactly how neural nets are typically trained to this day Minsky and Papert s 1969 analysis of Perceptrons did not merely show the impossibility of computing XOR with a single Perceptron but specifically argued that it had to be done with multiple layers of Perceptrons AI Winter 1 1969 multiple layers are necessary for practical usefulness but no obvious approach for doing this Hidden layer networks The reason hidden layers are good in basic terms is that the hidden layers can find features within the data and allow following layers to operate on those features rather than the noisy and large raw data Similar to Feature Extraction in machine learning How to get weights for these hidden layers Calculus Chain Rule The key realization was that if the neural net neurons were not quite Perceptrons but were made to compute the output with an activation function that was still non linear but also differentiable as with Adaline not only could the derivative be used to adjust the weight to minimize error but the chain rule could also be used to compute the derivative for all the neurons in a prior layer and thus the way to adjust their weights would also be known Assign some error to the Output Layer then some to Hidden Layer before it and Hidden Layer before it backpropagate the error Werbos stated it in his 1974 PHD thesis but did not publish on the application of backprop to neural nets until 1982 Learning internal representations by error propagation https www iro umontreal ca vincentp ift3395 lectures backprop old pdf specifically addressed the problems discussed by Minsky in Perceptrons Multilayer feedforward networks are universal approximators http cognitivemedium com magic paper assets Hornik pdf mathematically proved that multiple layers allow neural nets to theoretically implement any function and certainly XOR Convolutional networks Yann LeCun et al at the AT T Bell Labs demonstrated a very significant real world application of backpropagation in classifying handwritten numbers for USPS in Backpropagation Applied to Handwritten Zip Code Recognition http yann lecun com exdb publis pdf lecun 89e pdf The first hidden layer of the neural net was convolutional instead of each neuron having a different weight for each pixel of the input image 40x60 2400 weights the neurons only have a small set of weights 5x5 25 that were applied a whole bunch of small subsets of the image of the same size a single neuron could learn to detect 45 degree lines on subsets of the image and do that everywhere within it Moreover since the pixel exact locations of such features do not matter the neuron could basically skip neighboring subsets of the image subsampling now known as a type of pooling when applying the weights further reducing the training time The addition of Convolutional and Pooling layers distinguishes CNNs from NNs More developments auto encoders here s another neat thing you can do with neural nets approximate probability distributions Boltzmann Machine formulation leads to a domain independent learning algorithm that modifies the connection strengths between units in such a way that the whole network develops an internal model which captures the underlying structure of its environment Helmholtz Machine have separate sets of weights for inferring hidden variables from visible variables recognition weights and vice versa generative weights allows training to be done faster Skepticism of neural nets since they seemed so intuition based and since computers were still barely able to meet their computational needs AI Winter 2 1990 not enough processing or data resources to produce useful results Recurrent CNN with LSTM ref understanding lstm https colah github io posts 2015 08 Understanding LSTMs To tackle the problem of understanding speech researchers sought to modify neural nets to process input as a stream of input as in speech rather than one batch as with an image All the networks that have been discussed so far have been feedforward networks meaning that the output of neurons in a given layer acts as input to only neurons in a next layer But it does not have to be so there is nothing prohibiting us brave computer scientists from connecting output of the last layer act as an input to the first layer or just connecting the output of a neuron to itself The answer is backpropagation through time Basically the idea is to unroll the recurrent neural network by treating each loop through the neural network as an input to another neural network and looping only a limited number of times But there was a problem Although recurrent networks can outperform static networks they appear more difficult to train optimally Their parameters settle in a suboptimal solution which takes into account short term dependencies but not long term dependencies The core reason that recurrent nets are more exciting than CNN is that they allow us to operate over sequences of vectors Sequences in the input the output or in the most general case both With many layers the CNN calculus based splitting of blame ends up with either huge or tiny numbers and the resulting neural net just does not work very well the vanishing or exploding gradient problem In 1997 LSTM http deeplearning cs cmu edu pdfs Hochreiter97 lstm pdf was developed Some of the units are called Constant Error Carousels CECs Each CEC uses as an activation function f the identity function and has a connection to itself with xed weight of 1 0 Due to f s constant derivative of 1 0 errors backpropagated through a CEC cannot vanish or explode Sec 5 9 but stay as they are unless they ow out of the CEC to other typically adaptive parts of the NN AI Winter 3 1993 SVMs and Random Forests were all the rage RNN was slow and difficult Deep Learning big data parallelism gpu and algorithms In 2004 Canadian Institute for Advanced Research CIFAR decided to rebrand the frowned upon field of neural nets with the moniker Deep Learning In 2006 the paper https www cs toronto edu hinton absps fastnc pdf was released which provided a way to train weights well if the weights are initialized in a clever way rather than randomly The basic idea is to train each layer as a Restricted Boltzmann Machine RBM one by one with unsupervised training which starts off the weights much better than just giving them random values and then finishing with a round of supervised learning just as is normal for neural nets Yoshua Bengio et al followed up on this work in 2007 with Greedy Layer Wise Training of Deep Networks http papers nips cc paper 3048 greedy layer wise training of deep networks pdf in which they present a strong argument that deep machine learning methods that is methods with many processing steps or equivalently with hierarchical feature representations of the data are more efficient for difficult problems than shallow methods which two layer ANNs or support vector machines are examples of Also using RBMs is not that important unsupervised pre training of normal neural net layers using backpropagation with plain Autoencoders layers proved to also work well Hinton used these methods on standard speech recognition dataset because ML had already performed so well on MNIST They did this using GPUs over CPUs and the paper Large scale Deep Unsupervised Learning using Graphics Processors http www machinelearning org archive icml2009 papers 218 pdf shows and improvement in training of 70 times faster Andrew Ng s work with Google Brain led an effort to build truly giant neural nets and explore what they could do The work resulted in unsupervised neural net learning of 16 000 CPU cores powering the learning of 1 billion weights Why didn t supervised learning with backpropagation not work well in the past Geoffrey Hinton summarized the findings up to today in these four points Our labeled datasets were thousands of times too small Our computers were millions of times too slow We initialized the weights in a stupid way We used the wrong type of non linearity Additional Improvements Old methods pooling layers convolution layers variations on the input data used with new methods gpu usage for improved computation activation function less intuitive approach such as ReLU can be most useful dropout to prevent overfitting randomly pretend some neurons are not there while training History of NLP ref comparison of NLP frameworks https spacy io usage facts figures ref comparison of NLP with image analysis https thegradient pub nlp imagenet Since introduction of word vectors the standard way of conducting NLP projects has largely remained unchanged word embeddings pretrained on large amounts of unlabeled data via algorithms such as word2vec and GloVe are used to initialize the first layer of a neural network the rest of which is then trained on data of a particular task The downside is that previous knowledge is only used in the first layer It does not acquire meaning from a sequence of words At the core of the recent advances of ULMFiT ELMo and the OpenAI transformer is one key paradigm shift going from just initializing the first layer of our models to pretraining the entire model with hierarchical representations ImageNet for language that is a task that enables models to learn higher level nuances of language similarly to how ImageNet has enabled training of CV models that learn general purpose features of images In 2012 the deep neural network submitted by Alex Krizhevsky Ilya Sutskever and Geoffrey Hinton performed 41 better than the next model in the ImageNet Large Scale Visual Recognition Challenge ILSVRC It also enabled transfer learning through re use of weights achieving good performance with as little as one positive example per category Donahue et al 2014 A key property of an ImageNet like dataset is thus to encourage a model to learn features that will likely generalize to new tasks in the problem domain Empirical proof Embeddings from Language Models ELMo https arxiv org abs 1802 05365 Universal Language Model Fine tuning ULMFiT https arxiv org abs 1801 06146 and the OpenAI Transformer https s3 us west 2 amazonaws com openai assets research covers language unsupervised language understanding paper pdf that demonstrate how language modeling can be used for pretraining These models perform 10 20 better than the state of the art on widely studied benchmarks extremely sample efficient with only hundreds of examples It is very likely that in a year s time NLP practitioners will download pretrained language models rather than pretrained word embeddings for use in their own models similarly to how pre trained ImageNet models are the starting point for most CV projects nowadays Open question how to transfer the information from a pre trained language model to a downstream task ELMo use the pre trained language model as a fixed feature extractor and incorporate its representation as features into a randomly initialized model ULMFiT fine tune the entire language model typically done in CV where either the top most or several of the top layers are fine tuned The next months will show the impact of each of the core components of transfer learning for NLP an expressive language model encoder such as a deep BiLSTM or the Transformer the amount and nature of the data used for pretraining and the method used to fine tune the pretrained model Word Embeddings ref Word embeddings http mccormickml com 2019 05 14 BERT word embeddings tutorial ref Word2Vec Tutorial http mccormickml com 2016 04 19 word2vec tutorial the skip gram model ref CBOW and SkipGram Architectures https www quora com What are the continuous bag of words and skip gram architectures CBOW The input to the model could be 2 1 1 2 the preceding and following words of the current word we are at The output of the neural network will be Hence you can think of the task as predicting the word given its context Note that the number of words we use depends on your setting for the window size Skip gram The input to the model is and the output could be 1 2 1 2 So the task here is predicting the context given a word In addition more distant words are given less weight by randomly sampling them When you define the window size parameter you only configure the maximum window size The actual window size is randomly chosen between 1 and max size for each training sample resulting in words with the maximum distance being observed with a probability of 1 c while words directly next to the given word are always observed Application Tensors and matrices ref difference between tensors and matrices https math stackexchange com questions 412423 what are the differences between a matrix and a tensor 412454 the components of a rank 2 tensor can be written in a matrix the tensor is not that matrix because different types of tensors can correspond to the same matrix the differences between those tensor types are uncovered by the basis transformations hence the physicist s definition A tensor is what transforms like a tensor FastText ref FastText https towardsdatascience com fasttext under the hood 11efc57b2b3 Both the continuous bag of words and the Skip gram model update the weights for a context of size between a random uniform distribution between 1 and the value determined by ws i e the window size is stochastic The target vector for the loss function is computed via a normalized sum of all the input vectors The input vectors are the vector representation for the original word and all the n grams of that word The loss is computed which sets the weights for the forward pass which propagate their way all the way back to the vectors for the input layer in the back propagation pass This tuning of the input vector weights that happens during the back propagation pass is what allows us to learn representations that maximize co occurrence similarity The learning rate lr affects how much each particular instance affects the weights ref many diff applications of RNN https karpathy github io 2015 05 21 rnn effectiveness Evaluation evaluation of language modeling https thegradient pub understanding evaluation metrics for language models",
        "tags": [
            "nlp",
            "deeplearning",
            "tag3"
        ]
    },
    {
        "uri": "/posts/blog_nlp-intro_spacy",
        "title": "Processing Natural Language with Python and Friends",
        "content": "\nPython is a typical language chosen for Data Science work and its strengths with strings make it especially useful for working with natural language While the nltk library opened up this work for python users the newer spacy improves upon processing power by implementing Cython code Tests display its power in production when compared with more traditional approaches such as with Stanford s CoreNLP This post is an outline of examples from the spacy coursework https course spacy io and examples https spacy io usage examples It also uses nltk for providing datasets Additional examples come from tutorials https github com cytora pycon nlp in 10 lines blob master 00 spacy intro ipynb spacy usage documentation https spacy io usage spacy 101 whats spacy linguistic features https spacy io usage linguistic features api documentation https spacy io api top level displacy serve This tutorial introduces the basics of working with natural languages in python including the following topics Extract linguistic features part of speech tags dependencies named entities Work with pre trained statistical models Find words and phrases using Matcher and PhraseMatcher match rules Best practices for working with data structures Doc Token Span Vocab Lexeme Find semantic similarities using word vectors Write custom pipeline components with extension attributes Configure Environment Ensure that spacy is installed Language models are also necessary python m spacy download en core web sm or pip install https github com explosion spacy models releases download en core web sm 2 0 0 en core web sm 2 0 0 tar gz no deps python m spacy validate python m spacy download en core web lg force python import numpy as np python from spacy lang en import English nlp English python import nltk print nltk corpus gutenberg fileids python emma nltk corpus gutenberg raw austen emma txt emma emma replace n docEmma nlp emma Finding words phrases names and concepts Documents spans and tokens python Process the text doc nlp I like tree kangaroos and narwhals Select the first token first token doc 0 Print the first token s text print first token text output nb output I output python Process the text doc nlp I like tree kangaroos and narwhals A slice of the Doc for tree kangaroos tree kangaroos doc 2 4 print tree kangaroos text A slice of the Doc for tree kangaroos and narwhals without the tree kangaroos and narwhals doc 2 6 print tree kangaroos and narwhals text output nb output tree kangaroos tree kangaroos and narwhals output Lexical attributes python Process the text doc nlp In 1990 more than 60 of people in East Asia were in extreme poverty Now less than 4 are Iterate over the tokens in the doc for token in doc Check if the token resembles a number if token like num Get the next token in the document next token doc token i 1 Check if the next token s text equals if next token text print Percentage found token text output nb output Percentage found 60 Percentage found 4 output Context specific linguistic attributes using models The model provides the binary weights that enable spaCy to make predictions It also includes the vocabulary and meta information to tell spaCy which language class to use and how to configure the processing pipeline All models include a meta json that defines the language to initialize the pipeline component names to load as well as general meta information like the model name version license data sources author and accuracy figures if available Model packages include a strings json that stores the entries in the model s vocabulary and the mapping to hashes This allows spaCy to only communicate in hashes and look up the corresponding string if needed The en core web lg 788 MB compared to en core web sm 10 MB LAS 90 07 vs 89 66 POS 96 98 vs 96 78 UAS 91 83 vs 91 53 NER F score 86 62 vs 85 86 NER precision 87 03 vs 86 33 NER recall 86 20 vs 85 39 All that while en core web lg is 79 times larger hence loads a lot more slowly In spaCy attributes that return strings usually end with an underscore pos attributes without the underscore return an ID The dep attribute returns the predicted dependency label The head attribute returns the syntactic head token You can also think of it as the parent token this word is attached to The doc ents property lets you access the named entities predicted by the model python model package python m spacy download en core web sm python load models import spacy nlp spacy load en core web sm python doc nlp She ate the pizza python iterate over the tokens for token in doc print the text and the predicted part of speech tag print token i token text token pos output nb output 0 She PRON 1 ate VERB 2 the DET 3 pizza NOUN output python syntatic dependency for token in doc print token text token pos token dep token head text output nb output She PRON nsubj ate ate VERB ROOT ate the DET det pizza pizza NOUN dobj ate output python process a text doc nlp u Apple is looking at buying U K startup for 1 billion Iterate over the predicted entities for ent in doc ents Print the entity text and its label print ent text ent label output nb output Apple ORG U K GPE 1 billion MONEY output python for tok in doc print tok text tok ent type end output nb output Apple ORG is looking at buying U K GPE startup for MONEY 1 MONEY billion MONEY output python common tags and labels print spacy explain GPE print spacy explain NNP print spacy explain dobj output nb output Countries cities states noun proper singular direct object output python import spacy from spacy import displacy nlp spacy load en core web sm doc1 nlp This is a sentence doc2 nlp This is another sentence displacy render doc1 doc2 style dep svg xmlns http www w3 org 2000 svg xmlns xlink http www w3 org 1999 xlink xml lang en id 98185150183a41159336f6bbe30e0f1c 0 class displacy width 750 height 312 0 direction ltr style max width none height 312 0px color 000000 background ffffff font family Arial direction ltr text class displacy token fill currentColor text anchor middle y 222 0 tspan class displacy word fill currentColor x 50 This tspan tspan class displacy tag dy 2em fill currentColor x 50 DET tspan text text class displacy token fill currentColor text anchor middle y 222 0 tspan class displacy word fill currentColor x 225 is tspan tspan class displacy tag dy 2em fill currentColor x 225 AUX tspan text text class displacy token fill currentColor text anchor middle y 222 0 tspan class displacy word fill currentColor x 400 a tspan tspan class displacy tag dy 2em fill currentColor x 400 DET tspan text text class displacy token fill currentColor text anchor middle y 222 0 tspan class displacy word fill currentColor x 575 sentence tspan tspan class displacy tag dy 2em fill currentColor x 575 NOUN tspan text g class displacy arrow path class displacy arc id arrow 98185150183a41159336f6bbe30e0f1c 0 0 stroke width 2px d M70 177 0 C70 89 5 220 0 89 5 220 0 177 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow 98185150183a41159336f6bbe30e0f1c 0 0 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M70 179 0 L62 167 0 78 167 0 fill currentColor g g class displacy arrow path class displacy arc id arrow 98185150183a41159336f6bbe30e0f1c 0 1 stroke width 2px d M420 177 0 C420 89 5 570 0 89 5 570 0 177 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow 98185150183a41159336f6bbe30e0f1c 0 1 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M420 179 0 L412 167 0 428 167 0 fill currentColor g g class displacy arrow path class displacy arc id arrow 98185150183a41159336f6bbe30e0f1c 0 2 stroke width 2px d M245 177 0 C245 2 0 575 0 2 0 575 0 177 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow 98185150183a41159336f6bbe30e0f1c 0 2 class displacy label startOffset 50 side left fill currentColor text anchor middle attr textPath text path class displacy arrowhead d M575 0 179 0 L583 0 167 0 567 0 167 0 fill currentColor g svg svg xmlns http www w3 org 2000 svg xmlns xlink http www w3 org 1999 xlink xml lang en id 98185150183a41159336f6bbe30e0f1c 1 class displacy width 750 height 312 0 direction ltr style max width none height 312 0px color 000000 background ffffff font family Arial direction ltr text class displacy token fill currentColor text anchor middle y 222 0 tspan class displacy word fill currentColor x 50 This tspan tspan class displacy tag dy 2em fill currentColor x 50 DET tspan text text class displacy token fill currentColor text anchor middle y 222 0 tspan class displacy word fill currentColor x 225 is tspan tspan class displacy tag dy 2em fill currentColor x 225 AUX tspan text text class displacy token fill currentColor text anchor middle y 222 0 tspan class displacy word fill currentColor x 400 another tspan tspan class displacy tag dy 2em fill currentColor x 400 DET tspan text text class displacy token fill currentColor text anchor middle y 222 0 tspan class displacy word fill currentColor x 575 sentence tspan tspan class displacy tag dy 2em fill currentColor x 575 NOUN tspan text g class displacy arrow path class displacy arc id arrow 98185150183a41159336f6bbe30e0f1c 1 0 stroke width 2px d M70 177 0 C70 89 5 220 0 89 5 220 0 177 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow 98185150183a41159336f6bbe30e0f1c 1 0 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M70 179 0 L62 167 0 78 167 0 fill currentColor g g class displacy arrow path class displacy arc id arrow 98185150183a41159336f6bbe30e0f1c 1 1 stroke width 2px d M420 177 0 C420 89 5 570 0 89 5 570 0 177 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow 98185150183a41159336f6bbe30e0f1c 1 1 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M420 179 0 L412 167 0 428 167 0 fill currentColor g g class displacy arrow path class displacy arc id arrow 98185150183a41159336f6bbe30e0f1c 1 2 stroke width 2px d M245 177 0 C245 2 0 575 0 2 0 575 0 177 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow 98185150183a41159336f6bbe30e0f1c 1 2 class displacy label startOffset 50 side left fill currentColor text anchor middle attr textPath text path class displacy arrowhead d M575 0 179 0 L583 0 167 0 567 0 167 0 fill currentColor g svg python import spacy from spacy import displacy nlp spacy load en core web sm options compact True bg 09a3d5 color white font Source Sans Pro text In ancient Rome some neighbors live in three adjacent houses In the center is the house of Senex who lives there with wife Domina son Hero and several slaves including head slave Hysterium and the musical s main character Pseudolus doc nlp text sentence spans list doc sents displacy render sentence spans style dep options options jupyter True svg xmlns http www w3 org 2000 svg xmlns xlink http www w3 org 1999 xlink xml lang en id c2baa64957a84bfb9ce5180baa2e949c 0 class displacy width 1550 height 437 0 direction ltr style max width none height 437 0px color white background 09a3d5 font family Source Sans Pro direction ltr text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 50 In tspan tspan class displacy tag dy 2em fill currentColor x 50 ADP tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 200 ancient tspan tspan class displacy tag dy 2em fill currentColor x 200 ADJ tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 350 Rome tspan tspan class displacy tag dy 2em fill currentColor x 350 PROPN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 500 some tspan tspan class displacy tag dy 2em fill currentColor x 500 DET tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 650 neighbors tspan tspan class displacy tag dy 2em fill currentColor x 650 NOUN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 800 live tspan tspan class displacy tag dy 2em fill currentColor x 800 VERB tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 950 in tspan tspan class displacy tag dy 2em fill currentColor x 950 ADP tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1100 three tspan tspan class displacy tag dy 2em fill currentColor x 1100 NUM tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1250 adjacent tspan tspan class displacy tag dy 2em fill currentColor x 1250 ADJ tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1400 houses tspan tspan class displacy tag dy 2em fill currentColor x 1400 NOUN tspan text g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 0 stroke width 2px d M62 302 0 62 202 0 800 0 202 0 800 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 0 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M62 304 0 L58 296 0 66 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 1 stroke width 2px d M212 302 0 212 277 0 341 0 277 0 341 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 1 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M212 304 0 L208 296 0 216 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 2 stroke width 2px d M62 302 0 62 252 0 344 0 252 0 344 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 2 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M344 0 304 0 L348 0 296 0 340 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 3 stroke width 2px d M512 302 0 512 277 0 641 0 277 0 641 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 3 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M512 304 0 L508 296 0 516 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 4 stroke width 2px d M662 302 0 662 277 0 791 0 277 0 791 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 4 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M662 304 0 L658 296 0 666 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 5 stroke width 2px d M812 302 0 812 277 0 941 0 277 0 941 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 5 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M941 0 304 0 L945 0 296 0 937 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 6 stroke width 2px d M1112 302 0 1112 252 0 1394 0 252 0 1394 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 6 class displacy label startOffset 50 side left fill currentColor text anchor middle nummod textPath text path class displacy arrowhead d M1112 304 0 L1108 296 0 1116 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 7 stroke width 2px d M1262 302 0 1262 277 0 1391 0 277 0 1391 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 7 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M1262 304 0 L1258 296 0 1266 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 0 8 stroke width 2px d M962 302 0 962 227 0 1397 0 227 0 1397 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 0 8 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M1397 0 304 0 L1401 0 296 0 1393 0 296 0 fill currentColor g svg svg xmlns http www w3 org 2000 svg xmlns xlink http www w3 org 1999 xlink xml lang en id c2baa64957a84bfb9ce5180baa2e949c 1 class displacy width 4550 height 437 0 direction ltr style max width none height 437 0px color white background 09a3d5 font family Source Sans Pro direction ltr text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 50 In tspan tspan class displacy tag dy 2em fill currentColor x 50 ADP tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 200 the tspan tspan class displacy tag dy 2em fill currentColor x 200 DET tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 350 center tspan tspan class displacy tag dy 2em fill currentColor x 350 NOUN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 500 is tspan tspan class displacy tag dy 2em fill currentColor x 500 AUX tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 650 the tspan tspan class displacy tag dy 2em fill currentColor x 650 DET tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 800 house tspan tspan class displacy tag dy 2em fill currentColor x 800 NOUN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 950 of tspan tspan class displacy tag dy 2em fill currentColor x 950 ADP tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1100 Senex tspan tspan class displacy tag dy 2em fill currentColor x 1100 PROPN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1250 who tspan tspan class displacy tag dy 2em fill currentColor x 1250 PRON tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1400 lives tspan tspan class displacy tag dy 2em fill currentColor x 1400 VERB tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1550 there tspan tspan class displacy tag dy 2em fill currentColor x 1550 ADV tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1700 with tspan tspan class displacy tag dy 2em fill currentColor x 1700 ADP tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 1850 wife tspan tspan class displacy tag dy 2em fill currentColor x 1850 NOUN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 2000 Domina tspan tspan class displacy tag dy 2em fill currentColor x 2000 PROPN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 2150 son tspan tspan class displacy tag dy 2em fill currentColor x 2150 NOUN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 2300 Hero tspan tspan class displacy tag dy 2em fill currentColor x 2300 PROPN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 2450 and tspan tspan class displacy tag dy 2em fill currentColor x 2450 CCONJ tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 2600 several tspan tspan class displacy tag dy 2em fill currentColor x 2600 ADJ tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 2750 slaves tspan tspan class displacy tag dy 2em fill currentColor x 2750 NOUN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 2900 including tspan tspan class displacy tag dy 2em fill currentColor x 2900 VERB tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 3050 head tspan tspan class displacy tag dy 2em fill currentColor x 3050 PROPN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 3200 slave tspan tspan class displacy tag dy 2em fill currentColor x 3200 NOUN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 3350 Hysterium tspan tspan class displacy tag dy 2em fill currentColor x 3350 PROPN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 3500 and tspan tspan class displacy tag dy 2em fill currentColor x 3500 CCONJ tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 3650 the tspan tspan class displacy tag dy 2em fill currentColor x 3650 DET tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 3800 musical tspan tspan class displacy tag dy 2em fill currentColor x 3800 ADJ tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 3950 s tspan tspan class displacy tag dy 2em fill currentColor x 3950 PART tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 4100 main tspan tspan class displacy tag dy 2em fill currentColor x 4100 ADJ tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 4250 character tspan tspan class displacy tag dy 2em fill currentColor x 4250 NOUN tspan text text class displacy token fill currentColor text anchor middle y 347 0 tspan class displacy word fill currentColor x 4400 Pseudolus tspan tspan class displacy tag dy 2em fill currentColor x 4400 PROPN tspan text g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 0 stroke width 2px d M62 302 0 62 227 0 497 0 227 0 497 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 0 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M62 304 0 L58 296 0 66 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 1 stroke width 2px d M212 302 0 212 277 0 341 0 277 0 341 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 1 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M212 304 0 L208 296 0 216 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 2 stroke width 2px d M62 302 0 62 252 0 344 0 252 0 344 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 2 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M344 0 304 0 L348 0 296 0 340 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 3 stroke width 2px d M662 302 0 662 277 0 791 0 277 0 791 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 3 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M662 304 0 L658 296 0 666 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 4 stroke width 2px d M512 302 0 512 252 0 794 0 252 0 794 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 4 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M794 0 304 0 L798 0 296 0 790 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 5 stroke width 2px d M812 302 0 812 277 0 941 0 277 0 941 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 5 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M941 0 304 0 L945 0 296 0 937 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 6 stroke width 2px d M962 302 0 962 277 0 1091 0 277 0 1091 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 6 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M1091 0 304 0 L1095 0 296 0 1087 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 7 stroke width 2px d M1262 302 0 1262 277 0 1391 0 277 0 1391 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 7 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M1262 304 0 L1258 296 0 1266 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 8 stroke width 2px d M1112 302 0 1112 252 0 1394 0 252 0 1394 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 8 class displacy label startOffset 50 side left fill currentColor text anchor middle relcl textPath text path class displacy arrowhead d M1394 0 304 0 L1398 0 296 0 1390 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 9 stroke width 2px d M1412 302 0 1412 277 0 1541 0 277 0 1541 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 9 class displacy label startOffset 50 side left fill currentColor text anchor middle advmod textPath text path class displacy arrowhead d M1541 0 304 0 L1545 0 296 0 1537 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 10 stroke width 2px d M1412 302 0 1412 252 0 1694 0 252 0 1694 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 10 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M1694 0 304 0 L1698 0 296 0 1690 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 11 stroke width 2px d M1712 302 0 1712 277 0 1841 0 277 0 1841 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 11 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M1841 0 304 0 L1845 0 296 0 1837 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 12 stroke width 2px d M1862 302 0 1862 277 0 1991 0 277 0 1991 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 12 class displacy label startOffset 50 side left fill currentColor text anchor middle appos textPath text path class displacy arrowhead d M1991 0 304 0 L1995 0 296 0 1987 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 13 stroke width 2px d M2162 302 0 2162 277 0 2291 0 277 0 2291 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 13 class displacy label startOffset 50 side left fill currentColor text anchor middle compound textPath text path class displacy arrowhead d M2162 304 0 L2158 296 0 2166 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 14 stroke width 2px d M2012 302 0 2012 252 0 2294 0 252 0 2294 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 14 class displacy label startOffset 50 side left fill currentColor text anchor middle conj textPath text path class displacy arrowhead d M2294 0 304 0 L2298 0 296 0 2290 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 15 stroke width 2px d M2312 302 0 2312 277 0 2441 0 277 0 2441 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 15 class displacy label startOffset 50 side left fill currentColor text anchor middle cc textPath text path class displacy arrowhead d M2441 0 304 0 L2445 0 296 0 2437 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 16 stroke width 2px d M2612 302 0 2612 277 0 2741 0 277 0 2741 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 16 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M2612 304 0 L2608 296 0 2616 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 17 stroke width 2px d M2312 302 0 2312 227 0 2747 0 227 0 2747 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 17 class displacy label startOffset 50 side left fill currentColor text anchor middle conj textPath text path class displacy arrowhead d M2747 0 304 0 L2751 0 296 0 2743 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 18 stroke width 2px d M2762 302 0 2762 277 0 2891 0 277 0 2891 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 18 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M2891 0 304 0 L2895 0 296 0 2887 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 19 stroke width 2px d M3062 302 0 3062 252 0 3344 0 252 0 3344 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 19 class displacy label startOffset 50 side left fill currentColor text anchor middle compound textPath text path class displacy arrowhead d M3062 304 0 L3058 296 0 3066 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 20 stroke width 2px d M3212 302 0 3212 277 0 3341 0 277 0 3341 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 20 class displacy label startOffset 50 side left fill currentColor text anchor middle compound textPath text path class displacy arrowhead d M3212 304 0 L3208 296 0 3216 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 21 stroke width 2px d M2912 302 0 2912 227 0 3347 0 227 0 3347 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 21 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M3347 0 304 0 L3351 0 296 0 3343 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 22 stroke width 2px d M3362 302 0 3362 277 0 3491 0 277 0 3491 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 22 class displacy label startOffset 50 side left fill currentColor text anchor middle cc textPath text path class displacy arrowhead d M3491 0 304 0 L3495 0 296 0 3487 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 23 stroke width 2px d M3662 302 0 3662 277 0 3791 0 277 0 3791 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 23 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M3662 304 0 L3658 296 0 3666 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 24 stroke width 2px d M3812 302 0 3812 227 0 4247 0 227 0 4247 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 24 class displacy label startOffset 50 side left fill currentColor text anchor middle poss textPath text path class displacy arrowhead d M3812 304 0 L3808 296 0 3816 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 25 stroke width 2px d M3812 302 0 3812 277 0 3941 0 277 0 3941 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 25 class displacy label startOffset 50 side left fill currentColor text anchor middle case textPath text path class displacy arrowhead d M3941 0 304 0 L3945 0 296 0 3937 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 26 stroke width 2px d M4112 302 0 4112 277 0 4241 0 277 0 4241 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 26 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M4112 304 0 L4108 296 0 4116 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 27 stroke width 2px d M3362 302 0 3362 202 0 4250 0 202 0 4250 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 27 class displacy label startOffset 50 side left fill currentColor text anchor middle conj textPath text path class displacy arrowhead d M4250 0 304 0 L4254 0 296 0 4246 0 296 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 1 28 stroke width 2px d M4262 302 0 4262 277 0 4391 0 277 0 4391 0 302 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 1 28 class displacy label startOffset 50 side left fill currentColor text anchor middle appos textPath text path class displacy arrowhead d M4391 0 304 0 L4395 0 296 0 4387 0 296 0 fill currentColor g svg svg xmlns http www w3 org 2000 svg xmlns xlink http www w3 org 1999 xlink xml lang en id c2baa64957a84bfb9ce5180baa2e949c 2 class displacy width 2150 height 362 0 direction ltr style max width none height 362 0px color white background 09a3d5 font family Source Sans Pro direction ltr text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 50 A tspan tspan class displacy tag dy 2em fill currentColor x 50 DET tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 200 slave tspan tspan class displacy tag dy 2em fill currentColor x 200 NOUN tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 350 belonging tspan tspan class displacy tag dy 2em fill currentColor x 350 VERB tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 500 to tspan tspan class displacy tag dy 2em fill currentColor x 500 ADP tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 650 Hero tspan tspan class displacy tag dy 2em fill currentColor x 650 PROPN tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 800 Pseudolus tspan tspan class displacy tag dy 2em fill currentColor x 800 PROPN tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 950 wishes tspan tspan class displacy tag dy 2em fill currentColor x 950 VERB tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 1100 to tspan tspan class displacy tag dy 2em fill currentColor x 1100 PART tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 1250 buy tspan tspan class displacy tag dy 2em fill currentColor x 1250 VERB tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 1400 win tspan tspan class displacy tag dy 2em fill currentColor x 1400 VERB tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 1550 or tspan tspan class displacy tag dy 2em fill currentColor x 1550 CCONJ tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 1700 steal tspan tspan class displacy tag dy 2em fill currentColor x 1700 VERB tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 1850 his tspan tspan class displacy tag dy 2em fill currentColor x 1850 PRON tspan text text class displacy token fill currentColor text anchor middle y 272 0 tspan class displacy word fill currentColor x 2000 freedom tspan tspan class displacy tag dy 2em fill currentColor x 2000 NOUN tspan text g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 0 stroke width 2px d M62 227 0 62 202 0 194 0 202 0 194 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 0 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M62 229 0 L58 221 0 66 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 1 stroke width 2px d M212 227 0 212 152 0 950 0 152 0 950 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 1 class displacy label startOffset 50 side left fill currentColor text anchor middle npadvmod textPath text path class displacy arrowhead d M212 229 0 L208 221 0 216 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 2 stroke width 2px d M212 227 0 212 202 0 344 0 202 0 344 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 2 class displacy label startOffset 50 side left fill currentColor text anchor middle acl textPath text path class displacy arrowhead d M344 0 229 0 L348 0 221 0 340 0 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 3 stroke width 2px d M362 227 0 362 202 0 494 0 202 0 494 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 3 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M494 0 229 0 L498 0 221 0 490 0 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 4 stroke width 2px d M512 227 0 512 202 0 644 0 202 0 644 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 4 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M644 0 229 0 L648 0 221 0 640 0 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 5 stroke width 2px d M812 227 0 812 202 0 944 0 202 0 944 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 5 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M812 229 0 L808 221 0 816 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 6 stroke width 2px d M1112 227 0 1112 202 0 1244 0 202 0 1244 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 6 class displacy label startOffset 50 side left fill currentColor text anchor middle aux textPath text path class displacy arrowhead d M1112 229 0 L1108 221 0 1116 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 7 stroke width 2px d M962 227 0 962 177 0 1247 0 177 0 1247 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 7 class displacy label startOffset 50 side left fill currentColor text anchor middle xcomp textPath text path class displacy arrowhead d M1247 0 229 0 L1251 0 221 0 1243 0 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 8 stroke width 2px d M1262 227 0 1262 202 0 1394 0 202 0 1394 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 8 class displacy label startOffset 50 side left fill currentColor text anchor middle conj textPath text path class displacy arrowhead d M1394 0 229 0 L1398 0 221 0 1390 0 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 9 stroke width 2px d M1412 227 0 1412 202 0 1544 0 202 0 1544 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 9 class displacy label startOffset 50 side left fill currentColor text anchor middle cc textPath text path class displacy arrowhead d M1544 0 229 0 L1548 0 221 0 1540 0 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 10 stroke width 2px d M1412 227 0 1412 177 0 1697 0 177 0 1697 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 10 class displacy label startOffset 50 side left fill currentColor text anchor middle conj textPath text path class displacy arrowhead d M1697 0 229 0 L1701 0 221 0 1693 0 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 11 stroke width 2px d M1862 227 0 1862 202 0 1994 0 202 0 1994 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 11 class displacy label startOffset 50 side left fill currentColor text anchor middle poss textPath text path class displacy arrowhead d M1862 229 0 L1858 221 0 1866 221 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 2 12 stroke width 2px d M1712 227 0 1712 177 0 1997 0 177 0 1997 0 227 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 2 12 class displacy label startOffset 50 side left fill currentColor text anchor middle dobj textPath text path class displacy arrowhead d M1997 0 229 0 L2001 0 221 0 1993 0 221 0 fill currentColor g svg svg xmlns http www w3 org 2000 svg xmlns xlink http www w3 org 1999 xlink xml lang en id c2baa64957a84bfb9ce5180baa2e949c 3 class displacy width 6050 height 587 0 direction ltr style max width none height 587 0px color white background 09a3d5 font family Source Sans Pro direction ltr text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 50 One tspan tspan class displacy tag dy 2em fill currentColor x 50 NUM tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 200 of tspan tspan class displacy tag dy 2em fill currentColor x 200 ADP tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 350 the tspan tspan class displacy tag dy 2em fill currentColor x 350 DET tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 500 neighboring tspan tspan class displacy tag dy 2em fill currentColor x 500 NOUN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 650 houses tspan tspan class displacy tag dy 2em fill currentColor x 650 NOUN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 800 is tspan tspan class displacy tag dy 2em fill currentColor x 800 AUX tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 950 owned tspan tspan class displacy tag dy 2em fill currentColor x 950 VERB tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 1100 by tspan tspan class displacy tag dy 2em fill currentColor x 1100 ADP tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 1250 Marcus tspan tspan class displacy tag dy 2em fill currentColor x 1250 PROPN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 1400 Lycus tspan tspan class displacy tag dy 2em fill currentColor x 1400 PROPN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 1550 who tspan tspan class displacy tag dy 2em fill currentColor x 1550 PRON tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 1700 is tspan tspan class displacy tag dy 2em fill currentColor x 1700 AUX tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 1850 a tspan tspan class displacy tag dy 2em fill currentColor x 1850 DET tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 2000 buyer tspan tspan class displacy tag dy 2em fill currentColor x 2000 NOUN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 2150 and tspan tspan class displacy tag dy 2em fill currentColor x 2150 CCONJ tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 2300 seller tspan tspan class displacy tag dy 2em fill currentColor x 2300 NOUN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 2450 of tspan tspan class displacy tag dy 2em fill currentColor x 2450 ADP tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 2600 beautiful tspan tspan class displacy tag dy 2em fill currentColor x 2600 ADJ tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 2750 women tspan tspan class displacy tag dy 2em fill currentColor x 2750 NOUN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 2900 the tspan tspan class displacy tag dy 2em fill currentColor x 2900 DET tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 3050 other tspan tspan class displacy tag dy 2em fill currentColor x 3050 ADJ tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 3200 belongs tspan tspan class displacy tag dy 2em fill currentColor x 3200 VERB tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 3350 to tspan tspan class displacy tag dy 2em fill currentColor x 3350 ADP tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 3500 the tspan tspan class displacy tag dy 2em fill currentColor x 3500 DET tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 3650 ancient tspan tspan class displacy tag dy 2em fill currentColor x 3650 ADJ tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 3800 Erronius tspan tspan class displacy tag dy 2em fill currentColor x 3800 PROPN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 3950 who tspan tspan class displacy tag dy 2em fill currentColor x 3950 PRON tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 4100 is tspan tspan class displacy tag dy 2em fill currentColor x 4100 AUX tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 4250 abroad tspan tspan class displacy tag dy 2em fill currentColor x 4250 ADV tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 4400 searching tspan tspan class displacy tag dy 2em fill currentColor x 4400 VERB tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 4550 for tspan tspan class displacy tag dy 2em fill currentColor x 4550 ADP tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 4700 his tspan tspan class displacy tag dy 2em fill currentColor x 4700 PRON tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 4850 long tspan tspan class displacy tag dy 2em fill currentColor x 4850 ADV tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 5000 lost tspan tspan class displacy tag dy 2em fill currentColor x 5000 VERB tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 5150 children tspan tspan class displacy tag dy 2em fill currentColor x 5150 NOUN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 5300 stolen tspan tspan class displacy tag dy 2em fill currentColor x 5300 VERB tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 5450 in tspan tspan class displacy tag dy 2em fill currentColor x 5450 ADP tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 5600 infancy tspan tspan class displacy tag dy 2em fill currentColor x 5600 NOUN tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 5750 by tspan tspan class displacy tag dy 2em fill currentColor x 5750 ADP tspan text text class displacy token fill currentColor text anchor middle y 497 0 tspan class displacy word fill currentColor x 5900 pirates tspan tspan class displacy tag dy 2em fill currentColor x 5900 NOUN tspan text g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 0 stroke width 2px d M62 452 0 62 327 0 947 0 327 0 947 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 0 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubjpass textPath text path class displacy arrowhead d M62 454 0 L58 446 0 66 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 1 stroke width 2px d M62 452 0 62 427 0 185 0 427 0 185 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 1 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M185 0 454 0 L189 0 446 0 181 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 2 stroke width 2px d M362 452 0 362 402 0 638 0 402 0 638 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 2 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M362 454 0 L358 446 0 366 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 3 stroke width 2px d M512 452 0 512 427 0 635 0 427 0 635 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 3 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M512 454 0 L508 446 0 516 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 4 stroke width 2px d M212 452 0 212 377 0 641 0 377 0 641 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 4 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M641 0 454 0 L645 0 446 0 637 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 5 stroke width 2px d M812 452 0 812 427 0 935 0 427 0 935 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 5 class displacy label startOffset 50 side left fill currentColor text anchor middle auxpass textPath text path class displacy arrowhead d M812 454 0 L808 446 0 816 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 6 stroke width 2px d M962 452 0 962 302 0 3200 0 302 0 3200 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 6 class displacy label startOffset 50 side left fill currentColor text anchor middle ccomp textPath text path class displacy arrowhead d M962 454 0 L958 446 0 966 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 7 stroke width 2px d M962 452 0 962 427 0 1085 0 427 0 1085 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 7 class displacy label startOffset 50 side left fill currentColor text anchor middle agent textPath text path class displacy arrowhead d M1085 0 454 0 L1089 0 446 0 1081 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 8 stroke width 2px d M1262 452 0 1262 427 0 1385 0 427 0 1385 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 8 class displacy label startOffset 50 side left fill currentColor text anchor middle compound textPath text path class displacy arrowhead d M1262 454 0 L1258 446 0 1266 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 9 stroke width 2px d M1112 452 0 1112 402 0 1388 0 402 0 1388 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 9 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M1388 0 454 0 L1392 0 446 0 1384 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 10 stroke width 2px d M1562 452 0 1562 427 0 1685 0 427 0 1685 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 10 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M1562 454 0 L1558 446 0 1566 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 11 stroke width 2px d M1412 452 0 1412 402 0 1688 0 402 0 1688 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 11 class displacy label startOffset 50 side left fill currentColor text anchor middle relcl textPath text path class displacy arrowhead d M1688 0 454 0 L1692 0 446 0 1684 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 12 stroke width 2px d M1862 452 0 1862 427 0 1985 0 427 0 1985 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 12 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M1862 454 0 L1858 446 0 1866 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 13 stroke width 2px d M1712 452 0 1712 402 0 1988 0 402 0 1988 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 13 class displacy label startOffset 50 side left fill currentColor text anchor middle attr textPath text path class displacy arrowhead d M1988 0 454 0 L1992 0 446 0 1984 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 14 stroke width 2px d M2012 452 0 2012 427 0 2135 0 427 0 2135 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 14 class displacy label startOffset 50 side left fill currentColor text anchor middle cc textPath text path class displacy arrowhead d M2135 0 454 0 L2139 0 446 0 2131 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 15 stroke width 2px d M2012 452 0 2012 402 0 2288 0 402 0 2288 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 15 class displacy label startOffset 50 side left fill currentColor text anchor middle conj textPath text path class displacy arrowhead d M2288 0 454 0 L2292 0 446 0 2284 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 16 stroke width 2px d M2012 452 0 2012 377 0 2441 0 377 0 2441 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 16 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M2441 0 454 0 L2445 0 446 0 2437 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 17 stroke width 2px d M2612 452 0 2612 427 0 2735 0 427 0 2735 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 17 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M2612 454 0 L2608 446 0 2616 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 18 stroke width 2px d M2462 452 0 2462 402 0 2738 0 402 0 2738 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 18 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M2738 0 454 0 L2742 0 446 0 2734 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 19 stroke width 2px d M2912 452 0 2912 427 0 3035 0 427 0 3035 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 19 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M2912 454 0 L2908 446 0 2916 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 20 stroke width 2px d M3062 452 0 3062 427 0 3185 0 427 0 3185 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 20 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M3062 454 0 L3058 446 0 3066 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 21 stroke width 2px d M3212 452 0 3212 427 0 3335 0 427 0 3335 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 21 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M3335 0 454 0 L3339 0 446 0 3331 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 22 stroke width 2px d M3512 452 0 3512 402 0 3788 0 402 0 3788 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 22 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M3512 454 0 L3508 446 0 3516 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 23 stroke width 2px d M3662 452 0 3662 427 0 3785 0 427 0 3785 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 23 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M3662 454 0 L3658 446 0 3666 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 24 stroke width 2px d M3362 452 0 3362 377 0 3791 0 377 0 3791 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 24 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M3791 0 454 0 L3795 0 446 0 3787 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 25 stroke width 2px d M3962 452 0 3962 427 0 4085 0 427 0 4085 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 25 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M3962 454 0 L3958 446 0 3966 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 26 stroke width 2px d M3812 452 0 3812 402 0 4088 0 402 0 4088 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 26 class displacy label startOffset 50 side left fill currentColor text anchor middle relcl textPath text path class displacy arrowhead d M4088 0 454 0 L4092 0 446 0 4084 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 27 stroke width 2px d M4112 452 0 4112 427 0 4235 0 427 0 4235 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 27 class displacy label startOffset 50 side left fill currentColor text anchor middle advmod textPath text path class displacy arrowhead d M4235 0 454 0 L4239 0 446 0 4231 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 28 stroke width 2px d M4112 452 0 4112 402 0 4388 0 402 0 4388 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 28 class displacy label startOffset 50 side left fill currentColor text anchor middle advcl textPath text path class displacy arrowhead d M4388 0 454 0 L4392 0 446 0 4384 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 29 stroke width 2px d M4412 452 0 4412 427 0 4535 0 427 0 4535 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 29 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M4535 0 454 0 L4539 0 446 0 4531 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 30 stroke width 2px d M4712 452 0 4712 377 0 5141 0 377 0 5141 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 30 class displacy label startOffset 50 side left fill currentColor text anchor middle poss textPath text path class displacy arrowhead d M4712 454 0 L4708 446 0 4716 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 31 stroke width 2px d M4862 452 0 4862 427 0 4985 0 427 0 4985 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 31 class displacy label startOffset 50 side left fill currentColor text anchor middle advmod textPath text path class displacy arrowhead d M4862 454 0 L4858 446 0 4866 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 32 stroke width 2px d M5012 452 0 5012 427 0 5135 0 427 0 5135 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 32 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M5012 454 0 L5008 446 0 5016 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 33 stroke width 2px d M4562 452 0 4562 352 0 5144 0 352 0 5144 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 33 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M5144 0 454 0 L5148 0 446 0 5140 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 34 stroke width 2px d M5162 452 0 5162 427 0 5285 0 427 0 5285 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 34 class displacy label startOffset 50 side left fill currentColor text anchor middle acl textPath text path class displacy arrowhead d M5285 0 454 0 L5289 0 446 0 5281 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 35 stroke width 2px d M5312 452 0 5312 427 0 5435 0 427 0 5435 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 35 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M5435 0 454 0 L5439 0 446 0 5431 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 36 stroke width 2px d M5462 452 0 5462 427 0 5585 0 427 0 5585 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 36 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M5585 0 454 0 L5589 0 446 0 5581 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 37 stroke width 2px d M5312 452 0 5312 377 0 5741 0 377 0 5741 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 37 class displacy label startOffset 50 side left fill currentColor text anchor middle agent textPath text path class displacy arrowhead d M5741 0 454 0 L5745 0 446 0 5737 0 446 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 3 38 stroke width 2px d M5762 452 0 5762 427 0 5885 0 427 0 5885 0 452 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 3 38 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M5885 0 454 0 L5889 0 446 0 5881 0 446 0 fill currentColor g svg svg xmlns http www w3 org 2000 svg xmlns xlink http www w3 org 1999 xlink xml lang en id c2baa64957a84bfb9ce5180baa2e949c 4 class displacy width 2450 height 512 0 direction ltr style max width none height 512 0px color white background 09a3d5 font family Source Sans Pro direction ltr text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 50 One tspan tspan class displacy tag dy 2em fill currentColor x 50 NUM tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 200 day tspan tspan class displacy tag dy 2em fill currentColor x 200 NOUN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 350 Senex tspan tspan class displacy tag dy 2em fill currentColor x 350 PROPN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 500 and tspan tspan class displacy tag dy 2em fill currentColor x 500 CCONJ tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 650 Domina tspan tspan class displacy tag dy 2em fill currentColor x 650 PROPN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 800 go tspan tspan class displacy tag dy 2em fill currentColor x 800 VERB tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 950 on tspan tspan class displacy tag dy 2em fill currentColor x 950 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1100 a tspan tspan class displacy tag dy 2em fill currentColor x 1100 DET tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1250 trip tspan tspan class displacy tag dy 2em fill currentColor x 1250 NOUN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1400 and tspan tspan class displacy tag dy 2em fill currentColor x 1400 CCONJ tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1550 leave tspan tspan class displacy tag dy 2em fill currentColor x 1550 VERB tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1700 Pseudolus tspan tspan class displacy tag dy 2em fill currentColor x 1700 PROPN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1850 in tspan tspan class displacy tag dy 2em fill currentColor x 1850 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2000 charge tspan tspan class displacy tag dy 2em fill currentColor x 2000 NOUN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2150 of tspan tspan class displacy tag dy 2em fill currentColor x 2150 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2300 Hero tspan tspan class displacy tag dy 2em fill currentColor x 2300 PROPN tspan text g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 0 stroke width 2px d M62 377 0 62 352 0 188 0 352 0 188 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 0 class displacy label startOffset 50 side left fill currentColor text anchor middle nummod textPath text path class displacy arrowhead d M62 379 0 L58 371 0 66 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 1 stroke width 2px d M212 377 0 212 277 0 797 0 277 0 797 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 1 class displacy label startOffset 50 side left fill currentColor text anchor middle npadvmod textPath text path class displacy arrowhead d M212 379 0 L208 371 0 216 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 2 stroke width 2px d M362 377 0 362 302 0 794 0 302 0 794 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 2 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M362 379 0 L358 371 0 366 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 3 stroke width 2px d M362 377 0 362 352 0 488 0 352 0 488 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 3 class displacy label startOffset 50 side left fill currentColor text anchor middle cc textPath text path class displacy arrowhead d M488 0 379 0 L492 0 371 0 484 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 4 stroke width 2px d M362 377 0 362 327 0 641 0 327 0 641 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 4 class displacy label startOffset 50 side left fill currentColor text anchor middle conj textPath text path class displacy arrowhead d M641 0 379 0 L645 0 371 0 637 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 5 stroke width 2px d M812 377 0 812 352 0 938 0 352 0 938 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 5 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M938 0 379 0 L942 0 371 0 934 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 6 stroke width 2px d M1112 377 0 1112 352 0 1238 0 352 0 1238 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 6 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M1112 379 0 L1108 371 0 1116 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 7 stroke width 2px d M962 377 0 962 327 0 1241 0 327 0 1241 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 7 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M1241 0 379 0 L1245 0 371 0 1237 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 8 stroke width 2px d M812 377 0 812 277 0 1397 0 277 0 1397 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 8 class displacy label startOffset 50 side left fill currentColor text anchor middle cc textPath text path class displacy arrowhead d M1397 0 379 0 L1401 0 371 0 1393 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 9 stroke width 2px d M812 377 0 812 252 0 1550 0 252 0 1550 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 9 class displacy label startOffset 50 side left fill currentColor text anchor middle conj textPath text path class displacy arrowhead d M1550 0 379 0 L1554 0 371 0 1546 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 10 stroke width 2px d M1562 377 0 1562 352 0 1688 0 352 0 1688 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 10 class displacy label startOffset 50 side left fill currentColor text anchor middle dobj textPath text path class displacy arrowhead d M1688 0 379 0 L1692 0 371 0 1684 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 11 stroke width 2px d M1562 377 0 1562 327 0 1841 0 327 0 1841 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 11 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M1841 0 379 0 L1845 0 371 0 1837 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 12 stroke width 2px d M1862 377 0 1862 352 0 1988 0 352 0 1988 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 12 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M1988 0 379 0 L1992 0 371 0 1984 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 13 stroke width 2px d M2012 377 0 2012 352 0 2138 0 352 0 2138 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 13 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M2138 0 379 0 L2142 0 371 0 2134 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 4 14 stroke width 2px d M2162 377 0 2162 352 0 2288 0 352 0 2288 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 4 14 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M2288 0 379 0 L2292 0 371 0 2284 0 371 0 fill currentColor g svg svg xmlns http www w3 org 2000 svg xmlns xlink http www w3 org 1999 xlink xml lang en id c2baa64957a84bfb9ce5180baa2e949c 5 class displacy width 3950 height 512 0 direction ltr style max width none height 512 0px color white background 09a3d5 font family Source Sans Pro direction ltr text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 50 Hero tspan tspan class displacy tag dy 2em fill currentColor x 50 NOUN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 200 confides tspan tspan class displacy tag dy 2em fill currentColor x 200 VERB tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 350 in tspan tspan class displacy tag dy 2em fill currentColor x 350 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 500 Pseudolus tspan tspan class displacy tag dy 2em fill currentColor x 500 PROPN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 650 that tspan tspan class displacy tag dy 2em fill currentColor x 650 SCONJ tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 800 he tspan tspan class displacy tag dy 2em fill currentColor x 800 PRON tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 950 is tspan tspan class displacy tag dy 2em fill currentColor x 950 AUX tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1100 in tspan tspan class displacy tag dy 2em fill currentColor x 1100 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1250 love tspan tspan class displacy tag dy 2em fill currentColor x 1250 NOUN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1400 with tspan tspan class displacy tag dy 2em fill currentColor x 1400 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1550 the tspan tspan class displacy tag dy 2em fill currentColor x 1550 DET tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1700 lovely tspan tspan class displacy tag dy 2em fill currentColor x 1700 ADJ tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 1850 Philia tspan tspan class displacy tag dy 2em fill currentColor x 1850 PROPN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2000 one tspan tspan class displacy tag dy 2em fill currentColor x 2000 NUM tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2150 of tspan tspan class displacy tag dy 2em fill currentColor x 2150 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2300 the tspan tspan class displacy tag dy 2em fill currentColor x 2300 DET tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2450 courtesans tspan tspan class displacy tag dy 2em fill currentColor x 2450 NOUN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2600 in tspan tspan class displacy tag dy 2em fill currentColor x 2600 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2750 the tspan tspan class displacy tag dy 2em fill currentColor x 2750 DET tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 2900 House tspan tspan class displacy tag dy 2em fill currentColor x 2900 PROPN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 3050 of tspan tspan class displacy tag dy 2em fill currentColor x 3050 ADP tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 3200 Lycus tspan tspan class displacy tag dy 2em fill currentColor x 3200 PROPN tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 3350 albeit tspan tspan class displacy tag dy 2em fill currentColor x 3350 SCONJ tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 3500 still tspan tspan class displacy tag dy 2em fill currentColor x 3500 ADV tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 3650 a tspan tspan class displacy tag dy 2em fill currentColor x 3650 DET tspan text text class displacy token fill currentColor text anchor middle y 422 0 tspan class displacy word fill currentColor x 3800 virgin tspan tspan class displacy tag dy 2em fill currentColor x 3800 NOUN tspan text g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 0 stroke width 2px d M62 377 0 62 352 0 188 0 352 0 188 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 0 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M62 379 0 L58 371 0 66 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 1 stroke width 2px d M212 377 0 212 352 0 338 0 352 0 338 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 1 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M338 0 379 0 L342 0 371 0 334 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 2 stroke width 2px d M362 377 0 362 352 0 488 0 352 0 488 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 2 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M488 0 379 0 L492 0 371 0 484 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 3 stroke width 2px d M662 377 0 662 327 0 941 0 327 0 941 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 3 class displacy label startOffset 50 side left fill currentColor text anchor middle mark textPath text path class displacy arrowhead d M662 379 0 L658 371 0 666 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 4 stroke width 2px d M812 377 0 812 352 0 938 0 352 0 938 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 4 class displacy label startOffset 50 side left fill currentColor text anchor middle nsubj textPath text path class displacy arrowhead d M812 379 0 L808 371 0 816 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 5 stroke width 2px d M212 377 0 212 277 0 947 0 277 0 947 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 5 class displacy label startOffset 50 side left fill currentColor text anchor middle ccomp textPath text path class displacy arrowhead d M947 0 379 0 L951 0 371 0 943 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 6 stroke width 2px d M962 377 0 962 352 0 1088 0 352 0 1088 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 6 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M1088 0 379 0 L1092 0 371 0 1084 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 7 stroke width 2px d M1112 377 0 1112 352 0 1238 0 352 0 1238 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 7 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M1238 0 379 0 L1242 0 371 0 1234 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 8 stroke width 2px d M1262 377 0 1262 352 0 1388 0 352 0 1388 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 8 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M1388 0 379 0 L1392 0 371 0 1384 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 9 stroke width 2px d M1562 377 0 1562 327 0 1841 0 327 0 1841 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 9 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M1562 379 0 L1558 371 0 1566 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 10 stroke width 2px d M1712 377 0 1712 352 0 1838 0 352 0 1838 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 10 class displacy label startOffset 50 side left fill currentColor text anchor middle amod textPath text path class displacy arrowhead d M1712 379 0 L1708 371 0 1716 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 11 stroke width 2px d M1412 377 0 1412 302 0 1844 0 302 0 1844 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 11 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M1844 0 379 0 L1848 0 371 0 1840 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 12 stroke width 2px d M1862 377 0 1862 352 0 1988 0 352 0 1988 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 12 class displacy label startOffset 50 side left fill currentColor text anchor middle appos textPath text path class displacy arrowhead d M1988 0 379 0 L1992 0 371 0 1984 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 13 stroke width 2px d M2012 377 0 2012 352 0 2138 0 352 0 2138 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 13 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M2138 0 379 0 L2142 0 371 0 2134 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 14 stroke width 2px d M2312 377 0 2312 352 0 2438 0 352 0 2438 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 14 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M2312 379 0 L2308 371 0 2316 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 15 stroke width 2px d M2162 377 0 2162 327 0 2441 0 327 0 2441 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 15 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M2441 0 379 0 L2445 0 371 0 2437 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 16 stroke width 2px d M2462 377 0 2462 352 0 2588 0 352 0 2588 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 16 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M2588 0 379 0 L2592 0 371 0 2584 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 17 stroke width 2px d M2762 377 0 2762 352 0 2888 0 352 0 2888 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 17 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M2762 379 0 L2758 371 0 2766 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 18 stroke width 2px d M2612 377 0 2612 327 0 2891 0 327 0 2891 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 18 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M2891 0 379 0 L2895 0 371 0 2887 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 19 stroke width 2px d M2912 377 0 2912 352 0 3038 0 352 0 3038 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 19 class displacy label startOffset 50 side left fill currentColor text anchor middle prep textPath text path class displacy arrowhead d M3038 0 379 0 L3042 0 371 0 3034 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 20 stroke width 2px d M3062 377 0 3062 352 0 3188 0 352 0 3188 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 20 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M3188 0 379 0 L3192 0 371 0 3184 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 21 stroke width 2px d M962 377 0 962 252 0 3350 0 252 0 3350 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 21 class displacy label startOffset 50 side left fill currentColor text anchor middle advmod textPath text path class displacy arrowhead d M3350 0 379 0 L3354 0 371 0 3346 0 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 22 stroke width 2px d M3512 377 0 3512 327 0 3791 0 327 0 3791 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 22 class displacy label startOffset 50 side left fill currentColor text anchor middle advmod textPath text path class displacy arrowhead d M3512 379 0 L3508 371 0 3516 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 23 stroke width 2px d M3662 377 0 3662 352 0 3788 0 352 0 3788 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 23 class displacy label startOffset 50 side left fill currentColor text anchor middle det textPath text path class displacy arrowhead d M3662 379 0 L3658 371 0 3666 371 0 fill currentColor g g class displacy arrow path class displacy arc id arrow c2baa64957a84bfb9ce5180baa2e949c 5 24 stroke width 2px d M3362 377 0 3362 302 0 3794 0 302 0 3794 0 377 0 fill none stroke currentColor text dy 1 25em style font size 0 8em letter spacing 1px textPath xlink href arrow c2baa64957a84bfb9ce5180baa2e949c 5 24 class displacy label startOffset 50 side left fill currentColor text anchor middle pobj textPath text path class displacy arrowhead d M3794 0 379 0 L3798 0 371 0 3790 0 371 0 fill currentColor g svg python import spacy from spacy import displacy text When Sebastian Thrun started working on self driving cars at Google in 2007 few people outside of the company took him seriously nlp spacy load en core web sm doc nlp text displacy render doc style ent div class entities style line height 2 5 direction ltr When mark class entity style background aa9cfc padding 0 45em 0 6em margin 0 0 25em line height 1 border radius 0 35em Sebastian Thrun span style font size 0 8em font weight bold line height 1 border radius 0 35em text transform uppercase vertical align middle margin left 0 5rem PERSON span mark started working on self driving cars at mark class entity style background 7aecec padding 0 45em 0 6em margin 0 0 25em line height 1 border radius 0 35em Google span style font size 0 8em font weight bold line height 1 border radius 0 35em text transform uppercase vertical align middle margin left 0 5rem ORG span mark in mark class entity style background bfe1d9 padding 0 45em 0 6em margin 0 0 25em line height 1 border radius 0 35em 2007 span style font size 0 8em font weight bold line height 1 border radius 0 35em text transform uppercase vertical align middle margin left 0 5rem DATE span mark few people outside of the company took him seriously div python colors ORG linear gradient 90deg aa9cfc fc9ce7 options ents ORG colors colors displacy render doc style ent options options div class entities style line height 2 5 direction ltr When Sebastian Thrun started working on self driving cars at mark class entity style background linear gradient 90deg aa9cfc fc9ce7 padding 0 45em 0 6em margin 0 0 25em line height 1 border radius 0 35em Google span style font size 0 8em font weight bold line height 1 border radius 0 35em text transform uppercase vertical align middle margin left 0 5rem ORG span mark in 2007 few people outside of the company took him seriously div python words text This tag DT text is tag VBZ text a tag DT text sentence tag NN arcs start 0 end 1 label nsubj dir left start 2 end 3 label det dir left start 1 end 3 label attr dir right ex text But Google is starting from behind ents start 4 end 10 label ORG title None html displacy render ex style ent manual True div class entities style line height 2 5 direction ltr But mark class entity style background 7aecec padding 0 45em 0 6em margin 0 0 25em line height 1 border radius 0 35em Google span style font size 0 8em font weight bold line height 1 border radius 0 35em text transform uppercase vertical align middle margin left 0 5rem ORG span mark is starting from behind div Rule based matching Match exact token texts TEXT iPhone TEXT X Match lexical attributes LOWER iphone LOWER x Match any token attributes LEMMA buy POS NOUN python Import the Matcher from spacy matcher import Matcher text New iPhone X release date leaked as Apple reveals pre orders by mistake Initialize the matcher with the shared vocab matcher Matcher nlp vocab Add the pattern to the matcher pattern TEXT iPhone TEXT X matcher add IPHONE PATTERN None pattern Process some text doc nlp New iPhone X release date leaked Call the matcher on the doc matches matcher doc match id hash value of the pattern name start start index of matched span end end index of matched span Iterate over the matches for match id start end in matches Get the matched span matched span doc start end print matched span text output nb output 9528407286733565721 1 3 output python Write a pattern that matches a form of download plus proper noun pattern LEMMA download POS PROPN Write a pattern for adjective plus one or two nouns pattern POS POS POS OP Large scale data analysis with spaCy Vocab hashes lexeme vocab stores data shared across multiple documents The doc contains words in context with their part of speech tags and dependencies The string store maintains the text of the vocab hashes A lexeme object is an hash entry in the vocabulary vocab lexemes hold context independent information about a word like the text or whether the the word consists of alphabetic characters Don t have part of speech tags dependencies or entity labels Those depend on the context python nlp vocab length output nb output 498 output python Hashes can t be reversed that s why we need to provide the shared vocab coffee hash nlp vocab strings coffee print coffee hash output nb output 3197928453018144401 output python Raises an error if we haven t seen the string before string nlp vocab strings 3197928453018144401 python doc nlp I love coffee print hash value nlp vocab strings coffee doc vocab strings coffee print string value nlp vocab strings 3197928453018144401 output nb output hash value 3197928453018144401 3197928453018144401 string value coffee output python contains the context independent information doc nlp I love coffee lexeme nlp vocab coffee Print the lexical attributes print lexeme text lexeme orth lexeme is alpha output nb output coffee 3197928453018144401 True output Doc span and token Doc is created automatically when you process a text with the nlp object But you can also instantiate the class manually It takes three arguments the shared vocab the words and the spaces A Span is a slice of a Doc consisting of one or more tokens The Span takes at least three arguments the doc it refers to and the start and end index of the span with end index exclusive Doc and Span are very powerful and hold references and relationships of words and sentences Convert result to strings as late as possible Use token attributes if available for example token i for the token index This will let you reuse it in spaCy python Create an nlp object from spacy lang en import English nlp English Import the Doc class from spacy tokens import Doc The words and spaces to create the doc from words Hello world spaces True False False Create a doc manually doc Doc nlp vocab words words spaces spaces doc output nb output Hello world output python Import the Doc class from spacy tokens import Span Create a doc manually doc Doc nlp vocab words words spaces spaces Create a span manually span Span doc 0 2 Create a span with a label span with label Span doc 0 2 label GREETING Add span to the doc ents doc ents span with label Print entities text and labels print ent text ent label for ent in doc ents output nb output I like GREETING output Similarity and vectors In order to use similarity you need a larger spaCy model that has word vectors included en core web lg en core web md but not sm That is because similarity is determined using word vectors Word vectors are generated using an algorithm like Word2Vec and lots of text The default distance is cosine similarity but can be adjusted For a more in depth look the source code https spacy io docs usage word vectors similarities for similarity shows return numpy dot self vector other vector self vector norm other vector norm python Load a larger model with vectors nlp spacy load en core web lg Compare two documents doc1 nlp I like fast food doc2 nlp I like pizza print doc1 similarity doc2 doc nlp I like pizza and pasta token1 doc 2 token2 doc 4 print token1 similarity token2 output nb output 0 8627203210548107 0 7369546 output python nlp spacy load en core web sm doc1 nlp I print doc1 vector shape output nb output 96 output python nlp spacy load en core web lg doc1 nlp I print doc1 vector shape output nb output 300 output python nlp spacy load en core web sm doc1 nlp I doc2 nlp like doc3 nlp I like doc4 nlp I like pizza print doc1 vector shape doc1 vector norm print doc2 vector shape doc2 vector norm print doc3 vector shape doc3 vector norm print doc4 vector shape doc4 vector norm output nb output 96 23 1725315055188 96 21 75560300132138 96 17 23478412191207 96 14 848700829346688 output python doc1 0 vector doc3 0 vector output nb output array False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False output python print np dot doc1 vector doc2 vector print np linalg norm doc2 vector ord 2 print np linalg norm doc1 vector ord 2 np linalg norm doc2 vector ord 2 print doc2 vector norm output nb output 21 871986 4 6767497 True 4 676749731219555 output python doc1 nlp pizza like I doc2 nlp I like pizza doc3 nlp pizza I like doc4 nlp like pizza I doc5 nlp I pizza like doc6 nlp like I pizza lDoc doc1 doc2 doc3 doc4 doc5 doc6 result np zeros 6 6 for i doc1 in enumerate lDoc for j doc2 in enumerate lDoc result i j doc1 similarity doc2 python result output nb output array 1 0 99999994 0 99999994 0 99999995 0 99999994 0 99999994 0 99999994 1 0 99999993 0 99999994 0 99999993 0 99999992 0 99999994 0 99999993 1 0 99999994 0 99999993 0 99999993 0 99999995 0 99999994 0 99999994 1 0 99999994 0 99999994 0 99999994 0 99999993 0 99999993 0 99999994 1 0 99999993 0 99999994 0 99999992 0 99999993 0 99999994 0 99999993 1 output python nlp spacy load en core web lg doc1 nlp apples oranges fruit print doc1 0 vector norm print doc1 1 vector norm print doc1 2 vector norm print doc1 0 similarity doc1 1 print doc1 0 similarity doc1 2 output nb output 6 895898 6 949064 7 294794 0 77809423 0 72417974 output python doc1 nlp apples doc2 nlp apples apples apples apples apples apples apples apples apples apples apples apples apples apples apples apples apples apples print doc1 vector norm print doc2 vector norm print doc1 similarity doc2 output nb output 6 895897646384268 6 895897762990182 1 0000000930092277 output python doc1 nlp apples fruit doc2 nlp apples apples apples apples apples apples apples apples apples apples apples apples apples apples apples apples apples apples fruit print doc1 vector norm print doc2 vector norm print doc1 similarity doc2 output nb output 6 588359567392134 6 816139083280562 0 9383865534490474 output python Load a larger model with vectors nlp spacy load en core web lg doc nlp I have a banana Access the word vector via the token vector attribute vector doc 3 vector print type vector print vector shape output nb output class numpy ndarray 300 output python vector 0 10 output nb output array 0 20228 0 076618 0 37032 0 032845 0 41957 0 072069 0 37476 0 05746 0 012401 0 52949 dtype float32 output python no universal definition for similarity doc1 nlp I like cats doc2 nlp I hate cats print doc1 similarity doc2 output nb output 0 9501447503553421 output Pattern matching python import spacy from spacy matcher import Matcher nlp spacy load en core web sm doc nlp Twitch Prime the perks program for Amazon Prime members offering free loot games and other benefits is ditching one of its best features ad free viewing According to an email sent out to Amazon Prime members today ad free viewing will no longer be included as a part of Twitch Prime for new members beginning on September 14 However members with existing annual subscriptions will be able to continue to enjoy ad free viewing until their subscription comes up for renewal Those with monthly subscriptions will have access to ad free viewing until October 15 Create the match patterns pattern1 LOWER Amazon IS TITLE True POS PROPN pattern2 LOWER ad free POS NOUN Initialize the Matcher and add the patterns matcher Matcher nlp vocab matcher add PATTERN1 None pattern1 matcher add PATTERN2 None pattern2 Iterate over the matches for match id start end in matcher doc Print pattern string name and text of matched span print doc vocab strings match id doc start end text python import json from spacy lang en import English with open exercises countries json as f COUNTRIES json loads f read nlp English doc nlp Czech Republic may help Slovakia protect its airspace Import the PhraseMatcher and initialize it from spacy matcher import PhraseMatcher matcher PhraseMatcher nlp vocab Create pattern Doc objects and add them to the matcher This is the faster version of nlp country for country in COUNTRIES patterns list nlp pipe COUNTRIES matcher add COUNTRY None patterns Call the matcher on the test document and print the result matches matcher doc print doc start end for match id start end in matches Processing Pipelines OOB pipeline components First the tokenizer is applied to turn the string of text into a Doc object Next a series of pipeline components is applied to the Doc in order In this case the tagger then the parser then the entity recognizer Finally the processed Doc is returned so you can work with it Name Description Creates tagger Part of speech tagger Token tag parser Dependency parser Token dep Token head Doc sents Doc noun chunks ner Named entity recognizer Doc ents Token ent iob Token ent type textcat Text classifier Doc cats Because text categories are always very specific the text classifier is not included in any of the pre trained models by default But you can use it to train your own system python initialize the language add the pipeline and load in the binary model weights nlp spacy load en core web sm python doc nlp This is a sentence python list of pipeline component names print nlp pipe names output nb output tagger parser ner output python list of name component tuples print nlp pipeline output nb output tagger spacy pipeline pipes Tagger object at 0x7f4d64e3ada0 parser spacy pipeline pipes DependencyParser object at 0x7f4d4ab97108 ner spacy pipeline pipes EntityRecognizer object at 0x7f4d4ab97228 output Custom pipeline components Custom components are executed automatically when you call the nlp object on a text They re especially useful for adding your own custom metadata to documents and tokens You can also use them to update built in attributes like the named entity spans A custom component takes a doc modifies it and returns it can be added using the nlp add pipe method Custom components can only modify the Doc and can t be used to update weights of other components directly python def custom component doc last first before after Do something to the doc here return doc nlp add pipe custom component python simple component Create the nlp object nlp spacy load en core web sm Define a custom component def custom component doc Print the doc s length print Doc length len doc Return the doc object return doc Add the component first in the pipeline nlp add pipe custom component first True Print the pipeline component names print Pipeline nlp pipe names Process a text doc nlp Hello world output nb output Pipeline custom component tagger parser ner Doc length 3 output python import spacy from spacy matcher import PhraseMatcher from spacy tokens import Span nlp spacy load en core web sm animals Golden Retriever cat turtle Rattus norvegicus animal patterns list nlp pipe animals print animal patterns animal patterns matcher PhraseMatcher nlp vocab matcher add ANIMAL None animal patterns Define the custom component def animal component doc Apply the matcher to the doc matches matcher doc Create a Span for each match and assign the label ANIMAL spans Span doc start end label ANIMAL for match id start end in matches Overwrite the doc ents with the matched spans doc ents spans return doc Add the component to the pipeline after the ner component nlp add pipe animal component after ner print nlp pipe names Process the text and print the text and label for the doc ents doc nlp I have a cat and a Golden Retriever print ent text ent label for ent in doc ents output nb output animal patterns Golden Retriever cat turtle Rattus norvegicus tagger parser ner animal component cat ANIMAL Golden Retriever ANIMAL output Custom span attributes Custom attributes allow add custom metadata to documents tokens and spans accessible via the property to distinguish from built in attr registered on the global Doc Token or Span using the set extension method Attribute extensions Property extensions Method extensions python doc title My document token is color True span has color False python Import global classes from spacy tokens import Doc Token Span Set extensions on the Doc Token and Span Doc set extension title default None Token set extension is color default False Span set extension has color default False python Attribute extension from spacy tokens import Token Set extension on the Token with default value Token set extension is color default False doc nlp The sky is blue Overwrite extension attribute value doc 3 is color True python Property getter setter extension Token from spacy tokens import Token Define getter function def get is color token colors red yellow blue return token text in colors Set extension on the Token with getter Token set extension is color getter get is color force True doc nlp The sky is blue print doc 3 is color doc 3 text output nb output True blue output python Property getter setter extension Span from spacy tokens import Span Define getter function def get has color span colors red yellow blue return any token text in colors for token in span Set extension on the Span with getter Span set extension has color getter get has color doc nlp The sky is blue print doc 1 4 has color doc 1 4 text print doc 0 2 has color doc 0 2 text output nb output True sky is blue False The sky output python Method pass an argument extension from spacy tokens import Doc Define method with arguments def has token doc token text in doc token text in token text for token in doc return in doc Set extension on the Doc with method Doc set extension has token method has token doc nlp The sky is blue print doc has token blue blue print doc has token cloud cloud output nb output True blue False cloud output Scaling and performance Streaming Use nlp pipe method Processes texts as a stream yields Doc objects Much faster than calling nlp on each text python timeit docs nlp text for text in LOTS OF TEXTS bad python timeit docs list nlp pipe LOTS OF TEXTS good python this idiom is useful for associating metadata with the doc from spacy tokens import Doc Doc set extension id default None Doc set extension page number default None data This is a text id 1 page number 15 And another text id 2 page number 16 for doc context in nlp pipe data as tuples True doc id context id doc page number context page number Pipeline configuration Only run the models you need python slow doc nlp Hello world fast only runs tokenizer not all models doc nlp make doc Hello world python disable tagger and parser restores them after the with block with nlp disable pipes tagger parser Process the text and print the entities doc nlp text print doc ents Training a neural network model List of english models here https spacy io models en SpaCy supports updating existing models with more examples and training new models Update an existing model a few hundred to a few thousand examples Train a new category a few thousand to a million examples spaCy s English models 2 million words This is essential for text classification very useful for entity recognition and a little less critical for tagging and parsing Creating training data The entity recognizer predicts entities in context it also needs to be trained on entities and their surrounding context Use Matcher to quickly create training data for NER models Create a doc object for each text using nlp pipe Match on the doc and create a list of matched spans Get start character end character label tuples of matched spans Format each example as a tuple of the text and a dict mapping entities to the entity tuples Append the example to TRAINING DATA and inspect the printed data python import json from spacy matcher import Matcher from spacy lang en import English TEXTS New iPhone X release date leaked as Apple reveals pre orders by mistake nlp English matcher Matcher nlp vocab Two tokens whose lowercase forms match iphone and x pattern1 LOWER iphone LOWER x Token whose lowercase form matches iphone and an optional digit pattern2 LOWER iphone IS DIGIT True OP Add patterns to the matcher matcher add GADGET None pattern1 pattern2 python import json from spacy matcher import Matcher from spacy lang en import English with open exercises iphone json as f TEXTS json loads f read nlp English matcher Matcher nlp vocab pattern1 LOWER iphone LOWER x pattern2 LOWER iphone IS DIGIT True OP matcher add GADGET None pattern1 pattern2 TRAINING DATA Create a Doc object for each text in TEXTS for doc in nlp pipe TEXTS Match on the doc and create a list of matched spans spans doc start end for match id start end in matcher doc Get start character end character label tuples of matches entities span start char span end char GADGET for span in spans Format the matches as a doc text entities tuple training example doc text entities entities Append the example to the training data TRAINING DATA append training example print TRAINING DATA sep n Training the model Loop for a number of times Shuffle the training data Divide the data into batches Update the model for each batch Save the updated model python import spacy import random import json with open exercises gadgets json as f TRAINING DATA json loads f read nlp spacy blank en ner nlp create pipe ner nlp add pipe ner ner add label GADGET Start the training nlp begin training Loop for 10 iterations for itn in range 10 Shuffle the training data random shuffle TRAINING DATA losses Batch the examples and iterate over them for batch in spacy util minibatch TRAINING DATA size 2 texts text for text entities in batch annotations entities for text entities in batch Update the model nlp update texts annotations losses losses print losses Problems with updating if you don t provide examples of original labels then it will forget them by adjusting too much to the new data label scheme needs to be consistent and not too specific for example CLOTHING is better than ADULT CLOTHING and CHILDRENS CLOTHING You can create those additional examples by running the existing model over data and extracting the entity spans you care about You can then mix those examples in with your existing data and update the model with annotations of all labels If the decision is difficult to make based on the context the model can struggle to learn it The label scheme also needs to be consistent and not too specific You can always add a rule based system later to go from generic to specific Applications Working on customer environment Serialization refers to the process of converting an object in memory to a byte stream that can be stored on disk or sent over a network This SpaCy guide provides the latest recommendations ref https spacy io usage saving loading The DocBin class lets you efficiently serialize the information from a collection of Doc objects You can control which information is serialized by passing a list of attribute IDs and optionally also specify whether the user data is serialized The DocBin is faster and produces smaller data sizes than pickle and allows you to deserialize without executing arbitrary Python code Typical serialization python Load a larger model with vectors nlp spacy load en core web lg Compare two documents doc1 nlp I like fast food doc2 nlp I like pizza print doc1 similarity doc2 output nb output output output nb output NameError Traceback most recent call last output output nb output ipython input 3 a430716dafad in module 1 Load a larger model with vectors 2 nlp spacy load en core web lg 3 4 Compare two documents 5 doc1 nlp I like fast food output output nb output NameError name spacy is not defined output python ls tmp output nb output spacy pizza bz spacy pizza mdl output python import pickle data dict doc1 doc1 nlp nlp filename tmp spacy pizza mdl outfile open filename wb pickle dump data dict outfile outfile close output nb output output output nb output NameError Traceback most recent call last output output nb output ipython input 2 9c7a736efa99 in module 1 import pickle 2 3 data dict doc1 doc1 nlp nlp 4 filename tmp spacy pizza mdl 5 outfile open filename wb output output nb output NameError name doc1 is not defined output python infile open filename rb new dict pickle load infile infile close python new dict doc1 similarity doc2 output nb output opt conda envs beakerx lib python3 6 runpy py 193 ModelsWarning W007 The model you re using has no word vectors loaded so the result of the Doc similarity method will be based on the tagger parser and NER which may not give useful similarity judgements This may happen if you re using one of the small models e g en core web sm which don t ship with word vectors and only use context sensitive tensors You can always add your own word vectors or use one of the larger models instead if available main mod spec output output nb output 0 953127971438058 output Serialization with compression python import bz2 import pickle filename tmp spacy pizza bz sfile bz2 BZ2File smallerfile w pickle dump data dict sfile outfile close outfile bz2 BZ2File filename wb pickle dump data dict outfile protocol 2 outfile close python ls tmp output nb output spacy pizza bz spacy pizza mdl output python infile bz2 BZ2File filename rb myobj pickle load infile infile close python myobj output nb output doc1 This is a sentence nlp spacy lang en English at 0x7f4d606145c0 output python myobj doc1 similarity doc2 output nb output opt conda envs beakerx lib python3 6 runpy py 193 ModelsWarning W007 The model you re using has no word vectors loaded so the result of the Doc similarity method will be based on the tagger parser and NER which may not give useful similarity judgements This may happen if you re using one of the small models e g en core web sm which don t ship with word vectors and only use context sensitive tensors You can always add your own word vectors or use one of the larger models instead if available main mod spec output output nb output 0 953127971438058 output SpaCy method for encapsulating texts python fast method from spacy attrs import LOWER POS ENT TYPE IS ALPHA doc nlp text All strings mapped to integers for easy export to numpy np array doc to array LOWER POS ENT TYPE IS ALPHA np array doc to array POS import pickle serialized pickle dumps np array protocol 0 protocol 0 is printable ASCII deserialized array pickle loads serialized python comprehensive approach import spacy from spacy tokens import DocBin doc bin DocBin attrs LEMMA ENT IOB ENT TYPE store user data True texts Some text Lots of texts nlp spacy load en core web sm for doc in nlp pipe texts doc bin add doc bytes data doc bin to bytes to disk path python Deserialize later e g in a new process nlp spacy blank en doc bin DocBin from bytes bytes data from disk path docs list doc bin get docs nlp vocab docs list doc bin get docs nlp vocab Doc set extension my custom attr default None print doc my custom attr for doc in docs Pickle Doc to include dependencies When pickling spaCy s objects like the Doc or the EntityRecognizer keep in mind that they all require the shared Vocab which includes the string to hash mappings label schemes and optional vectors This means that their pickled representations can become very large especially if you have word vectors loaded because it won t only include the object itself but also the entire shared vocab it depends on python doc nlp This is a sentence assert len nlp vocab 0 python data doc doc nlp nlp",
        "tags": [
            "nlp",
            "spacy",
            "nltk"
        ]
    },
    {
        "uri": "/posts/blog_nlp-rank_text_with_word_vector",
        "title": "Ranking Text With Word Embeddings",
        "content": "\nI recently implemented search functionality for my Hugo site which can be seen at https imtorgdemo github io pages search The search uses lunr js an implementation of Solr While it works sufficiently the metadata used for ranking queries could be improved It would also be nice to visually locate the results by where resulting posts fit into the three data science fundamental disciplines mathematics computer science and business This narrative provides a quick solution for ranking posts by each discipline then reducing the dimensions to 3 axes in the xy plane Environment Lets setup the environment for the basic scientific and NLP work python import numpy as np import nltk import spacy nlp spacy load en core web lg doc nlp This is a sentence python len doc vector output nb output 300 output python import os import sys os chdir Data markdown os listdir output nb output blog test my first post md blog logic for math md output python os chdir home jovyan PERSONAL This is the basic metadata for each post python head Data markdown blog logic for math md output nb output title Building Math from the Ground Up date 2019 07 05 author Jason Beach categories Mathematics Logic tags nlp tag2 tag3 output PreProcessing We will use a post that focuses primarily on mathematics So we expect the ranking results to align with mathematics more than the other two fields python file path home jovyan PERSONAL Data markdown blog logic for math md with open file path r as file lines file readlines python metadata lines 1 9 python content join data 9 content content replace n python import re string pattern re compile r s w content pattern sub content python content join content split Get word assocations from website This is performed manually In the future scrape the site and get many more assocations TODO scrape the website import requests url https wordassociations net en words associated with TARGET button Search url url replace TARGET computer resp requests get url noun loc resp text find Noun resp text find Adjective python search business word assoc biz MbaEntrepreneurshipRetailEntrepreneurConsultancyStartupAccountingSectorMarketingBankingCateringGroceryInvestingWhartonEnterpriseLendingStakeholderCustomerEconomicFinanceConsumerCommerceConglomerateEconomicsBakeryInvestmentInsuranceManagementSupplierMarketplaceInvestorVentureFirmTelecomTradesmanPayrollManufacturingBrokerTransactionLumberRetailerProfitFinancingContractingSustainabilityPartnerInnovationHospitalityNetworkingAccountantExecutiveIncentivePartnershipProcurementShareholderEmployeeAssetUndergraduateIndustrialPhilanthropyEquityLiabilitySmallAdvertisingInformaticsSalesTourismRecessionLeisurePurchasingConsultantOwnerHaasAccreditationMercantileWholesaleProfitableLucrativeUnfinishedRetailThrivingRiskyConsultingCorporateMultinationalBoomingNonprofitGraduateAccreditedPhilanthropicFinancialSustainableAutomotiveBankruptUrgentDiversifyDivestInvestProsperRestructure tmp re findall A Z A Z word assoc biz words biz join tmp python search software programming word assoc cs SimulcastOptimizationDualityIntegerSynthesizerApiSynthNewscastKeyboardCwProgrammerCompilerPythonBasicKeywordAiringAffiliateSyndicationDecompositionAlgorithmJavaUhfUnixSemanticsParadigmInterfaceRecourseConstraintArrangerAutomatonFccPascalSyntaxBroadcastingBroadcastCbcNickelodeonApproximationNetworkAffiliationPbsSemanticRelaxationInstrumentationLineupHdBrandingLanguagePercussionEmmyLogicFmIdeAbcChannelTelecastDrumCableForthBbQuadraticStochasticNonlinearWeekdayFractionalOrientedLinearConvexJavaOptimalDynamicSequentialDaytimeScriptedConcurrentConstrainedPrimalConcaveImperativeGraphicalRetroProceduralAiredObjectiveFuzzyAnalogPolynomialSyndicateAirNetworkProgrammeBroadcastGeneralizeStructureRelaunchMixnuHardwareLinuxCadPackageDeveloperMacintoshVendorWorkstationUnixAutomationProgrammerAmigaEncryptionFunctionalityServerVisualizationBrowserIbmAdobeCompatibilityComputerOsComputingAtariPcApiGuiInterfaceUserGraphicsNetworkingLicenseSimulationRepositoryModelingXpMidiModemUpdateVerificationRouterCompilerToolProcessorEditingSimulatorMultimediaApplicationProviderLaptopUpgradeCpuNokia3dMetadataMicroprocessorApacheStartupPiracyAppIntelValidationSuiteOptimizationCiscoKernelModellingDocumentationGraphicHackerImplementationConsultancyVulnerabilityTcpEmailGps tmp re findall A Z A Z word assoc cs words cs join tmp python search mathematics word assoc math PhysicAlgebraMathematicCalculusMathematicianPhysicsGeometryOlympiadAstronomyHilbertTopologyGraderPolynomialManifoldProficiencyInformaticsBscTheoremAxiomEulerMathMechanicPhdGeneralizationIntegralAptitudeProfessorshipGenealogyBsChemistryTextbookStatisticEmeritusComputationSpringerLogicDescartesDoctorateScienceMechanicsCurriculumMultiplicationBachelorProfessorUndergraduateSubgroupIntegerConjectureNeumannGraduateComputingLecturerSummaBiologySubsetAstrologyFourierExamPedagogyCantorTensorPhilosophyCalculatorPermutationMatriceAlgebraicMathematicalTopologicalProjectiveProficientEuclideanArithmeticAppliedDifferentialManifoldDiscreteOrthogonalComputationalAnalyticPolynomialInvariantNumericalGeometricFiniteQuadraticStochasticGradeGeometricalStudiedSymmetricBabylonianTheoreticalDegreeAbstractTextbookEmeritusGraduate tmp re findall A Z A Z word assoc math words math join tmp python path Data markdown file path word assocation ref json words math words math cs words cs biz words biz import json with open file w as fp json dump words fp python with open file r as fp new words json load fp python math nlp words math cs nlp words cs biz nlp words biz Similarity These results use the cosine similarity between the fields and all the word embeddings of terms in the document They are not what we expect to see because math is ranked lowest despite the document using math as the primary subject We can probably do better by removing unneccessary stop words and taking the most important words in the document The most important terms can be defined using the TF IDF formula that is typical in bag of words NLP approaches We will use the sklearn library for the simple calculations python Compare two documents doc1 nlp content print doc1 similarity biz print doc1 similarity cs print doc1 similarity math output nb output 0 5729121134078637 0 6058354478834562 0 48928262314068244 output python from sklearn feature extraction text import TfidfVectorizer tfidf TfidfVectorizer min df 3 analyzer word stop words english sublinear tf True tfidf fit content split feature names tfidf get feature names def get ifidf for words text tfidf matrix tfidf transform text todense feature index tfidf matrix 0 nonzero 1 tfidf scores zip feature names i for i in feature index tfidf matrix 0 x for x in feature index return dict tfidf scores scores get ifidf for words content sorted scores k v for k v in sorted scores items key lambda item item 1 reverse True python from itertools import islice def take n iterable Return first n items of the iterable as a list return list islice iterable n The results of the choosing important words by TF IDF look much more promising These are words you would expect to be associated with formal mathematics python take 10 sorted scores items output nb output logic 0 14527847977675443 logical 0 140443796477262 form 0 13793934097017202 predicate 0 13687559493415327 use 0 1342685066335781 language 0 13265636975548645 symbols 0 13265636975548645 truth 0 13265636975548645 argument 0 13077412529085744 inference 0 13077412529085744 output There are 82 words that are most important in describing the document python len list sorted scores keys output nb output 82 output When we compare the document s most important words against the fields associations we find a much more compelling story Now Math is ranked the highest Computer science is not far behind but Business is rightfully quite different python Compare documents words join list sorted scores keys doc1 nlp words print doc1 similarity biz print doc1 similarity cs print doc1 similarity math output nb output 0 5238546677925497 0 6606328549347019 0 6888387753219556 output Visual Location We want to visually locate the document within a svg image that can be seen below This is quite unintuitive because the there are three axes within a 2D plane We must reduce the three dimensions to two img src images img datascience plain svg alt datascience width 400 There is no correct answer to this In fact there are approaches we could have taken earlier that would have completed this for us A supervised clustering approach could have ensured the three groups But we are keeping this simple and fast no modeling Instead of justifying a best solution let us find the simplest method to reduce dimensions which is NOT incorrect We can make the following assumptions While the similarity method returns cosine similarity with a range of 0 no similarity and 1 perfect similarity the similarity in writing style leads us to expect an actual range of 50 70 x dimension Computer Science and Mathematics are antagonistic to each other in a technical field perspective but on a continuous scale between the two so the two should be subtracted y dimension Business is discrete in it is addressed in the text or not We can use the generalized logistic function https en wikipedia org wiki Generalised logistic function with subtracting Computer Science from Math and say 0 is completely a CS paper while 1 is completely a Math paper We use an arbitrary B 25 to ensure a steep difference between the two python formula Y A K A C Q np exp B t 1 v set A and B with all other parameters set to 1 def general logistic Beta cs math t math cs return 1 1 np exp B t xPt general logistic 25 660 688 print xPt output nb output 0 6681877721681656 output Because the actual range is closer to 50 70 we can expect 60 to be decisive line with value greater than meaning applicability So the y axis will be 0 top and 1 bottom with the top of the Business set at 60 A similarity value lower than this number means the paper is not in this set python yPt doc1 similarity biz print yPt output nb output 0 5238546677925497 output img src images img datascience drawing png alt datascience width 400 Prototype Lets complete the prototype with some frontend work using D3js python BizPt doc1 similarity biz CsPt doc1 similarity cs MathPt doc1 similarity math xPt general logistic 25 CsPt MathPt yPt BizPt python metadata insert 4 f location xPt yPt n python metadata output nb output n title Building Math from the Ground Up n date 2019 07 05 n author Jason Beach n location 0 6693281622812353 0 5238546677925497 categories Mathematics Logic n tags nlp tag2 tag3 n n n output python combined join metadata content file path home jovyan PERSONAL Data markdown result md with open file path w as file file write combined Once the transformed data exported to markdown files it can be indexed by lunrJs The results of the search query can load both the post information and the location can be used with the svg python beakerx point xPt xPt yPt yPt python from beakerx object import beakerx javascript javascript require config paths d3 cdnjs cloudflare com ajax libs d3 4 9 1 d3 min output nb output IPython core display Javascript object output javascript javascript beakerx displayHTML this div id fdg div var point beakerx point var d3 require d3 function d3 var width 300 height 200 var svg d3 select fdg append svg attr width width attr height height attr transform translate 100 0 var node svg append circle attr class dot attr r 10 attr cx 150 attr cy 100 style fill Blue output nb output IPython core display Javascript object output Conclusion The final result of the script and D3 can be at https imtorgdemo github io pages search",
        "tags": [
            "nlp",
            "classification"
        ]
    },
    {
        "uri": "/posts/blog_nlp-regular_expressions_workflow",
        "title": "Solving Textual Problems with Regular Expressions",
        "content": "\nRegular Expressions provide an important foundation for learning systems They are useful for quick and direct approaches to solving problems without creating mounds of training data nor the infrastructure for deploying a model While they are a common programming technique and simple enough to employ they tend to be used so infrequently that you must re learn them each time you wish to apply This post summarizes the basic regex syntax strategies and workflow in hopes it will decrease the time needed to implement A few different languages are used in examples for various scenario Happy re learning Regex Basics Operators Character classes abc 123 d D matches exact character exact digit any digit any non digit s S w W matches white space non white space alphanumeric word non alphanumeric word Boundaries b B start of string end of string word boundary not word boundary Quantifiers x matches zero or multiple x x matches one or multiple x x m n matches x repeat m to n times a 4 represent aaaa x optional matches one or zero x Groups Ranges and Capture xyz x y z equals x or y or z xyz not x or y or z x z matches anyone between x and y x xyz means any character that is not x not any in group x y z xyz xy z capture group capture group and sub group Syntax patterns RegEx libraries typically provide functionality and components using similar patterns such as the following pattern encapsulate the expression that is sought using above syntax mostly language agnostic find apply a pattern directly to text and return nothing or a regex object match apply the pattern to text and return boolean whether a match or exact match exists sub substitute a pattern for a string convenience functionality Common Solution Approaches Example data We will use the following file for example data bash bash ls Data Bloomberg Chat output nb output example chat txt output We will read in and parse each line using a method similar to the following Groovy import java io InputStream new File Data Bloomberg Chat example chat txt withInputStream stream stream eachLine line println line output nb output Message 0 Message Sent 02 13 2019 08 42 15 Subject Instant Bloomberg Persistent 02 13 2019 08 42 15 User 01 has joined the room 02 19 2019 00 56 29 User 105 Says Cupiditate voluptas sunt velit Accusantium aliquid expedita excepturi quis laborum autem Quas occaecati et atque est repellat dolores Laudantium in molestiae consequatur voluptate ipsa 02 19 2019 00 55 35 User 68 has left the room output output nb output null output Walking Walking is one of the most direct approaches In the Walking method you slowly move from the left to the right of your text matching patterns along the way Your target text will everything at the end of the string Groovy import java io InputStream new File Data Bloomberg Chat example chat txt withInputStream stream stream eachLine line find beginning trgt line Message sSent s if trgt println trgt 0 1 output nb output 02 13 2019 08 42 15 output output nb output null output Bracketing The Bracketing method is taken from the similar technique used in field artillery https encyclopedia2 thefreedictionary com bracketing method to range your inteded target First pattern the string that begins just before your target text Next pattern the string that ends just after your target text Your target text will be in the middle Groovy import java io InputStream new File Data Bloomberg Chat example chat txt withInputStream stream stream eachLine line find beginning tmp1 line Message sSent s if tmp1 find end trgt tmp1 0 1 s d 2 d 2 d 2 if trgt println trgt 0 output nb output 02 13 2019 output output nb output null output Divide and conquer Here you have a few targets that you are interested in capturing Create nested capture groups within the original capture Groovy import java io InputStream new File Data Bloomberg Chat example chat txt withInputStream stream stream eachLine line trgt line d 2 S d 2 S d 4 s d 2 d 2 d 2 s if trgt println Begin line println trgt 0 2 dtv println trgt 0 3 member println trgt 0 4 content println End line output nb output Begin line 02 13 2019 08 42 15 User 01 has joined the room End line Begin line 02 19 2019 00 56 29 User 105 Says Cupiditate voluptas sunt velit Accusantium aliquid expedita excepturi quis laborum autem Quas occaecati et atque est repellat dolores Laudantium in molestiae consequatur voluptate ipsa End line Begin line 02 19 2019 00 55 35 User 68 has left the room End line output output nb output null output Parsing In this approach you want to parse all pieces of a data into their respective fields This is often used when getting semi structured data such as log files into a structured format such as a table This is an example from pyspark Groovy python METHOD 1 RegEx from pyspark sql import Row import re parts r P host S host r S indent unused r P user S user r P time time r P request request r P status 0 9 status r P size S size r P referrer referrer r P agent user agent pattern re compile r s join parts r s Z prs logs map lambda x pattern match x groupdict rows prs map lambda x Row x dfLogs rows toDF dfLogs show agent host referrer request size status time user Mozilla 5 0 comp 66 249 69 97 GET 071300 24215 514 404 24 Sep 2014 22 25 Mozilla 5 0 X11 71 19 157 174 GET error HTTP 1 1 505 404 24 Sep 2014 22 26 Mozilla 5 0 X11 71 19 157 174 GET favicon ico 1713 200 24 Sep 2014 22 26 Mozilla 5 0 X11 71 19 157 174 GET HTTP 1 1 18785 200 24 Sep 2014 22 26 Mozilla 5 0 X11 71 19 157 174 http www holden GET jobmineimg p 222 200 24 Sep 2014 22 26 Mozilla 5 0 X11 71 19 157 174 GET error78978 H 505 404 24 Sep 2014 22 26 Convenience structures Languages can have sytax conveniences to make working with regex much easier This can include making patterns part of case statements such as is done in groovy and scala and allowing for raw string input such as in groovy and python In addition programmers can make their life easier by creating specific data structures that can hold the output of target matches Language Groovy The following functionality is commonly used with groovy string pattern operator find pattern exact match operator switch case convenience functionality The pattern operator string Groovy import java util regex Pattern def pattern Gg roovy pattern class Pattern output nb output true output Groovy The slashy form of a Groovy string has a huge advantage over double or single quoted string you don t have to escape backslashes Version d d d Version d d d output nb output true output Groovy p foo p foo p foo p dollar slashy string p pattern output nb output dollar slashy string output The find operator Groovy import java util regex Matcher def matcher My code is groovier and better when I use Groovy there S er b println matcher find println matcher size 2 matcher 0 1 groovier better output nb output true true output output nb output true output Groovy if My code is groovier and better when I use Groovy there S er b At least one element matches the pattern output nb output At least one element matches the pattern output Groovy def first second My code is groovier and better when I use Groovy there S er b first groovier second better output nb output true output Groovy With grouping we get a multidimensional array def group groovy and grails ruby and rails w and w println group hasGroup println 2 group size println groovy and grails groovy grails group 0 println rails group 1 2 The exact match operator Groovy My code is groovier and better when I use Groovy there S er b no exact match only two words output nb output false output Groovy My code is groovier and better when I use Groovy there My code there exact match of beginning and end of string output nb output true output The pattern with switch case Groovy def input test switch input case d 3 The number has 3 digits break case w 4 The word has 4 letters break default Unrecognized output nb output The word has 4 letters output Language Python Reading files You can read in a file with the following file object open filename mode The mode argument has a default value of r read value if omitted The modes are r Read mode which is used when the file is only being read w Write mode which is used to edit and write new information to the file any existing files with the same name will be erased when this mode is activated a Appending mode which is used to add new data to the end of the file that is new information is automatically amended to the end r Special read and write mode which is used to handle both actions when working with a file By using the with statement you ensure proper handling of the file including closing it when work is completed Groovy python with open Data Bloomberg Chat example chat txt as file data file read print data output nb output Message 0 Message Sent 02 13 2019 08 42 15 Subject Instant Bloomberg Persistent 02 13 2019 08 42 15 User 01 has joined the room 02 19 2019 00 56 29 User 105 Says Cupiditate voluptas sunt velit Accusantium aliquid expedita excepturi quis laborum autem Quas occaecati et atque est repellat dolores Laudantium in molestiae consequatur voluptate ipsa 02 19 2019 00 55 35 User 68 has left the room output Ordinary string manipulation Before moving straight to regular expressions users should take advantage of Python s built in string manipulation functionality Bracketing textual start end anchors with simple tools can keep your code clean and readable The following is an example of adding all text as a string then using string methods and list comprehensions to select targets Groovy python with open Data Bloomberg Chat example chat txt as file data file read content data split has left the room 0 split has joined the room 1 lines content replace n split quote x strip for x in lines quote output nb output 02 19 2019 00 56 29 User 105 Says Cupiditate voluptas sunt velit Accusantium aliquid expedita excepturi quis laborum autem Quas occaecati et atque est repellat dolores Laudantium in molestiae consequatur voluptate ipsa 02 19 2019 00 55 35 User 68 output Using RegEx Regualar expressions are more powerful not only for their patterns but also because they can be compiled and used over large amounts of data Use raw strings instead of regular Python strings Raw strings begin with r some text and tell Python not to interpret backslashes and special metacharacters in the string This allows you to pass them to the regular expression engine directly An example is using r n w instead of n w Below we use the following methods from the re module re search stop with first match re findall re finditer search over entire string returns a list or iterator of all captured data re compile method to speed up processing on larger data This is especially useful with a big data framework such as Apache Spark re sub find and replace Groovy python import re regexDate re compile r Message s d with open Data Bloomberg Chat example chat txt as file data file read grp re search regexDate data group 0 print grp output nb output Message 0 output Language JavaScript w d match a string of alpha numeric characters RegExp w d constructor notation RegExp test test for a match RegExp exec returns matching results inputStr search find a match inputStr match returns an index of matches inputStr replace substitute a match with a string The flags are either appended after the regular expression in the literal notation or passed into the constructor in the normal notation g allows you to run RegExp exec multiple times to find every match in the input string until the method returns null i makes the pattern case insensitive so that it matches strings of different capitalizations m is necessary if your input string has newline characters n this flag allows the start and end metacharacter and respectively to match at the beginning and end of each line instead of at the beginning and end of the whole input string u interpret the regular expression as unicode codepoints javascript javascript var fs require fs fs readFile dirname Data Bloomberg Chat example chat txt function err data if err throw err console log data toString javascript javascript console log hi process stdout write hello process stdout write Downloading References groovy regex operators https e printstacktrace blog groovy regular expressions the definitive guide thorough cheatsheet https www cheatography com davechild cheat sheets regular expressions well designed exercises https regexone com match until a pattern https stackoverflow com questions 7124778 how to match anything up until this sequence of characters in a regular expres",
        "tags": [
            "NLP",
            "RegEx"
        ]
    },
    {
        "uri": "/posts/blog_page-todo",
        "title": "List of ToDo Posts",
        "content": "\nThis is a list of blog posts that are referenced but not yet complete List of Future Posts General Machine Learning scoring metrics model performance metrics and graphs imbalanced data feature engineering models in depth Natural Language Processing functional programming numpy nltk spaCy gensim word2vec fasttext nlp overview General Data Concepts datawarehousing infrastructure architectures serverless deployments Business and Sales pricing pyramid matching problems and solutions marketing business development sales cycle and org structure",
        "tags": [
            "blog",
            "tag2"
        ]
    },
    {
        "uri": "/posts/blog_programming_java-groovy",
        "title": "Introduction to Groovy for Data Science on the JVM",
        "content": "\nGroovy is a scripting language that compiles to the Java Virtual Machine It would be more aptly named JavaScript if that name were not already taken but it has many similarities to Python In fact some of the libraries implemented for Groovy such as TableSaw https jtablesaw github io tablesaw attempt to take it in the same Data Science direction as Python This post will provide an introduction to the Groovy language using Jupyter notebook with BeakerX and provides specific applications to Data Science It begins with a tour of the Groovy language then describes some of the most interesting features that the language provides We give a comparison to Java with some notes for making integration with Java environments easier We finish off with applications and examples in Data Science This notebook takes code and examples from this github repo https github com twosigma beakerx https github com twosigma beakerx Getting Started You can get started with Groovy in a few different ways After installing Groovy the console comes with Groovy distribution is a Java Swing application where we can write and run code interactively groovyconsole Or you can run a script directly groovy your script groovy In this post we will use Jupyter with the BeakerX JVM kernel https github com twosigma beakerx BeakerX provides a variety of languages and support transforming data structures among them This makes it ideal for learning and prototyping You can get started with BeakerX using Docker docker run p 8888 8888 beakerx beakerx Introduction Basic syntax We provide the obligatory hello world example using a simple println statement to print output to the console Groovy class Example static void main String args println Hello World Example main output nb output Hello World output output nb output null output By default Groovy includes the following libraries in your code so you don t need to explicitly import them Groovy import java lang import java util import java io import java net import groovy lang import groovy util import java math BigInteger import java math BigDecimal output nb output null output Groovy supports all Java types primitive and reference types All primitive types are auto converted to their wrapper types So int a 2 will become Integer a 2 When declaring variables we can do one of the followings Do not use any type that will create a global variable a 2 Use keyword def that will create a local variable def a 2 Use the actual type that will create a local variable of strict type Integer int a 3 When no type is used variables act like they are of type Object so they can be reassigned to different types Groovy a 2 printf s s n a getClass getName a a apple printf s s n a getClass getName a output nb output java lang Integer 2 java lang String apple output output nb output null output Running the code The code outside methods but still in a script is copied to at run to an object method So during runtime everything is inside methods In that sense this feature allows the variables declared in a method to be accessible to other methods Groovy keeps these global variables in a map like object groovy lang Binding When def is used variables act like they are of type Object so they can be reassigned to different types same as when no type is used Groovy should be used after each statement but is not necessary in beakerx cells def is a keyword used in Groovy to define an identifier def c 1 local variable d 2 global variable var with no type are global so they can be accessed across methods output nb output 2 output Groovy c error var declared with def are local so they cannot be accessed across methods output nb output groovy lang MissingPropertyException No such property c for class script1561051888331 output output nb output at this cell line 1 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner runScript GroovyCodeRunner java 94 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 59 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 32 output Groovy d this works output nb output 2 output Data types Using actual types same as Java types They follow strict typing rules just like Java So they cannot be reassigned to different types Groovy int a 2 println a a apple println a output nb output 2 output output nb output org codehaus groovy runtime typehandling GroovyCastException Cannot cast object apple with class java lang String to class int output output nb output at this cell line 3 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner runScript GroovyCodeRunner java 94 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 59 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 32 output Like def variables they are also local so they cannot be accessed across methods Groovy int e 2 void printVars println e printVars output nb output groovy lang MissingPropertyException No such property e for class script1561051968611 output output nb output at script1561051968611 printVars script1561051968611 4 output output nb output at this cell line 7 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner runScript GroovyCodeRunner java 94 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 59 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 32 output Groovy remove variables binding variables remove a binding variables remove b binding variables remove c binding variables remove d binding variables remove e output nb output null output As seen above Groovy uses Objects for everything int is printed as java lang Integer Primitives are auto converted to their wrapper type Groovy int a 2 printf s s n a getClass a getClass isPrimitive def b 2 printf s s n b getClass b getClass isPrimitive c 2 printf s s n c getClass c getClass isPrimitive double d 2 2 printf s s n d getClass d getClass isPrimitive e 2 3 no type printf s s n e getClass e getClass isPrimitive output nb output class java lang Integer false class java lang Integer false class java lang Integer false class java lang Double false class java math BigDecimal false output output nb output null output All of the variables are initialized even local with their default values just like instance variable Groovy def a initialized with null println a String s initialized with null println s int b initialized with 0 println b println b 3 boolean bool initialized with false println bool output nb output null null 0 3 false output output nb output null output Using actual types Groovy int sum int x int y x y println sum 1 3 output nb output 4 output output nb output null output Using def Groovy def sum def x def y x y println sum 1 3 output nb output 4 output output nb output null output Using no types with parameters Groovy def sum x y x y println sum 1 3 output nb output 4 output output nb output null output Methods must return def or actual type Groovy sum x y x y println sum 1 3 output nb output groovy lang MissingPropertyException No such property x for class script1561052241554 output output nb output at this cell line 1 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner runScript GroovyCodeRunner java 94 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 59 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 32 output Groovy class Example static void main String args Example of a int datatype int x 5 Example of a long datatype long y 100L Example of a floating point datatype float a 10 56f Example of a double datatype double b 10 5e40 Example of a BigInteger datatype BigInteger bi 30g Example of a BigDecimal datatype BigDecimal bd 3 5g println x println y println a println b println bi println bd Example main output nb output 5 100 10 56 1 05E41 30 3 5 output output nb output null output Features Groovy has many different features We have seen a few of these earlier but the others are mentioned here Support for both static and dynamic typing Support for operator overloading Native syntax for lists and associative arrays Native support for regular expressions Native support for various markup languages such as XML and HTML Similar syntax to Java Use of existing Java libraries Extends the java lang Object Support for regular expressions Groovy def m Groovy is groovy G g roovy println m 0 0 The first whole match i e the first word Groovy println m 0 1 The first group in the first match i e G println m 1 0 The second whole match i e the word groovy println m 1 1 The first group in the second match i e g output nb output Groovy G groovy g output output nb output null output Support for markup languages One of the most used classes for creating HTML or XML markup Groovy import groovy xml MarkupBuilder def xml new MarkupBuilder output nb output groovy xml MarkupBuilder 7500ce0e output Liberal use of closures Groovy closure example timesTwo x x 2 output nb output script1556559307332 run closure1 cad3663 output Groovy timesTwo 4 output nb output 8 output Groovy timesTwo Multiplying Strings output nb output Multiplying Strings Multiplying Strings output Groovy sin 3 1415 output nb output 9 265358966049026E 5 output Comparison of Groovy with Java Basic differences automatically a wrapping a class called Script for every program default access specifier is public getters and setters are automatically generated for class members abbreviated commands such as println semicolons and paraentheses are optional dynamic typing with the def var keyword locar var or with no prefix var global var string interpolation GString is performed with operator such as Hello firstName 0 name multi line strings are also allowed implicit truthy if 100 because 100 exists New operators conditional operators safe navigation operator checks for properties such as if company getContact getAddress getCountry Country NEW ZEALAND means If the contact or the address are null the result of the left side will just be null but no exception will be thrown ternary elvis operator def name client getName will assign client getName if it isn t false and the empty string otherwise type operators spaceship delegates to the compareTo method def x 1 2 println x calls Integer compareTo identity is tests object reference equality while checks equality with equals coercion as converts an object from one type to another using asType without assignment compatibility which is different from casting String s 1 1 BigDecimal bd s as BigDecimal println bd class name Using methods a function used in a script will be compiled to a method within an object return keyword is optional method operators method pointer stores a reference to a method in a variable def power Math pow def result power 2 4 call operator an object with a call method can be called directly class A def call println hi def a new A a closures like Java8 lambdas anonymous first class functions are often called lambda functions def power int x int y return Math pow x y println power 2 3 currying memoization Collections list and map list and map operators subscript allows to read write to collections and maps def list 2 4 println list 0 def map x 2 y 4 println map x membership in test whether value is in the target collection def numbers 2 4 6 8 println 2 in numbers spread dot invokes an action on all items of an aggregate object def lists 1 10 20 30 6 8 def sizes lists size 1 3 2 range to create ranges of objects def numbers 1 5 println numbers create an ArrayList with the given numbers def list 1 1 2 3 5 closures make it easy to iterate filter and transform lists iterate a list using a passed closure executed once for each element implicitly passed as a parameter to the closure list each println it filter a list list findAll it 2 0 transform a list list collect it it improve Hello World collect it toUpperCase using the spread dot Hello World toUpperCase Collection and Iterable interfaces provide some more methods like any or every maps act similar to lists def key Key3 def aMap Key1 Value 1 Put key1 Value 1 to the map Key2 Value 2 You can also skip the quotes the key will automatically be a String key Another value If you want the key to be the value of a variable you need to put it in parantheses Applications in Data Science Dataframes with Tablesaw Tablesaw https tablesaw tech is easy to add to the BeakerX Groovy kernel Tablesaw provides the ability to easily transform summarize and filter data as well as computing descriptive statistics and fundamental machine learning algorithms Two helpful demo notebooks scala include Recommnder System https github com IMTorgDemo IMTorgDemo Notebooks blob master demo RS WhitehawkRecommendSystem ipynb Evolution to a Data Driven System https github com IMTorgDemo IMTorgDemo Notebooks blob master demo RS WhitehawkEvolutionDataDriven ipynb Add using mvn Groovy classpath add mvn tech tablesaw tablesaw plot 0 11 4 tech tablesaw tablesaw smile 0 11 4 tech tablesaw tablesaw beakerx 0 11 4 Groovy import tech tablesaw aggregate import tech tablesaw api import tech tablesaw api ml clustering import tech tablesaw api ml regression import tech tablesaw columns display Tablesaw tables with BeakerX table display widget tech tablesaw beakerx TablesawDisplayer register output nb output null output Read csv data Groovy tornadoes Table read csv doc resources data tornadoes 2014 csv Print the dataset structure Groovy tornadoes structure Get header names Groovy tornadoes columnNames output nb output Date Time State State No Scale Injuries Fatalities Start Lat Start Lon Length Width output Displays the row and column counts Groovy tornadoes shape output nb output 908 rows X 11 cols output Displays the first n rows Groovy tornadoes first 3 Groovy import static tech tablesaw api QueryHelper column tornadoes structure selectWhere column Column Type isEqualTo FLOAT Summarize the data in each column Groovy tornadoes summary output nb output Table summary for tornadoes 2014 csv Column Date Measure Value Count 908 Missing 0 Earliest 2014 01 11 Latest 2014 12 29 Column Time Measure Value Count 908 Missing 0 Earliest 00 01 Latest 23 59 Column State Category Count GA 32 NM 15 MT 8 CO 49 WV 9 IN 28 MD 2 CA 9 AL 55 TN 18 MO 47 ME 4 LA 15 MI 13 SC 7 KY 28 MA 3 CT 1 NH 2 Column State No Measure Value n 908 0 sum 0 0 Mean 0 0 Min 0 0 Max 0 0 Range 0 0 Variance 0 0 Std Dev 0 0 Column Scale Measure Value n 908 0 sum 567 0 Mean 0 6244493 Min 0 0 Max 4 0 Range 4 0 Variance 0 6272737 Std Dev 0 79200613 Column Injuries Measure Value n 908 0 sum 684 0 Mean 0 75330395 Min 0 0 Max 193 0 Range 193 0 Variance 57 68108 Std Dev 7 594806 Column Fatalities Measure Value n 908 0 sum 48 0 Mean 0 052863438 Min 0 0 Max 16 0 Range 16 0 Variance 0 44262686 Std Dev 0 6653021 Column Start Lat Measure Value n 908 0 sum 34690 984 Mean 38 20593 Min 0 0 Max 48 86 Range 48 86 Variance 22 448586 Std Dev 4 7379937 Column Start Lon Measure Value n 908 0 sum 83613 02 Mean 92 08483 Min 122 946 Max 0 0 Range 122 946 Variance 91 84773 Std Dev 9 583722 Column Length Measure Value n 908 0 sum 3014 49 Mean 3 319923 Min 0 0 Max 45 68 Range 45 68 Variance 28 736567 Std Dev 5 3606496 Column Width Measure Value n 908 0 sum 149778 0 Mean 164 95375 Min 0 0 Max 2640 0 Range 2640 0 Variance 57764 465 Std Dev 240 34239 output Mapping operations Groovy def month tornadoes dateColumn Date month tornadoes addColumn month tornadoes columnNames output nb output Date Time State State No Scale Injuries Fatalities Start Lat Start Lon Length Width Date month output Sorting by column Groovy tornadoes sortOn Fatalities Descriptive statistics Groovy tornadoes column Fatalities summary Performing totals and sub totals Groovy def injuriesByScale tornadoes median Injuries by Scale injuriesByScale setName Median injuries by Tornado Scale injuriesByScale Cross tabulation Groovy CrossTab xCount tornadoes tornadoes categoryColumn State tornadoes shortColumn Scale Example with Tablesaw You can fetch data from Quandl https www quandl com and load it directly into Tablesaw Groovy classpath add mvn com jimmoores quandl tablesaw 2 0 0 import com jimmoores quandl import com jimmoores quandl tablesaw Groovy TableSawQuandlSession session TableSawQuandlSession create Table table session getDataSet DataSetRequest Builder of WIKI AAPL build Groovy Create a new column containing the year ShortColumn yearColumn table dateColumn Date year yearColumn setName Year table addColumn yearColumn Create max min and total volume tables aggregated by year Table summaryMax table groupBy year max Adj Close Table summaryMin table groupBy year min Adj Close Table summaryVolume table groupBy year sum Volume Create a new table from each of these summary Table create Summary summaryMax column 0 summaryMax column 1 summaryMin column 1 summaryVolume column 1 Add back a DateColumn to the summary will be used for plotting DateColumn yearDates new DateColumn YearDate for year in summary column Year yearDates append java time LocalDate of year 1 1 summary addColumn yearDates summary Groovy years summary column YearDate collect plot new TimePlot title Price Chart for AAPL xLabel Time yLabel Max Adj Close plot new YAxis label Volume plot new Points x years y summary column Max Adj Close collect plot new Line x years y summary column Max Adj Close collect color Color blue plot new Stems x years y summary column Sum Volume collect yAxis Volume Auto Translation in BeakerX Auto Translation is the act of converting a data structure in one language to another In the context of data science the obvious data structures are lists and data frames Groovy start with groovy beakerx foo a groovy value output nb output a groovy value output Groovy to javascript javascript beakerx bar 23 48 7 from JS beakerx foo Groovy back to groovy beakerx bar Groovy to python python from beakerx import beakerx beakerx foo output nb output a groovy value output Groovy to scala scala beakerx foo output nb output a groovy value output Graphing with BeakerX Both BeakerX and Tablesaw do a good job of addressing the need to visualize data Groovy rates new CSV read doc resources data interest rates csv def f new java text SimpleDateFormat yyyy MM dd lehmanDate f parse 2008 09 15 bubbleBottomDate f parse 2002 10 09 inversion1 f parse 2000 07 22 f parse 2001 02 16 inversion2 f parse 2006 08 01 f parse 2007 06 07 def size rates size 0 size each row rates it row spread row y10 row m3 OutputCell HIDDEN Groovy The simplest chart function with all defaults new SimpleTimePlot rates y1 y10 Groovy scatter plot def c new Color 120 120 120 100 new Plot new Points x rates y1 y rates y30 displayName y1 vs y30 new Points x rates m3 y rates y5 displayName m3 vs y5 new Line x rates m3 y rates y5 color c new Line x rates y1 y rates y30 color c Groovy def ch new Crosshair color Color gray width 2 style StrokeType DOT The top plot has 2 lines p1 new TimePlot yLabel Interest Rate crosshair ch p1 new Line x rates time y rates m3 displayName 3 month p1 new Line x rates time y rates y10 displayName 10 year The bottom plot has an area filled in p2 new TimePlot yLabel Spread crosshair ch p2 new Area x rates time y rates spread color new Color 120 60 0 Highlight the inversion intervals def b1 new ConstantBand x inversion1 color new Color 240 100 100 55 def b2 new ConstantBand x inversion2 color new Color 240 100 100 55 Add notation and line for Lehman Bankruptcy p1 new Text x lehmanDate y 7 5 text Lehman Brothers Bankruptcy def l1 new ConstantLine x lehmanDate style StrokeType DOT color Color gray Add notation and line for Stocks Nadir p1 new Text x bubbleBottomDate y 5 75 text Stocks Hit Bottom def l2 new ConstantLine x bubbleBottomDate style StrokeType DOT color Color gray add the notations and highlight bands to both plots p1 l1 l2 b1 b2 p2 l1 l2 b1 b2 OutputCell HIDDEN Groovy Then use a CombinedPlot to get stacked plots with linked X axis def c new CombinedPlot title US Treasuries initWidth 1000 add both plots to the combined plot and including their relative heights c add p1 3 c add p2 1 Integration with D3js Being able to prototype for the frontend is key for deliverying quickly The BeakerX integration with D3js is great for this Groovy def r new Random def nnodes 100 def nodes def links for x in 0 nnodes nodes add name x group int x 7 nnodes for x in 0 int nnodes 1 15 source x nnodes target int log 1 r nextInt nnodes log 1 3 value 10 0 1 abs source target links add source source target target value value value beakerx graph nodes nodes links links OutputCell HIDDEN javascript javascript require config paths d3 cdnjs cloudflare com ajax libs d3 4 9 1 d3 min Groovy html style node stroke fff stroke width 1 5px link stroke 999 stroke opacity 6 style html style node stroke fff stroke width 1 5px link stroke 999 stroke opacity 6 style html javascript javascript beakerx displayHTML this div id fdg div var graph beakerx graph var d3 require d3 function d3 var width 600 height 500 var color d3 scaleOrdinal d3 schemeCategory20 var simulation d3 forceSimulation force link d3 forceLink distance 30 force charge d3 forceManyBody strength 200 force center d3 forceCenter width 2 height 2 force y d3 forceY width 2 strength 0 3 force x d3 forceX height 2 strength 0 3 var svg d3 select fdg append svg attr width width attr height height attr transform translate 100 0 simulation nodes graph nodes force link links graph links var link svg selectAll link data graph links enter append line attr class link style stroke width function d return Math sqrt d value var node svg selectAll node data graph nodes enter append circle attr class node attr r 10 style fill function d return color d group node append title text function d return d name simulation on tick function link attr x1 function d return d source x attr y1 function d return d source y attr x2 function d return d target x attr y2 function d return d target y node attr cx function d return d x attr cy function d return d y node call d3 drag on start dragstarted on drag dragged on end dragended function dragstarted d if d3 event active simulation alphaTarget 0 3 restart d fx d x d fy d y function dragged d d fx d3 event x d fy d3 event y function dragended d if d3 event active simulation alphaTarget 0 d fx null d fy null References Table of keywords The following table lists the keywords which are defined in Groovy as assert break case catch class const continue def default do else enum extends false Finally for goto if implements import in instanceof interface new pull package return super switch this throw throws trait true try while Groovy but not Java as def in trait Data types Primitive data types byte represent a byte value An example is 2 short represent a short number An example is 10 int represent whole numbers An example is 1234 long represent a long number An example is 10000090 float represent 32 bit floating point numbers An example is 12 34 double represent 64 bit floating point numbers which are longer decimal numbers which may be required at times An example is 12 3456565 char defines a single character literal An example is a Boolean represents a Boolean value which can either be true or false String text literals which are represented in the form of chain of characters For example Hello World In addition to the primitive types the following object types sometimes referred to as wrapper types are allowed java lang Byte java lang Short java lang Integer java lang Long java lang Float java lang Double For arbitrary precision artithemetic java math BigInteger java math BigDecimal Online official website and documentation http groovy lang org documentation html getting started with groovy in IntelliJ https www jetbrains com help idea getting started with groovy html groovy for java developers https www timroes de groovy tutorial for java developers groovy tutorial https www guru99 com groovy tutorial html detailed groovy tutorials https www logicbig com tutorials misc groovy html",
        "tags": [
            "groovy",
            "jvm",
            "data_visualization"
        ]
    },
    {
        "uri": "/posts/blog_programming_java-modern_java",
        "title": "A Data Scientist's Guide to Modern Java(8+) and the JVM",
        "content": "\nMost data scientists avoid the Java Virtual Machine JVM like the plague The features that make developers and data engineers so productive as a team such as access modifiers and powerful IDEs feel slow old and cumbersome to individuals interacting with data and prototyping new algorithms However the JVM and its supporting system matured to an indominatble force since its inception It is ubiquitous in the most popular open source projects espectially in Big Data and distributed systems such as Hadoop and Kafka The only competitors to Java in this domain are supporting languages that compile to the JVM such as Scala Groovy and Kotlin Because of these factors the JVM culture sets precedence in a manner similar to Linux Data scientists need to understand the perspective of other engineers and the tools they use in order to progress in their careers and knowing Java is the backbone to this Another advantage to knowing java is that it exposes users to many fundamental computer science concepts This guide will provide the basics for getting familiar with Java fast as well as displaying different programming abstractions such as testing team integration and design patterns not readily available to most consulting data scientists It will also provide support for a multitude of JVM languages that while not necessary to know Java will make life much easier Culture and Precendence Because Java is such an old and popular language it has quite alot of culture and history some might say baggage built around it This culture also creates precedence which might not be enforced by a compiler but is so sacrosanct that anyone breaking the rules will quickly become a target Most of this is created around how Java found its niche as a portable language for large organizations of development teams to deliver code For individual programmers much of Java functionality will not seem necessary and even tiresome It grew up before the age serverless technology or microservices But all of that changes once it is used by teams who have to work together and in turn deliver components for a large monolith system Some general knowledge and basic conventions that help beginners modern Java begins with version Java 1 8 but is called Java8 the Java platform includes packages of functions such as java javax org omg and the most fundamental java lang package namespaces are the url of the company backwards such as com firmname classify functions directory structures are implemented from the package name so there can be alot of empty folders depending on how many suffixes you used the directory path is for src the other is for test each Java class must be in an individual file so you may have to have many files open in order to find something dependency management is performed by maven traditional xml based or gradle groovy based Naming conventions Class and Inteface names should be nouns in mixed case such as class ImageSprite Methods should be verbs and Variables should be nouns both in mixed camel case such as getBackground and float myWidth respectivly constants should be all upper case such as static final int MIN WIDTH 4 Basics Configuation and envrironment Proper development in Java demands an Integrated Development Environment IDE JetBrain s Intellij IDEA https www jetbrains com idea is one of the best However some time must be taken to become acquainted with it Gotchas Intellij creates a project folder within its own directory for each project you create You must delete a project in both places Always Import a project instead of just Opening one To get started with Intellij Import a new project Then move to the tests directory open a file and run tests by clicking on the green arrows that appear on the left side This tutorial will be created using Two Sigma s BeakerX http beakerx com JVM kernel for the Jupyter notebook So we will focus on package level code snippets before looking at a larger project BeakerX allows you to reference work among cells by creating assigning the cell to a package just as you do within a project The following code cell creates a class BeakerTest the class is then instantated in the next cell Java package test beaker import java util Date import java text SimpleDateFormat public class BeakerTest private Date date private SimpleDateFormat sdf new SimpleDateFormat yyyy MM dd T HH mmZ public BeakerTest date new Date public String getDateTxt return Today sdf format date public String getDateUpperCaseTxt return getDateTxt toUpperCase output nb output test beaker BeakerTest output Java package test beaker BeakerTest bt new BeakerTest return bt getDateTxt output nb output Today 2019 06 27T13 20 0000 output Because BeakerX is designed for data science graphs can be created by importing their Plot package Java import java util List import java util ArrayList import com twosigma beakerx chart xychart Plot import com twosigma beakerx chart xychart plotitem import com twosigma beakerx chart Color Plot p new Plot p setTitle this is a Java plot Bars b new Bars List Number yList new ArrayList Number yList add 2 yList add 5 yList add 4 yList add 8 b setY yList b setColor Color blue b setWidth 0 5 p add b return p Java package test beaker interface DateGetter public String getDateTxt output nb output test beaker DateGetter output Java package test beaker public class DG2 extends BeakerTest implements DateGetter output nb output test beaker DG2 output Core packages The following are core packages that do not require dependency tracking such as maven java lang basic language functionality and fundamental types java util collection data structure classes java io file operations java math multiprecision arithmetics java nio the Non blocking I O framework for Java java net networking operations sockets DNS lookups java security key generation encryption and decryption java sql Java Database Connectivity JDBC to access databases java awt basic hierarchy of packages for native GUI components java text Provides classes and interfaces for handling text dates numbers and messages in a manner independent of natural languages java rmi Provides the RMI package java time The main API for dates times instants and durations java beans The java beans package contains classes and interfaces related to JavaBeans components java Applet This package provides classes and methods to create and communicate with the applets The java lang package is available without the use of an import statement Popular libraries standard lang util io nio math net productivity apache commons math cli csv io guava google commons google gson testing junit mockito logging log4j slf4j application development http h2 jhipster spring hibernate orm Syntax Basic operations Java double result 2 3 4 5 System out println result String result1 Hello World System out println result1 output nb output 6 8 Hello World output output nb output null output Basic arrays Java int nums 2 5 4 9 System out println nums 0 String strings alsdj asldfj owiure System out println strings length output nb output 2 3 output output nb output null output Typical main within class Java class Programm public static void main String args Programm programm new Programm programm start public void start String test This is a test for String t test System out println t output nb output com twosigma beaker javash bkr9f024aeb Programm output Example using strings and conditionals Java package test beaker import java lang String public class Input1 public String mIfElse String args String testr if args length 3 String sArgs String join args testr Your argument is sArgs for String arg args System out println arg else testr Not many arguments for int i 0 i args length i System out println args i return testr output nb output test beaker Input1 output Java package test beaker Input1 x new Input1 String test This is a test System out println x mIfElse test String y a test System out println x mIfElse y output nb output This is a test Your argument is This is a test a test Not many arguments output output nb output null output Array actions Java package test beaker import java lang String public class ArraySum public void sum double numbers 1 1 2 2 3 3 System out println v1 Sum1 of 1 1 2 2 3 3 arraySum1 numbers System out println v2 Sum2 of 1 1 2 2 3 3 arraySum2 numbers System out println v3 Sum3 of 1 1 2 2 3 3 arraySum3 numbers public static double arraySum1 double nums double sum 0 for double num nums sum sum num Or sum num return sum public static double arraySum2 double nums double sum 0 for int i 0 i nums length i sum sum nums i return sum public static double arraySum3 double nums double sum 0 int i 0 while i nums length sum sum nums i i Or i i 1 or i 1 return sum output nb output test beaker ArraySum output Java package test beaker ArraySum x new ArraySum x sum output nb output v1 Sum1 of 1 1 2 2 3 3 6 6 v2 Sum2 of 1 1 2 2 3 3 6 6 v3 Sum3 of 1 1 2 2 3 3 6 6 output output nb output null output Declare and allocate arrays Java package test beaker public class Allocate public static void run one step int val1 1 2 3 two step int val2 new int 3 val2 0 1 val2 1 2 val2 2 3 System out println val1 0 System out println val2 0 output nb output test beaker Allocate output Java package test beaker Allocate x new Allocate x run output nb output 1 1 output output nb output null output Typical class Java package test beaker public class Circle private double radius public Circle double radius this radius radius public double getRadius return radius public void setRadius double radius this radius radius public double getArea return Math PI radius radius output nb output test beaker Circle output Allocating arrays Java package test beaker public class CircleArray public static void main String args Do something with arrays Builds an array of Circles and returns the array After allocating space for the Circles it loops down builds a Circle and puts it into the appropriate place in the array This is the correct approach public static Circle makeCircles1 int numCircles Circle circles new Circle numCircles Allocate space for int i 0 i circles length i circles i new Circle Math random 10 Put circles in the array return circles Attempts to build an array of Circles Crashes with NullPointerException since after first line there are no Circle objects just null pointers So trying to call setRadius on null crashes public static Circle makeCircles2 int numCircles Circle circles new Circle numCircles for int i 0 i circles length i circles i setRadius Math random 10 Crashes with NullPointerException return circles Attempts to build an array of Circles Fails because it never puts any Circles into the array To put something into an array you must have the index The funny SuppressWarnings entry below is something we have not yet covered It just tells Eclipse not to warn that the variable c in the loop below is never used since I already know that the code is wrong It is a bad habit to leave code in your projects that has warnings because then you get in the habit of ignoring the warnings and the vast majority of the warnings are useful If you are deliberately doing something that will result in a warning from Eclipse suppress the warnings using http help eclipse org mars index jsp topic 2Forg eclipse jdt doc user 2Ftasks 2Ftask suppress warnings htm and preferably document why you are doing things a knowingly bad way SuppressWarnings unused public static Circle makeCircles3 int numCircles Circle circles new Circle numCircles for Circle c circles c new Circle Math random 10 Fails to store c in array return circles Array still contains only null pointers output nb output test beaker CircleArray output Java package test beaker CircleArray x new CircleArray Circle y x makeCircles1 3 System out println y 0 getRadius output nb output 3 716013423654272 output output nb output null output Static methods math operations these are essentially global functions Java double rand Math random System out println rand System out println Math pow 2 3 System out println Math exp 2 30 System out println Math log 10 output nb output 0 03994823989553764 8 0 9 974182454814718 2 302585092994046 output output nb output null output Use of static import Java import static java lang Math double d1 cos Instead of Math cos double d2 sin Instead of Math sin double d3 random Instead of Math random Keywords The following is a table of all keywords Some noteworthy points regarding Java keywords const and goto are resevered words but not used true false and null are literals not keywords since Java 8 the default keyword is also used to declare default methods in interfaces since Java 10 the word var is used to declare local variables local variables type inference For backward compatibility you can still use var as variable names So var is a reserved word not keyword all keywords are in lower case all keywords are reserved words but all reserved words are not keywords Specifically Java has two reserved words goto and const which are not keywords Reserved words are those that cannot be used as identifiers class names method names varaible names etc For example class public int etc are reserved words Keywords are those words which convey some special meaning to the compiler For example the kewyord break indicates some form of branching class is used to specify a class definition all keywords java all keywords jpg Access modifiers private protected public Flow control break case continue default do else for if instanceof return switch while Package control import package Primitive types boolean byte char double float int long short Error handling assert catch finally throw throws try Enumeration enum Others super this void Unused reserved const goto Class method variable modifiers abstract class default extends final implements interface native new static strictfp synchronized transient var volatile Annotations Standard Override Deprecated SuppressWarnings Spring Generics Intermediate Java developers should also to be able to define classes or methods that support generics Using TypeVariable If you put variables in angle brackets in the class or method definition it tells Java that uses of those variables refer to types not to values It is conventional to use short names in upper case such as T R input type result type or T1 T2 type1 type2 or E element type Using Generic Types in Existing Classes Find a data structure that accepts Object s ArrayList LinkedList HashMap HashSet Stack Declare the data structure with the type s in angle brackets immediately after type name List String names new ArrayList Map String Person employees new HashMap Insert objects of the appropriate type names add Some String employees put person getEmployeeId person No typecast required on removal String firstName names get 0 Person p1 employees get a1234 diamond operator Autoboxing So you cannot actually store int double and other primitives You cannot declare the List to take primitives e g List int is illegal These data structures can only store wrapper types Integer Double etc BigO for List tbl Java BigO List png Java import java util public class RandomList public static void main String args List String entries new ArrayList double d while d Math random 0 1 entries add Value d for String entry entries System out println entry output nb output com twosigma beaker javash bkr9f024aeb RandomList output Java This says that the best method takes a List of T s and returns a T The T at the beginning means T is not a real type but a type that Java will figure out from the method call public static T T methodname List T entries Java package generics beaker import java util Random public class RandomUtils private static Random r new Random Return a random int from 0 to range 1 So randomInt 4 returns any of 0 1 2 or 3 public static int randomInt int range return r nextInt range Return a random index of an array public static int randomIndex Object array return randomInt array length Return a random element from an array Uses generics so no typecast is required for the return value public static T T randomElement T array return array randomIndex array T In rest of method T refers to a type Java will figure out what type T is by looking at the parameters of the method call Even if there is an existing class actually called T it is irrelevant here T and T This says that the method takes in an array of T s and returns a T For example if you pass in an array of Strings you get out a String if you pass in an array of Employees you get out an Employee No typecasts required in any of the cases output nb output generics beaker RandomUtils output Java package generics beaker import java util Random import java util RandomUtils r new RandomUtils String arr new String 3 arr 0 one arr 1 two arr 2 three System out println r randomElement arr String names Joe John Jane String name r randomElement names System out println name Integer nums 1 2 3 4 int num r randomElement nums System out println num output nb output one John 3 output output nb output null output Java package generics beaker import java util public class Cprint public static T T mPrint List T lArg for T item lArg System out println item return lArg get 0 wierd seems like it should have to return something static T void mDisplay List T lArg for T item lArg System out println item output nb output generics beaker Cprint output Java WTF package generics beaker import java util Cprint inst new Cprint List String lArg new ArrayList lArg add one lArg add two lArg add three inst mPrint lArg System out println inst mDisplay lArg output nb output cannot find symbol output output nb output symbol class Cprint output output nb output location class generics beaker BeakerWrapperClass1261714175Id08595fc76c1a46ebbef0e11cd0c086e8 output output nb output Cprint inst new Cprint output output nb output output output nb output output output nb output cannot find symbol output output nb output symbol class Cprint output output nb output location class generics beaker BeakerWrapperClass1261714175Id08595fc76c1a46ebbef0e11cd0c086e8 output output nb output Cprint inst new Cprint output output nb output output Java Class We use to specify Parameter type class Test T An object of type T is declared T obj Test T obj this obj obj constructor public T getObject return this obj Driver class to test above class Main public static void main String args instance of Integer type Test Integer iObj new Test Integer 15 System out println iObj getObject instance of String type Test String sObj new Test String GeeksForGeeks System out println sObj getObject output nb output com twosigma beaker javash bkr9f024aeb Test output Java yeah I could spend some time one this Methods Methods pass by value ref http www javadude com articles passbyvalue htm discussion https stackoverflow com questions 40480 is java pass by reference or pass by value Pass by value The actual parameter or argument expression is fully evaluated and the resulting value is copied into a location being used to hold the formal parameter s value during method function execution That location is typically a chunk of memory on the runtime stack for the application which is how Java handles it but other languages could choose parameter storage differently Pass by reference The formal parameter merely acts as an alias for the actual parameter Anytime the method function uses the formal parameter for reading or writing it is actually using the actual parameter Autoboxing Java import java util public class Autoboxing public static void main String args List Integer nums new ArrayList int values 2 4 6 for int value values nums add value System out println List nums int secondNum nums get 1 System out println Second number secondNum output nb output com twosigma beaker javash bkr9f024aeb Autoboxing output Java Java program to illustrate autoboxing import java io import java util class GFG public static void main String args Here we are creating a list of elements of Integer type adding the int primitives type values List Integer list new ArrayList Integer for int i 0 i 10 i list add i output nb output com twosigma beaker javash bkr9f024aeb GFG output Java Java program to illustrate autoboxing import java io import java util class GFG public static void main String args Here we are creating a list of elements of Integer type Adding the int primitives type values by converting them into Integer wrapper Object List Integer list new ArrayList Integer for int i 0 i 10 i list add Integer valueOf i output nb output com twosigma beaker javash bkr9f024aeb GFG output Java Another example of auto and unboxing is to find sum of odd numbers in a list Important point in the program is that the operators remainder and unary plus operators do not apply to Integer objects But still code compiles successfully because the unboxing of Integer Object to primitive int value is taking place by invoking intValue method at runtime Java program to illustrate find sum of odd numbers using autobxing and unboxing import java io import java util class GFG public static int sumOfOddNumber List Integer list int sum 0 for Integer i list unboxing of i automatically if i 2 0 sum i unboxing of i is done automatically using intvalue implicitly if i intValue 2 0 sum i intValue return sum public static void main String args Here we are creating a list of elements of Integer type and adding the int primitives type values to the list List Integer list new ArrayList Integer for int i 0 i 10 i list add i getting sum of all odd no in the list int sumOdd sumOfOddNumber list System out println Sum of odd numbers sumOdd output nb output com twosigma beaker javash bkr9f024aeb GFG output Collections Java package test beaker You say List the interface type instead of ArrayList the concrete class here so that you do not accidentally use one of the few methods that is specific to ArrayList That way if you decide to change to LinkedList for performance reasons all the rest of your code stays the same and the output is unchanged And of course if you make a method that accepts a list it is doubly important that you declare the parameter as List Blah not ArrayList Blah so that the same method can also be used for another type of List import java util List String myArr new ArrayList List String myLink new LinkedList myArr add new item myArr add 0 first new item myArr add another item myArr add last item builtin toString method that shows the List values separated by commas System out println myArr System out println myArr get 1 output nb output first new item new item another item last item new item output output nb output null output Java package test beaker import java util import java util List import java util stream Collectors List String myArr new ArrayList myArr add new item myArr add 0 first new item myArr add another item myArr add last item for String item myArr System out println item System out println n myArr forEach System out println System out println n List String result myArr stream convert list to stream filter line last item equals line we dont like mkyong collect Collectors toList collect the output and convert streams to a List System out println result output nb output first new item new item another item last item first new item new item another item last item first new item new item another item output output nb output null output List methods Java import java util List String words new ArrayList List String words new LinkedList List String wordList1 Arrays asList word1 word2 asList not used in production words add hi words add hello words add hola System out println List words System out println Num words words size String secondWord words get 1 System out println 2nd word secondWord System out println Contains hi words contains hi System out println Contains bye words contains bye words remove hello System out println List words System out println Num words words size output nb output List hi hello hola Num words 3 2nd word hello Contains hi true Contains bye false List hi hola Num words 2 output output nb output null output Java lambda import java util List String words new ArrayList or new LinkedList words add hi words add hello words add hola System out println List words words sort word1 word2 word1 length word2 length System out println List words words replaceAll word word toUpperCase System out println List words words removeIf word word contains E System out println List words words forEach word System out println Word word String wordArray words toArray new String 0 for String word wordArray System out println Word word output nb output List hi hello hola List hi hola hello List HI HOLA HELLO List HI HOLA Word HI Word HOLA Word HI Word HOLA output output nb output null output Java maps hashmaps lookup tables or associative arrays import java util Map String Double map new HashMap map put one 1 0 Double result map get one System out println result output nb output 1 0 output output nb output null output hashmap performance Inserting a value associated with a key Independent of the number of entries in the table i e O 1 Finding the value associated with a key Independent of the number of entries in the table i e O 1 Finding the key associated with a value Requires you to look at every entry i e O N Java package map beaker import java util public class StateMap private static String stateArray AK Alaska AL Arizona AR Arkansas private static Map String String stateMap new HashMap static for String state stateArray stateMap put state 0 state 1 public static String statename String stateCode return stateMap getOrDefault stateCode None output nb output map beaker StateMap output Java package map beaker import java util StateMap x new StateMap String result x statename AK System out println result new hashmap Map String Integer stateMap new HashMap stateMap put one 1 stateMap put two 2 stateMap put three 3 System out println stateMap keySet System out println stateMap values System out println stateMap size stateMap forEach k v System out printf s s n k v stateMap computeIfAbsent four f map merge key message String concat output nb output Alaska one two three 1 2 3 3 one 1 two 2 three 3 output output nb output null output Java set Similar to a Map where the values corresponding to each key are just boolean true import java util Set String set new HashSet set add one set add two set add two System out println set contains two System out println set contains three output nb output true false output output nb output null output printf System out printf s s and s n v1 v2 v3 Java variable arguments Type argument public class MathUtils public static int min int numbers int minimum Integer MAX VALUE for int number numbers if number minimum minimum number return minimum public static void main String args System out printf Min of 2 nums d n min 2 1 System out printf Min of 7 nums d n min 2 4 6 8 1 2 3 output nb output com twosigma beaker javash bkr9f024aeb MathUtils output Java String immutable performance O N 2 i copied result ii allocate a new String object iii assign that new object to result public static String padChars1 int n String orig String result for int i 0 i n i result result orig return result Java StringBuilder mutable performance O N public static String padChars2 int n String orig StringBuilder result new StringBuilder for int i 0 i n i result result append orig return result toString Object Oriented Programming Thinking like a developer OOP for modeling the world Difficulties when working in a team Getters and setters Access modifiers access modifiers https www geeksforgeeks org access modifiers java general modifiers https dzone com articles all about java modifier Once you learn about private your strategy is this If you want code that uses your class to access the method make it public If your method is called only by other met hods in the same class make it private Make it private unless you have a specific reason to do otherwise access modifiers java access modifiers png Default Java Java program to illustrate default modifier package p1 beaker Class Geeks is having Default access modifier class Geek void display System out println Hello World output nb output p1 beaker Geek output Java Java program to illustrate error while using class from different package with default modifier package p2 beaker import p1 This class is having default access modifier class GeekNew public static void main String args accessing class Geek from package p1 Geeks obj new Geek obj display output nb output ERROR java lang IllegalStateException package p1 does not exist output output nb output import p1 output output nb output output output nb output output output nb output cannot find symbol output output nb output symbol class Geeks output output nb output location class p2 beaker GeekNew output output nb output Geeks obj new Geek output output nb output output output nb output output output nb output cannot find symbol output output nb output symbol class Geek output output nb output location class p2 beaker GeekNew output output nb output Geeks obj new Geek output output nb output output Private Java Java program to illustrate error while using class from different package with private modifier package p1 beaker class A private void display System out println GeeksforGeeks class B public static void main String args A obj new A trying to access private method of another class obj display output nb output ERROR java lang IllegalStateException display has private access in p1 beaker A output output nb output obj display output output nb output output Protected Java Java program to illustrate protected modifier package p1 beaker Class A public class A protected void display System out println GeeksforGeeks output nb output p1 beaker A output Java Java program to illustrate protected modifier package p2 beaker import p1 importing all classes in package p1 Class B is subclass of A class B extends A public static void main String args B obj new B obj display output nb output ERROR java lang IllegalStateException package p1 does not exist output output nb output import p1 output output nb output output output nb output output output nb output cannot find symbol output output nb output symbol class A output output nb output class B extends A output output nb output output output nb output output output nb output cannot find symbol output output nb output symbol method display output output nb output location variable obj of type p2 beaker B output output nb output obj display output output nb output output Public Java Java program to illustrate public modifier package p1 beaker public class A public void display System out println GeeksforGeeks output nb output p1 beaker A output Java package p1 beaker should work with the below package p2 beaker import p1 beaker class B public static void main String args A obj new A obj display output nb output p1 beaker B output Java Static Blocks Code that runs when class is loaded not when instance is built as with constructor Used to initialize static variables that require multiple steps to build their values import java util public class Blah private static Map String String map new HashMap static map put key1 value1 map put key2 value2 output nb output com twosigma beaker javash bkr9f024aeb Blah output Abstract and Interface Interfaces are more flexible because a class can implement multiple interfaces Since Java does not have multiple inheritance using abstract classes prevents your users from using any other class hierarchy In general prefer interfaces when there are no default implementations or state Java collections offer good examples of this Map Set etc Abstract classes have the advantage of allowing better forward compatibility Once clients use an interface you cannot change it if they use an abstract class you can still add behavior without breaking existing code If compatibility is a concern consider using abstract classes Even if you do have default implementations or internal state consider offering an interface and an abstract implementation of it This will assist clients but still allow them greater freedom if desired Interfaces Enforces behavior Like abstract classes guarantees classes have certain methods More flexibility that abstract classes Classes can implement multiple interfaces You cannot directly extend multiple abstract classes New features in Java 8 interfaces Interfaces can have static methods Example shown on upcoming slides in this section Interfaces can have concrete default methods Example and more details in later section on Java 8 interfaces Restriction Even in Java 8 interfaces cannot have mutable modifiable instance variables Java package shape3 beaker Represents the parent of all shapes that have a getArea method This using an interface is the third attempt at a design that will support making a static method to sum the areas of a mixed set of shapes This approach is better than the second approach using an abstract class in two ways because classes can implement more than one interface and because with static methods in interfaces Java enforces that you call them via InterfaceName staticMethodName whereas with static methods in abstract classes it is possible to call them via instanceName staticMethodName which misleads readers of the code into thinking that they are normal instance methods instead of static methods General rule in Java 8 and later use interfaces instead of abstract classes except for the relatively rare case where you need to define instance variables in the abstract class public interface Shape double getArea All real shapes must define a getArea static double sumAreas Shape shapes double sum 0 for Shape s shapes sum sum s getArea return sum output nb output shape3 beaker Shape output Java package shape3 beaker Represents a simplistic Circle Used to illustrate encapsulation private instance vars JavaDoc these comments and inheritance extending Shape so that we can make an array of mixed shapes and sum their areas public class Circle implements Shape private double radius Builds a Circle with the given radius public Circle double radius this radius radius Returns the current radius public double getRadius return radius Sets the current radius public void setRadius double radius this radius radius Calculates the area from the radius Override public double getArea return Math PI radius radius Indirectly sets the area by working backward to the radius The resultant area may not be EXACTLY what you set due to roundoff error when working with doubles public void setArea double area radius Math sqrt area Math PI output nb output shape3 beaker Circle output Java package shape3 beaker Represents a simplistic Rectangle Also see the Square subclass p From a href http courses coreservlets com Course Materials the coreservlets com tutorials on JSF 2 PrimeFaces Ajax jQuery GWT Android Spring Hibernate JPA RESTful Web Services Hadoop servlets JSP and Java 7 and Java 8 programming a public class Rectangle implements Shape private double width height public Rectangle double width double height this width width this height height public double getWidth return width public void setWidth double width this width width public double getHeight return height public void setHeight double height this height height Override public double getArea return width height output nb output shape3 beaker Rectangle output Java package shape3 beaker Tests using mixed Shape types and the static sumAreas method p From a href http courses coreservlets com Course Materials the coreservlets com tutorials on JSF 2 PrimeFaces Ajax jQuery GWT Android Spring Hibernate JPA RESTful Web Services Hadoop servlets JSP and Java 7 and Java 8 programming a public class ShapeTest public static void main String args Shape shapes new Circle 10 Area is about 314 159 new Rectangle 5 10 Area is 50 System out println Sum of areas Shape sumAreas shapes Area is about 464 159 output nb output shape3 beaker ShapeTest output Java package enums1 beaker public class DayTest public enum Day SUNDAY MONDAY TUESDAY WEDNESDAY THURSDAY FRIDAY SATURDAY public static boolean isWeekend Day d return d Day SATURDAY d Day SUNDAY public static void main String args System out println Monday is weekend isWeekend Day MONDAY System out println Saturday is weekend isWeekend Day SATURDAY output nb output enums1 beaker DayTest output Java package enums1 beaker public class DayTest public enum Day typical usage SUNDAY Sun MONDAY Mon TUESDAY Tues WEDNESDAY Wed THURSDAY Thurs FRIDAY Fri SATURDAY Sat private String abbreviation private Day String abbreviation this abbreviation abbreviation public String getAbbreviation return abbreviation public boolean isWeekend return this SATURDAY this SUNDAY public boolean isWeekday return isWeekend public static void main String args Day day1 Day MONDAY System out println day1 toString is automatic with enums System out println day1 getAbbreviation is weekend day1 isWeekend Day day2 Day SATURDAY System out println day2 getAbbreviation is weekend day2 isWeekend output nb output enums1 beaker DayTest output Final keyword final keyword java final keyword jpg Static keyword static keyword java static keyword png Advanced Concepts Design patterns Testing reference http www vogella com tutorials JUnit article html driven development Conclusion References Tables External snippet tutorials http www mkyong com tutorials java 8 tutorials snippet tutorials https www codejava net java core the java language java keywords baeldong in depth explanations https www baeldung com java tutorial geeks for geeks all questions answered https www geeksforgeeks org interfaces in java java collections http www baeldung com java collections collections maps https github com winterbe java8 tutorial maps google guava https github com google guava wiki",
        "tags": [
            "jvm",
            "tag2",
            "tag3"
        ]
    },
    {
        "uri": "/posts/blog_programming_py-distributing_code",
        "title": "Distributing Code in Python",
        "content": "\nDistributing and deploying products is a necessary step in the solution development process and an imperative in business Each solution must be thoughtfully analyzed for strengths and weaknesses especially from the perspective of security The decisons you make are largely based on the language employed to create the solution This post will describe steps taken in distributing a Python solution Introduction to Bytecode Simple python scripts are a terrific approach to getting work done quickly However in more professional environments the ease of use can make distribution tricky Python is a bytecode interpreted language so that it is disseminated as scripts Compilation is unique to the machine that runs the code Providing users with the bytecode pyc is possible but must be run by the python interpreter on the same version of virutal machine Compiled Python bytecode files are architecture independent but VM dependent A pyc file will only work on a specific set of Python versions determined by the magic number stored in the file using the following python python V output nb output Python 3 7 3 output python testfile py import imp magic num imp get magic print magic num print magic num hex output nb output b B r r n 420d0d0a output python python testfile py output nb output testfile py 1 DeprecationWarning the imp module is deprecated in favour of importlib see the module s documentation for alternative uses import imp b B r r n 420d0d0a output python python m py compile testfile py python ls pycache output nb output testfile cpython 37 pyc output python python f open pycache testfile cpython 37 pyc magic f read 4 read first n characters magic encode hex output b3f20d0a not compatible Bytecode is architecture platform independent so bytecodes compiled by a compiler running in windows will still run in linux unix mac Machine code is platform specific if it is compiled in windows x86 it will run ONLY in windows x86 This is different from other popular languages such as Java which is compiled to a Java Archive jar file then run using the Java Virtual Machine jvm That was the original popularity of java it was a portable language All you needed was the correct JVM Bytecodes are the machine language of the Java Virtual Machine JVM When a JVM loads a class file it gets one stream of bytecodes for each method in the class The bytecodes streams are stored in the method area of the JVM The bytecodes for a method are executed when that method is invoked during the course of running the program They can be executed by intepretation just in time compiling or any other technique that was chosen by the designer of a particular JVM A method s bytecode stream is a sequence of instructions for the JVM Each instruction consists of a one byte opcode followed by zero or more operands The opcode indicates the action to take If more information is required before the JVM can take the action that information is encoded into one or more operands that immediately follow the opcode Distribution Methods The typical method of disseminating Python solutions is to maintain sourece code in a repository such as Github then package and upload the solution distributions sdist bdist wheel to PyPi the Python Package Index https pypi org PyPi allows projects and dependencies to be imported with a simple pip install package What s more the packaging process is quite a bit easier than that of more demanding communities such as R libraries Comprehensive R Archive Network CRAN https cran r project org This comes at a cost in that PyPi is known to have had imposters viruses to popular packages which may have one character different than the actual desired package So some care should be taken Some terminology file containing random python code module usually a single python script name py use with import my module package a module with other modules and other packages included use with from big package import specific function The egg and wheel are install artifacts that don t require building or compilation The Egg format was introduced by setuptools in 2004 whereas the Wheel format was introduced by PEP 427 in 2012 Wheel is currently considered the standard for built and binary packaging for Python egg egg deprecated built distribution setup py python file which tells system it has been packaged and distributed using Distutils to create sdist or bdist source distribution sdist archive an archive that can then be used to recompile everything on any OS platform contains py files or c cpp for binary modules and setup py binary distribution bdist wheel whl a built distribution that is specific to OS platform and Python version but can be installed and then used directly by extracting it includes pyc files python bytecode so dll dylib for binary modules but does not include setup py wheel a package format designed to ship built libraries pyc with compiled artifacts such as from C C Rust etc In contrast to the source archive the wheel includes any extensions ready to use executable exe binary file that includes both the built code with the python interpreter in a self contained distribution While providing the source code is preferred when working in a collaborative environment it is not ideal when distributing to end users who are uninterested in the internals In addition providing source code might present security concerns especially if the python developer is trying to create a closed source product Source code obfuscators exist but this approach was an after thought in python s development Typically operating systems provide a format for an executable Python can be create an executable by building with the Python interpreter through the process of freezing There are many approaches to freezing Packaging Now that we know the different types of distributions let s package a wheel for use We will use this boilerplate repo https github com IMTorgDemo Boilerplate Python as an example Build with the following command and the archive will appear in dist folder python venv pip wheel w dist verbose Perhaps you want to build your distribution for a specific environment Python version or over many combinations of the two The dockcross https github com dockcross dockcross project allows you to do this by building your distribution from different docker images python create dockcross manylinux bash driver script docker run rm dockcross manylinux x64 dockcross manylinux x64 chmod x dockcross manylinux x64 build a distributable Python 2 7 Python wheel dockcross manylinux x64 opt python cp27 cp27m bin pip wheel w dist Once you have your specific distribution move it to the target environment and install python pip install Or instead of installing simply use directly from the working directory unzip sample 0 1 0 py2 none any whl pwd python python import sys python sys path append pwd python import sample Conclusion This post prepares users with some of the basic terminology to understand different approaches to distributing Python code It also provides a small opinionated example for effectivly building a wheel and installing it on the target machine There are many choices in distributing Python code and the process is still evolving Users should consult a variety of sources to better understand the latest fashions and pertinent details References nice discussion on packaging https python packaging tutorial readthedocs io en latest setup py html distributing a package https packaging python org guides distributing packages using setuptools",
        "tags": [
            "python",
            "setuptools",
            "pip",
            "deployment"
        ]
    },
    {
        "uri": "/posts/blog_programming_py-pipenv_virtualenv",
        "title": "A Cheatsheet for Python's Pipenv",
        "content": "\nPython s Pipenv and Pyenv make a strong team for creating a consistent development environment for exact specifications Pyenv allows you to choose from any Python version for your project Pipenv attempts to improve upon the original virtual environment venv and requirements txt file It does some things well including integration of virtual environment with dependecy management and is straight forward to use Unfortunately it doesn t always live up to the originally planned ambitious goals This cheatsheet provides commands for functionality that works and some work arounds when it doesn t Getting Started Pyenv takes care of the python binary and all related tools It stores everything under PYENV ROOT Pipenv takes care of calculating the complete set of dependencies in installation mode telling virtualenv and pip where to install the dependencies in runtime mode making available an environment with the right version of the Python interpreter via pyenv and the right set of packages via virtualenv Note Pipenv can interact with setup py but it is easy to confuse Pipenv functionality with that for package distribution and installation The two are separate and packaging is out of scope for Pipenv Pipenv creates a directory that maintains your dependencies From the repo listed functionality it has interesting interaction with existing technology Enables truly deterministic builds while easily specifying only what you want Generates and checks file hashes for locked dependencies Automatically install required Pythons if pyenv is available Automatically finds your project home recursively by looking for a Pipfile Automatically generates a Pipfile if one doesn t exist Automatically creates a virtualenv in a standard location Automatically adds removes packages to a Pipfile when they are un installed Automatically loads env files if they exist You may hear some harping over non deterministic builds This is because Python s requirement txt file does not dependency resolution of required modules sub dependency resolution at least not well This can cause big problems during automated deployments Pipenv solves these problems with Pipfile which is meant to replace requirements txt and the Pipfile lock which enables deterministic builds Pipenv uses pip and virtualenv under the hood but simplifies their usage with a single command line interface Prepare Python Pyenv is about ensuring your have the correct python interpreter This is similar to Node Version Manager NVM for Javascript Install pyenv python brew uninstall pyenv Install Python version python pyenv install version such as 3 7 2 Available versions python pyenv install list Change global local dir versions python pyenv global version such as 3 6 6 python pyenv local version such as 3 6 6 Prepare Development Environment Pipenv creates all your virtual environments in a default location If you want to change Pipenv s default behavior there are some environmental variables for configuration https docs pipenv org advanced configuration with environment variables Install pipenv python pip3 install pipenv Initiate directory python mkdir project cd project pipenv three or two Develop from existing repo When an exact version isn t specified in the Pipfile the install command gives the opportunity for dependencies and sub dependencies to update their versions python pipenv install dev Activate python pipenv shell Locate Virtualenv python pipenv where output project home information python pipenv venv output virtualenv information python whereis python Check python version python python version Check path python python import sys sys executable quit Run with pipenv python pipenv run command such as python manage py runserver Add scripts to Pipfile Pipfile scripts server python manage py runserver And run with the following python pipenv run server Managing Dependencies Pipenv generates the file Pipfile lock which is used to produce deterministic builds Issues can occur with Pipfile lock so it is sometimes prudent to create a requirements txt file from your Pipenv as a backup You specify the locations similarly to how you d do so with pip For example to install the requests library from version control do the following Note the e argument above to make the installation editable this is required for Pipenv to do sub dependency resolution Install from VCS python pipenv install e git https github com requests requests git egg requests Install from requirements txt python pipenv install r requirements txt Check local packages python pipenv lock r Create requirements txt You may want to generate requirements txt file from existing Pipfile lock without locking When you run pipenv lock r it ignores existing Pipfile lock and does locking process again There are issues around running this that are documented in this github issue https github com pypa pipenv issues 3493 python pipenv run pip freeze requirements txt Another approach is to use python pipenv lock keep outdated d r requirements txt Install and uninstall a package python pipenv install module such as camelcase python pipenv uninstall module such as camelcase python pipenv uninstall module pipenv uninstall all pipenv uninstall all dev python pipenv install module dev only for development such as nose Check dependency graph If there are conflicting dependencies package a needs package c 1 0 but package b needs package c 1 0 Pipenv will not be able to create a lock file and wil output an error like the following Warning Your dependencies could not be resolved You likely have a mismatch in your sub dependencies You can use pipenv install skip lock to bypass this mechanism then run pipenv graph to inspect the situation Could not find a version that matches package c 1 0 package c 1 0 As the warning says you can also show a dependency graph to understand your top level dependencies and their sub dependencies This command will print out a tree like structure showing your dependencies python pipenv graph pipenv graph reverse You can reverse reverse the tree to show the sub dependencies with the parent that requires it Ignore pipfile python pipenv install ignore pipfile Prepare Deployment Let s say you ve got everything working in your local development environment and you re ready to push it to production To do that you need to lock your environment so you can ensure you have the same one in production This will create update your Pipfile lock which you ll never need to and are never meant to edit manually You should always use the generated file Set lockfile before deployment python pipenv lock Production deployment Now once you get your code and Pipfile lock in your production environment you should install the last successful environment recorded This tells Pipenv to ignore the Pipfile for installation and use what s in the Pipfile lock Given this Pipfile lock Pipenv will create the exact same environment you had when you ran pipenv lock sub dependencies and all The lock file enables deterministic builds by taking a snapshot of all the versions of packages in an environment similar to the result of a pip freeze python pipenv install ignore pipfile Env variables Pipenv supports the automatic loading of environmental variables when a env file exists in the top level directory That way when you pipenv shell to open the virtual environment it loads your environmental variables from the file The env file just contains key value pairs env SOME ENV CONFIG some value SOME OTHER ENV CONFIG some other value Check security vulnerabilities Check for security vulnerabilities and PEP 508 requirements in your environment python pipenv check Package Distribution and Installation How does Pipenv work with setup py files There are a lot of nuances to that question First a setup py file is necessary when you re using setuptools as your build distribution system This has been the de facto standard for a while now but recent changes have made the use of setuptools optional Remember Pipenv can help in distribution but that is not within project scope Install module s into virtual environment python pipenv install e Install module onto machine python pip install Wrapping Up Exiting the virtualenv python exit Remove the virtualenv python pipenv rm",
        "tags": [
            "python",
            "pipenv",
            "virtual_environment"
        ]
    },
    {
        "uri": "/posts/blog_programming_python-develop_and_deploy",
        "title": "Working through a Progressive Python Application",
        "content": "\nThis post walks the developer through a python application as it progresses in development It uses linux docker vscode pyenv pipenv and other tools for developing building and deploying an application Environment Two tools can help you setup your local development environment pyenv and pipenv Pyenv is good for getting the correct python version Pipenv is quite good at setting your virtual environment so that your versions of python and dependencies are separate from your actual machine It is the next best thing to a docker container bash bash pyenv install 3 7 0 pyenv local 3 7 0 pipenv three pipenv install module pipenv shell Not to get ahead of ourselves but when you want to install your package to your machine bash bash pip3 install Local VSCode doc python https code visualstudio com docs python python tutorial Interpreter Python is an interpreted language and in order to run Python code and get Python IntelliSense you must tell VS Code which interpreter to use bash bash pipenv where pipenv venv Within the UI View CommandPallete Python Select Interpretor bash settings json python pythonPath path to venv Debugger Linting is done with PyLint https www pylint org Linting runs automatically when you save a file PyLint messages fall into specific categories https code visualstudio com docs python linting pylint Within the UI View CommandPallete Python Enable Linting bash settings json python linting enabled true Debugger uses the Run button in the left side pane There are two standard configurations that run the active file in the editor in either the integratedTerminal inside VS Code or the externalTerminal outside of VS Code The pythonPath configuration defaults to the interpreter identified in the python pythonPath setting which is equivalent to using the value config python pythonPath Within the UI open the entrypoint file Run Debug Configuration Python File launch json is created Provide specific startup file and arguments bash launch json name Python startup py request launch program workspaceFolder startup py args port 1593 In the upper left corner of Debugger select the correct configuration Name and Run Remote VSCode doc remote https code visualstudio com docs remote remote overview Jupyter notebook TODO notebook Remote server TODO remote Docker container https code visualstudio com docs remote containers Spark remote server TODO spark Configure Env Variables Environment variables can be loaded within VSCode or using a module Logging Testing doc vscode python testing https code visualstudio com docs python testing Development Commandline arguments Some important commandline arguments are subcommands and choices Subcommands are implicitly mutually exclusive In this example there are only two ways the main command can be run using generate text or check annotations The defaults allow for setting an associated function with the subcommand parser argparse ArgumentParser subparsers parser add subparsers add gen subparsers add parser generate text add gen set defaults func run add check subparsers add parser check annotations add check set defaults func check annotations Choices ensure the user has only a finite selection from which to choose The default is only used in conjunction with nargs parser argparse ArgumentParser subparsers parser add subparsers add gen subparsers add parser generate text add gen set defaults func run add gen add argument output choices drsc prep mgen help desired output format check io rsc to see formats nargs default drsc prep Comments and documentation Create docstrings like python docstrings for purpose parameters return values exceptions Directory structure Some languages such as Java and C require an implementation to be forced into a particular structure That is unfortunate because not every nail requires an enterprise ready hammer Python is different in that it allows for very flexible file arrangement and folder structure Python can be used as just a simple linear script script py Deployment Build egg bash bash MANIFEST in include hugo2lunr data word association ref json setup py package data hugo2lunr data word association ref json rm rf build egg info python3 setup py install force pip3 install hugo2lunr test input test output input dir and output dir Build bdist wheel whl Building a wheel bdist wheel and installing as commandline utility If you are building a wheel bdist wheel then include package data and MANIFEST in are ignored and you must use package data and data files bash bash setup py data files hugo2lunr data word association ref json pip3 install spacy python3 m spacy download en core web lg pipenv install pipenv shell rm rf dist whl pip wheel w dist verbose exit pip3 uninstall hugo2lunr pip3 install e FAIL pip3 install user hugo2lunr h hugo2lunr test input test output input dir and output dir Build for specific linux distribution Build with bash bash venv pip wheel w dist verbose Build for linux bash bash create dockcross manylinux bash driver script docker run rm dockcross manylinux x64 dockcross manylinux x64 chmod x dockcross manylinux x64 build a distributable Python 2 7 Python wheel dockcross manylinux x64 opt python cp27 cp27m bin pip wheel w dist Use on linux bash bash unzip sample 0 1 0 py2 none any whl pwd python python import sys python sys path append pwd python import sample Docker image TODO docker image Conclusion",
        "tags": [
            "python",
            "development",
            "deployment"
        ]
    },
    {
        "uri": "/posts/blog_programming-language_syntax_comparison",
        "title": "Syntax Comparisons Across Languages",
        "content": "\nScripting languages are quite popular for effectively getting work done But their similarities lead to mental difficulties when remembering syntax and common idioms This post is used as a cheatsheet describing fundamental differences in how the languages are used Introduction In any one day I may program in five or six different languages This is enjoyable when the syntax is different enough that there is no confusion Domain Specific Languages including R SQL Bash and HTML are orthogonal in their approach to being productive But the Big Three language families of Python Javascript and JVM variety Java Groovy Scala are so similar that they are easily confused Common Themes Python is a dynamically typed language and this feature is an important reason why programmers can be more productive with Python they don t have to deal with the overhead of Java s static typing So the debates about Java Python productivity inevitably turn into debates about the comparative advantages and drawbacks of static typing versus dynamic typing or strong typing versus weak typing in programming languages Dynamic typing is concise which can lead to smaller source code and fewer errors But this can also be exemplary of fewer features To compensate python uses protocols and other means to provision classes rather than solely through object oriented class hierarchies It is VERY instructive to look at dynamic typed language from the perspective of static typed to understand what problems may occur from the differences Static typing can better ensure certainty of data in IO operations among applications and distributed environments Its greater standardization also lends to more automation of code and functionality in specific frameworks such as Spring While less concise this standardization and straight forward approach lend Java to large code bases that require many contributors such as Apache open source projects We will provide examples of how that is demonstrated in practice Closures Groovy Closures operator overloading and meta programming are the key tools to adding Grooviness to existing libraries Even many features that may look like being built into the core syntax are just clever library design Appending to a list with is an overloaded operator while looping over its entries with each is an added method that takes a closure as its parameter Groovy def myClosure x y x y scala uses 1 2 3 4 each println it 2 it is assumed list iterator param statment for condition logic loops can be faster than each List dict comprehensions Py Python list comprehensions provide a concise way to create lists If this syntax was implemented in Java it would be unreadable from all of the associated data types Comprehensions use the following syntax python result expression for item in list if conditional result transform iteration filter the operator is used to repeat The filter part answers the question if theitem should be transformed Which corresponds to python for item in list if conditional expression Groovy python string Hello 12345 World numbers x for x in string if x isdigit numbers output nb output 1 2 3 4 5 output Groovy python def double x return x 2 double x for x in range 10 double x for x in range 10 if x 2 0 output nb output 0 4 8 12 16 output Groovy python x y for x in 10 30 50 for y in 20 40 60 output nb output 30 50 70 50 70 90 70 90 110 output Groovy python dict comprehensions are just as good as list comprehensions my phrase No one expects the Spanish Inquisition my dict key value for value key in enumerate my phrase reversed dict value key for key value in my dict items reversed dict output nb output 0 No 1 one 2 expects 3 the 4 Spanish 5 Inquisition output Callback Js js idioms for java devs http softwareloop com 2015 02 09 javascript idioms for java developers Data Structures and Collections These are some of the most commonly used objects within a language The data structure describes the underlying principles of how the class works with hardware and the various collection interfaces describe how to interact with the object ArrayList LinkedList JVM iterables sequences Py array Js ArrayList LinkedHashMap is just like HashMap with an additional feature of maintaining an order of elements inserted into it ref https www geeksforgeeks org linkedhashmap class java examples Like arrays Linked List is a linear data structure Unlike arrays linked list elements are not stored at a contiguous location the elements are linked using pointers ref java linked lists https www geeksforgeeks org linked list set 1 introduction There are two remove methods available One that takes an integer and removes an element by its index and another that will remove the first element that matches the passed value If we have a list of integers use removeAt to remove an element by its index and removeElement to remove the first element that matches a value Groovy ArrayList list 5 6 7 8 list add 9 list 10 assert list 5 6 7 8 9 10 assert list get 2 7 list remove 5 assert list max 9 assert a b c b b c a b b b remove elements from list by value output nb output null output Groovy assert 1 2 3 4 5 1 5 use negative indices to count from the end assert list size 5 assert list getClass ArrayList the specific kind of list being used output nb output null output Groovy assert 1 2 3 3 1 2 3 1 2 3 1 2 3 assert 1 2 3 multiply 2 1 2 3 1 2 3 assert Collections nCopies 3 b b b b assert Collections nCopies 2 1 2 1 2 1 2 not 1 2 1 2 nCopies from the JDK has different semantics than multiply for lists output nb output null output Groovy def list2 new ArrayList String list assert list2 list checks that each corresponding element is the same output nb output null output Groovy def list3 list clone assert list3 list clone can also be called output nb output null output Iterating on elements of a list is usually done calling the each and eachWithIndex methods which execute code on each item of a list Mapping is creating a new list by transforming each of its elements into something else using the collect method Groovy a b c eachWithIndex it i println i it it is the current element while i is the index assert 1 2 3 collect it 2 2 4 6 assert 1 2 3 multiply 2 1 2 3 collect it multiply 2 shortcut syntax instead of collect output nb output 0 a 1 b 2 c output output nb output null output Groovy assert 1 2 3 find it 1 2 find 1st element matching criteria assert 1 2 3 findAll it 1 2 3 find all elements matching critieria assert a b c d e findIndexOf it in c e g 2 find index of 1st element matching criteria assert a b c d c indexOf c 2 first index returned assert a b c d c findIndexValues it c 2 4 all indices returned output nb output null output Groovy assert 1 2 3 every it 5 returns true if all elements match the predicate assert 1 2 3 every it 3 negation assert 1 2 3 any it 2 returns true if any element matches the predicate output nb output null output Groovy assert 1 2 3 join 1 2 3 String joining assert 1 2 3 inject counting str item str item counting 123 reduce operation output nb output null output Groovy Comparator mc a b a b 0 a b 1 1 def list 7 4 9 6 1 11 2 3 9 5 13 assert list max mc 11 output nb output null output Sorting is a common list operation Groovy assert 6 3 9 2 7 1 5 sort 1 2 3 5 6 7 9 def list abc z xyzuvw Hello 321 assert list sort it size z abc 321 Hello xyzuvw def list2 7 4 6 1 11 2 3 9 5 13 assert list2 sort a b a b 0 Math abs a Math abs b 1 1 1 2 3 4 5 6 7 9 11 13 output nb output null output Groovy Groovy Iterables Python provides iterables the iterator protocol for the implementation of lists generators and other classes that require returning its members one by one An iterator is an object representing a stream of data Sequences list tuple string are a type of iterable that support efficient element access using integer indices via the getitem special method indexing and define a length method that returns the length of the sequence Many things in Python are iterables but not all of them are sequences Groovy python def Sort sub li reverse None Sorts in Ascending order key is set to sort using second element of sublist lambda has been used sub li sort key lambda x x 1 return sub li sub li rishav 10 akash 5 ram 20 gaurav 15 print Sort sub li output nb output akash 5 rishav 10 gaurav 15 ram 20 output Groovy python you can iterate over a list and get its index mylist It s only a model for index item in enumerate mylist print index item output nb output 0 It s 1 only 2 a 3 model output javascript javascript arr Hash map JVM collection py Js ref groovy maps https www baeldung com groovy maps ref arraylist vs hashmap https www geeksforgeeks org arraylist vs hashmap in java Groovy map name Gromit likes cheese id 1234 city New York map put foo bar assert map get name Gromit assert map containsKey city true output nb output null output Groovy assert map size 5 assert map instanceof java util Map assert map getClass LinkedHashMap this is probably what you want output nb output null output Map keys are strings by default You must escape a key parenthesis if you want to use a variable s value as key Groovy def a Bob def ages a 43 assert ages Bob null Bob is not found assert ages a 43 because a is a literal ages a 43 now we escape a by using parenthesis assert ages Bob 43 and the value is found output nb output null output Maps also act like beans so you can use the property notation to get set items inside the Map Groovy assert map name Gromit can be used instead of map get name assert map id 1234 map bar foo output nb output foo output Maps created using the map literal notation are ordered that is to say that if you iterate on map entries it is guaranteed that the entries will be returned in the same order they were added in the map Groovy map eachWithIndex entry i println i entry key entry value output nb output 0 name Gromit 1 likes cheese 2 id 1234 3 city New York 4 foo bar 5 bar foo output Groovy map sort sort on key Groovy map find it value New York key city returns the first Entry that matches map findAll it value New York city New York returns all matches to a map output nb output true output Groovy map grep it value New York each it assertTrue it key city it value New York returns a list instead of a map output nb output groovy lang MissingMethodException No signature of method script1579053864497 assertTrue is applicable for argument types java lang Boolean values true output output nb output at script1579053864497 run closure2 doCall script1579053864497 1 output output nb output at this cell line 1 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner runScript GroovyCodeRunner java 94 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 59 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 32 output Groovy map every it it value instanceof String false returns a boolean map collect entry entry value name collect entries into a list map findAll it value age 30 collect key value value name query and collect into new map map groupBy it value 2 subgroup output nb output groovy lang MissingPropertyException No such property name for class java lang String output output nb output at script1579053917761 run closure2 doCall script1579053917761 2 output output nb output at this cell line 2 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner runScript GroovyCodeRunner java 94 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 59 output output nb output at com twosigma beakerx groovy evaluator GroovyCodeRunner call GroovyCodeRunner java 32 output Python defines a collection dictionary set frozenset as not having a deterministic ordering Groovy python dict open an append file when given a file with the following a 5 b 6 d 7 a 2 c 1 d for line in file data keyvalue txt key value line split l d get key l append int value d key l def sort by sum value a b sum a sum a 1 sum b sum b 1 return cmp sum a sum b items d items items a 5 2 c 1 b 6 d 7 items sort sort by sum value iterate over items my dict name Lancelot quest Holy Grail favourite color blue print my dict get airspeed velocity of an unladen swallow African or European n for key value in my dict iteritems print key value sep Set and operations Set operations can be performed on Groovy lists Groovy assert a in a b c returns true if an element belongs to the list assert a b c contains a equivalent to the contains method in Java assert 1 3 4 containsAll 1 4 containsAll will check that all elements are found assert 1 2 3 3 3 3 4 5 count 3 4 count the number of elements which have some value assert 1 2 4 6 8 10 12 intersect 1 3 6 9 12 1 6 12 assert 1 2 3 disjoint 4 6 9 assert 1 2 3 disjoint 2 4 6 Python has its own builtin set collection Groovy python s set 1 2 3 4 5 t set 4 5 6 print s union t set 1 2 3 4 5 6 print s intersection t u set 4 5 6 7 print t issubset u print u issubset t sl list s ss set sl output nb output 1 2 3 4 5 6 4 5 True False output javascript javascript just JSON Iterators Python doesn t have for loops for initializer condition iterator It has something more akin to a foreach loop for number in numbers Python s for loop is using iterators An iterable is an object capable of returning its members one by one you can apply a for loop to it Sequences are a common type of iterable They support efficient element access using integer indices via the getitem special method indexing so slicing can be performed on them Dictionaries file objects sets and generators are all iterables but none of them is a sequence An iterator is an object representing a stream of data You can create an iterator object by applying the iter built in function to an iterable You can use an iterator to manually loop over the iterable it came from A repeated passing of iterator to the built in function next returns successive items in the stream Groovy python numbers 10 12 15 18 20 create iterable print iter numbers iterator iter numbers create iterator print next iterator output nb output list iterator object at 0x7f568f83b0f0 10 output In Python the iterators are also iterables which act as their own iterators However the difference is that iterators don t have some of the features that iterables have They don t have length len and can t be indexed iterartor 0 Common iterators include enumerate reverse zip map filter and the File object Groovy python numbers 10 12 15 18 20 iterator enumerate numbers print next iterator index value squared map lambda x x 2 numbers print next squared applied function output nb output 0 10 100 output Because of their laziness the iterators can help us to deal with infinitely long iterables Iterators can save us a lot of memory and CPU time We can use itertools repeat to create an iterable that provides 100 million 4 s to us This iterator takes up 56 bytes of memory on my machine versus the 800 megabytes of a list Groovy python from itertools import repeat lots of fours repeat 4 times 100 000 000 import sys size in bytes sys getsizeof lots of fours print size in bytes lots of fours 4 100 000 000 size in bytes sys getsizeof lots of fours print size in bytes output nb output 56 800000064 output Python iterators are more general versions of the sequence protocol Here iter just returns self an object that has the function next which when called either returns a value or raises a StopIteration exception Groovy python class SillyIter i 0 n 5 def iter self return self def next self self i 1 if self i self n raise StopIteration return self i si SillyIter for i in si print i output nb output 1 2 3 4 5 output It is much easier to use a generator function or generator expression to create a custom iterator A generator function from the Python docs A function which returns a generator iterator It looks like a normal function except that it contains yield expressions for producing a series of values one at a time with the next yield temporarily suspends processing remembering the location execution state including local variables and pending try statements When the generator iterator resumes it picks up where it left off in contrast to functions which start fresh on every invocation Groovy python def SillyIter i 0 n 5 while i n i 1 yield i si SillyIter for i in si print i output nb output 1 2 3 4 5 output A generator expression is similar to a list comprehension Groovy python squares number 2 for number in numbers if number 2 0 print next squares output nb output 100 output We ve actually already met several iterators in disguise in particular enumerate is an iterator To drive home the point here s a simple reimplementation of enumerate Groovy python class my enumerate def init self some iter self some iter iter some iter self count 1 def iter self return self def next self val self some iter next self count 1 return self count val for n val in my enumerate a b c print n val output nb output 0 a 1 b 2 c output Generators are a Python implementation of coroutines Essentially they re functions that let you suspend execution and return a result Groovy python def g for i in range 0 5 yield i 2 for i in g print i output nb output 0 1 4 9 16 output Tuple JVM Groovy Py groovy tuples https mrhaki blogspot com 2016 03 groovy goodness using tuples html tuples in js https oli me uk tuples in javascript Groovy python tuple unpacking a Spam b Eggs print a b a b b a print a b output nb output Spam Eggs Eggs Spam output Other collections The Python collections library is great Groovy python from collections import Counter from random import randrange import pprint mycounter Counter for i in range 100 random number randrange 10 mycounter random number 1 for i in range 10 print i mycounter i output nb output 0 12 1 10 2 13 3 8 4 12 5 7 6 7 7 14 8 8 9 9 output Data Types with Classes With a protocol Python agrees to respect anything that supports a particular set of methods as if it were a builtin type These protocols appear everywhere in Python we are taking advantage of the mapping and sequence protocols below to define getitem and len respectively Groovy python class Binner def init self binwidth binmax self binwidth self binmax binwidth binmax nbins int binmax float binwidth 1 self bins 0 nbins def add self value bin value self binwidth self bins bin 1 def getitem self index return self bins index def len self return len self bins binner Binner 5 20 for i in range 0 20 binner add i for i in range 0 len binner print i binner i output nb output output output nb output TypeError Traceback most recent call last output output nb output ipython input 32 c3e2c25ca8fa in module 14 binner Binner 5 20 15 for i in range 0 20 16 binner add i 17 for i in range 0 len binner 18 print i binner i output output nb output ipython input 32 c3e2c25ca8fa in add self value 6 def add self value 7 bin value self binwidth 8 self bins bin 1 9 def getitem self index 10 return self bins index output output nb output TypeError list indices must be integers or slices not float output Groovy python enums in python class Color pass class Red Color pass class Yellow Color pass class Blue Color pass class Toy pass myToy Toy myToy color blue note we assign a string not an enum if myToy color is Color pass else print My toy has no color produces My toy has no color myToy color Blue note we use an enum print myToy color is myToy color name produces myToy color is Blue print myToy color is myToy color produces myToy color is class main Blue if myToy color is Blue myToy color Red if myToy color is Red print my toy is red produces my toy is red else print I don t know what color my toy is output nb output My toy has no color myToy color is Blue myToy color is class main Blue my toy is red output IO Operations groovy with java streams http eddelbuettel net groovy groovy io html Groovy with closes the file automatically new File baseDir haiku txt withWriter utf 8 writer writer writeLine Hello World Groovy But for such a simple example using the operator would have been enough new File baseDir haiku txt Hello World Groovy new File baseDir haiku txt eachLine line println line collect the lines of a text file into a list you can do def list new File baseDir haiku txt collect it Groovy output stream new File baseDir data bin withOutputStream stream do something withInputStream idiom that will take care of closing file connection new File baseDir haiku txt withInputStream stream do something Groovy boolean b true String message Hello from Groovy Serialize data into a file file withDataOutputStream out out writeBoolean b out writeUTF message Then read it back file withDataInputStream input assert input readBoolean b assert input readUTF message Groovy find files that match the regex or just use eachFile for each file or eachFileRecurse to search deeper into subdirectories dir eachFileMatch txt file println file name Groovy execute external process def process ls l execute println Found text process text Python display directory tree open files and execute sub processes Groovy python import os os listdir path Groovy python file open testfile txt w file write Hello World file close with open testfile txt r as f data f readlines for line in data words line split print words output nb output Hello World output Groovy python import subprocess output subprocess check output head shell True print output output nb output b output Random useful bits Groovy python assert False you can t do that here output nb output output output nb output AssertionError Traceback most recent call last output output nb output ipython input 44 1335db417df4 in module 1 assert False you can t do that here output output nb output AssertionError you can t do that here output Groovy python Worried that you re getting an empty list x assert len x output nb output output output nb output AssertionError Traceback most recent call last output output nb output ipython input 43 6aa249c95d4b in module 1 Worried that you re getting an empty list 2 x 3 assert len x output output nb output AssertionError output Groovy python any and all x True False print any x print all x output nb output True False output Groovy python Here args assigns all of the positional arguments to a tuple args and kwargs assigns all of the keyword arguments to a dictionary kwargs def print me args kwargs print me 5 6 7 test me arg2 None When a function is called with this notation the args and kwargs are unpacked appropriately and passed into the function For example the function test call can be called with a tuple of three args matching a b c def test call a b c x 1 y 2 z 3 print a b c x y z tuple in 5 6 7 test call tuple in output nb output 5 6 7 1 2 3 output Groovy python catch exceptions x 0 2 4 6 try y x 10 except IndexError y None y Groovy python The purpose of try finally is to ensure that something is done whether or not an exception is raised x 0 1 2 try y x 5 finally x append something print x output nb output 0 1 2 something output output nb output output output nb output IndexError Traceback most recent call last output output nb output ipython input 54 07bd9b959038 in module 2 x 0 1 2 3 try 4 y x 5 5 finally 6 x append something output output nb output IndexError list index out of range output Groovy python semantically equivalent to this but it s a bit cleaner because the exception doesn t have to be re raised and you don t have to catch a specific exception type try y x 5 except IndexError x append something raise output nb output output output nb output IndexError Traceback most recent call last output output nb output ipython input 55 c1a571ecce91 in module 2 but it s a bit cleaner because the exception doesn t have to be re raised and you don t have to catch a specific exception type 3 try 4 y x 5 5 except IndexError 6 x append something output output nb output IndexError list index out of range output Groovy python x output nb output 0 1 2 something something output Groovy python Exceptions are just classes that derive from Exception and you can catch exceptions based on their base classes So for example you can catch most standard errors by catching the StandardError exception from which e g IndexError inherits print issubclass IndexError StandardError try y x 10 except StandardError print CAUGHT EXCEPTION str e y None Groovy python define your own exceptions and exception hierarchies class MyFavoriteException Exception pass raise MyFavoriteException output nb output File ipython input 57 4b118fdb119a line 2 print issubclass IndexError StandardError SyntaxError invalid syntax output Groovy python function decorators are functions that take functions as arguments and return other functions def my decorator fn def new fn args kwargs if something in kwargs print REMOVING kwargs something del kwargs something return fn args kwargs return new fn To apply this decorator use this funny syntax my decorator def some function a 5 b 6 something None c 7 print a b something c OK now some function has been invisibly replaced with the result of my decorator which is going to be new fn Let s see the result some function something MADE IT output nb output REMOVING MADE IT 5 6 None 7 output Groovy python add attributes to functions This is why I use them in my testing code sometimes def attrs kwds def decorate f for k in kwds setattr f k kwds k return f return decorate attrs versionadded 2 2 author Guido van Rossum def mymethod f pass print mymethod versionadded print mymethod author output nb output 2 2 Guido van Rossum output Groovy python memoize caching of results def simple cache fn cache def new fn n if n in cache print FOUND IN CACHE RETURNING return cache n otherwise call function record value val fn n cache n val return val return new fn Then use this as a decorator to wrap the expensive function simple cache def expensive n print IN THE EXPENSIVE FN n return n 2 Now when you call this function twice with the same argument if will only do the calculation once the second time the function call will be intercepted and the cached value will be returned expensive 55 expensive 55 output nb output IN THE EXPENSIVE FN 55 FOUND IN CACHE RETURNING output output nb output 3025 output References docs groovy https groovy lang org groovy dev kit html Collections Maps python idioms https intermediate and advanced software carpentry readthedocs io en latest index html",
        "tags": [
            "machine-learning",
            "best-practice"
        ]
    },
    {
        "uri": "/posts/blog_programming-python_functional",
        "title": "Python Functional Programming",
        "content": "\nIntroduction Most programming languages are procedural or are written in an imperative style programs are lists of instructions that tell the computer what to do with the program s input Even purely OOP languages such as Java are typically written in an imperative style with little thought give in actual OOP modeling Functional code is characterised by one thing the absence of side effects It doesn t rely on data outside the current function and it doesn t change data that exists outside the current function Every other functional thing can be derived from this property Ideally functions only take inputs and produce outputs and don t have any internal state that affects the output produced for a given input Programming in this respect requires one to think in terms of data state Because of this and other attributes functional programming is good at modeling processes such as data ETL Principles Just three principles can provide guidance for programming in a functional manner Pure and Higher Order functions do not change external data and they can accept other functions as parameters and can return functions as output Immutability all values are immutable by default Any mutating operations copy the value change it and pass back the changed copy This eliminates bugs that arise from a programmer s incomplete model of the possible states their program may enter First class functions allow functions to be treated like any other value This means they can be created passed to functions returned from functions and stored inside data structures It is also helpful to keep in mind a few unique aspects of functional languages Unfortunately these are missing from Python but are available in languages where functional characteristics are important such as Scala tail call optimisation is used for recursion currying is used for decomposing a function that takes multiple arguments into a function that takes the first argument and returns a function that takes the next argument parallelization ensures running the same code concurrently without synchronization These concurrent processes are often run on multiple processors lazy evaluation is a compiler technique that avoids running code until the result is needed a process is deterministic only if repetitions yield the same result every time Functional Methods These basic methods for not iterating over data use Higher Order Functions Developers with Hadoop or Spark experience should be familiar with these techniques list comprehensions map filter reduce Try not thinking about the operations on the data Think of the states the data will go through Change of state is a process python from functools import reduce from operator import add python people name Mary height 160 name Isla height 80 name Sam python heights map lambda x x height filter lambda x height in x people heights output nb output map at 0x7ffafa47a1d0 output python lst list heights python if len lst 0 average height reduce add lst len lst average height output nb output 120 0 output Here map is a generator So we must run it as a list in order to use the len method Declarative Approach A functional version of code is declarative It describes what to do rather than how to do it Convert imperative to declarative by the following steps bundle pieces of the code into functions accomplished the code describes itself no need for comments Splitting code into functions is a great low brain power way to make code more readable lacking functions used as sub routines they affect the code around them by changing external variables rather than by returning values remove state accomplished i no shared state everything performed on function parameters then passed out ii each function has parameters those parameters are the system component state iii no variables are instantiated inside functions all data changes are done with return values structure main functions call auxiliary functions pipeline of one function to another Sequences into Pipelines Gets to the heart of what is needed in ETL deepcopy if the data must be worked inside the function Functional Elements Python Lacks Functional things I miss in Python Pattern matching Tail recursion Large library of list functions Functional dictionary class Automatic currying Concise way to compose functions Lazy lists Simple powerful expression syntax Python s simple block syntax prevents Guido from adding it Reasons why these are important No pattern matching and no tail recursion mean your basic algorithms have to be written imperatively Recursion is ugly and slow in Python A small list library and no functional dictionaries mean that you have to write a lot of stuff yourself No syntax for currying or composition means that point free style is about as full of punctuation as explicitly passing arguments Iterators instead of lazy lists means that you have to know whether you want efficiency or persistence and to scatter calls to list around if you want persistence Iterators are use once Python s simple imperative syntax along with its simple LL1 parser mean that a better syntax for if expressions and lambda expressions is basically impossible Guido likes it this way and I think he s right References non functional vs functional examples https maryrosecook com blog post a practical introduction to functional programming docs python3 s functools and itertools https docs python org 3 howto functional html video tutorial series on python functional programming https realpython com courses functional programming python",
        "tags": [
            "python",
            "development",
            "functional"
        ]
    },
    {
        "uri": "/posts/blog_programming-python_oop",
        "title": "Object Oriented Programming with Python",
        "content": "\nObject Oriented Programming OOP programming became popular with Java Microsoft quickly followed up with the C language Now OOP concepts are available in many languages Python inherits alot of these OOP attributes but performs it in its usual pythonic minimalism The concepts are the same but much of the cruft such as accessor modifiers are limited leaving an succinct and enjoyable object modeling experience Introduction OOP deals with classes blueprints and objects instances of blueprint Relationships between these two include encapsulation refers to object state and hiding it from the outside implemented with access modifiers such as public protected private inheritance how a child class can inherit a parent class to utilise its properties and functions python has two types multiple inheritance multilevel inheritance polymorphism using the same functions on different classes abstractions describe in simpler terms such as inheritance hierarchy where more abstract concepts are at the top and more concrete ideas at the bottom build upon their abstractions Object Creation and Class Static Variables Both new Python defines this function for every class by default and init together forms a constructor python class Example def init self self var studytonight creating object of the class Example mutantObj Example function del is the counter part of function new If we had wanted to create a class level variable then we would place it between the class definition and class methods and not using self In other languages the static keyword would be used python class Example var None def init self Example var studytonight Static methods can be implemented using a Decorator and not using self as an argument python class Shape staticmethod def info msg show custom message print msg print This class is used for representing different shapes Shape info Welcome to Shape class output nb output Welcome to Shape class This class is used for representing different shapes output Encapsulation Python makes the use of underscores to specify the access modifier for a specific data member and member function in a class python defining a class Employee with public variables class Employee constructor def init self name sal self name name self sal sal python defining a class Employee class Employee constructor def init self name sal self name name protected attribute self sal sal protected attribute python defining class Employee class Employee def init self name sal self name name private attribute self sal sal private attribute If we want to access the private member variable we will get an error python emp Employee Bill 10000 emp sal output nb output output output nb output AttributeError Traceback most recent call last output output nb output ipython input 9 d9e08f1374dc in module 1 emp Employee Bill 10000 2 emp sal output output nb output AttributeError Employee object has no attribute sal output Inheritance Inheriting the property of multiple classes into one Multiple Inheritance python class A a None functions of class A class B b None functions of class B class C A B c None class C inheriting property of both class A and B add more properties to class C python cls C cls a cls b cls c output nb output True output Multilevel Inheritance We inherit the classes at multiple separate levels We have three classes A B and C where A is the super class B is its sub child class and C is the sub class of B python class A a None properties of class A class B A b None class B inheriting property of class A more properties of class B class C B c None class C inheriting property of class B thus class C also inherits properties of class A more properties of class C python cls C print issubclass C B print issubclass C A output nb output True True output Use issubclass Child Parent when verifying classes Method Overriding Overriding is possible if inheritance exists between a parent and child classes function that is redefined in the child class should have the same signature i e same number of parameters python class Animal properties multicellular True Eukaryotic means Cells with Nucleus eukaryotic True function breathe def breathe self print I breathe oxygen function feed def feed self print I eat food Let s create a child class Herbivorous which will extend the class Animal python class Herbivorous Animal function feed def feed self print I eat only plants I am vegetarian In the child class Herbivorous we have overridden the method feed So now when we create an object of the class Herbivorous and call the method feed the overridden version will be executed python herbi Herbivorous herbi feed output nb output I eat only plants I am vegetarian output Polymorphism and Method Overloading Method Overloading is a type of polymorphism in which we can define a number of methods with the same name but with parameters can be of different types Similar to Overriding it requires the same signature python class Square side 5 def calculate area self return self side self side class Triangle base 5 height 4 def calculate area self return 0 5 self base self height python def find area of shape obj print obj calculate area sq Square tri Triangle calling the method with different objects find area of shape sq find area of shape tri output nb output 25 10 0 output Abstractness Abstract Classes Abstract classes are classes that contain one or more abstract methods An abstract method is a method that is declared but contains no implementation Abstract classes cannot be instantiated and require subclasses to provide implementations for the abstract methods The following Python code uses the abc module and defines an abstract base class python from abc import ABC abstractmethod class AbstractClassExample ABC def init self value self value value super init abstractmethod def do something self pass Must override the method otherwise it will error out A class that is derived from an abstract class cannot be instantiated unless all of its abstract methods are overridden python class DoAdd42 AbstractClassExample def do something self return self value 42 x DoAdd42 10 print x do something output nb output 52 output MetaClasses Create classes like classes create objects Important when classes should be configured based upon runtime specifications ref metaclasses https www python course eu python3 metaclasses php ref shallow and deep copies https www python course eu python3 deep copy php References examples when garbage collection fails https www studytonight com python destructors in python ref python course https www python course eu",
        "tags": [
            "python",
            "development",
            "oop"
        ]
    },
    {
        "uri": "/posts/blog_prototype-creating_frontend",
        "title": "Prototyping an Interactive Frontend with Vue",
        "content": " \n\nAssumes you are comfortable with HTML CSS JS This will cover creating SPAs with webpack and Vue basics This will not cover mobile or advanced Vue Improvements will make frontend development a more imperative programming approach as compared to the typical declarative methods found in more basic work Introduction Once you understand the basics of browser languages such as HTML CSS and JS then you quickly desire to have more interactive elements The obvious evolution is jQuery as you can directly perform imperative programming to manipulate elements That was a powerful web technology for about a decade and it is still used today But frontend programmers quickly learned that jQuery code became extremely crowded untestable and overly complex There were limits to what could be practically built with jQuery The upper limit was Single Page Applications SPAs SPAs allow for much more dynamic and intuitive interfaces for users However to build and maintain them more powerful technologies needed to perform scoped logic on modular components The first two frameworks to support this were Angular and React Vue came slightly later and was able to capitalize on some of the mistakes learned from the first two This allowed for a powerful system and fast workflow This post will explain how to prototype dynamic user interfaces as well as provide an understanding of more advanced technologies used by frontend programmers Webpack and Modular Programming ref basic concepts https webpack js org concepts ref modules https webpack js org concepts modules ref getting started https webpack js org guides getting started Webpack builds a dependency graph and uses the graph to generate an optimized bundle where scripts will be executed in the correct order In a more opinionated manner it bundles javascript applications that are built using a modular design Modular programming is used so that verification debugging and testing can be performed as an independent and isolated unit They can then be added to other modules using a simple ES2015 import or CommonJs require statement There are a variety of different flavors of JS used for frontend development including Coffescript https coffeescript org overview TypeScript https www typescriptlang org and ESNext Babel https babeljs io These can be compiled into JS then used in browsers Webpack supports modules written in a variety of languages and preprocessors via loaders Loaders describe to webpack how to process non JavaScript modules and include these dependencies into your bundles There are a few concepts to know about how webpack works Entry module to begin dependency graph default src index js Output where to emit bundles default dist main js Loaders default only JavaScript and JSON files allow webpack to process convert other files into valid modules Plugins wider range of tasks like bundle optimization asset management and injection of environment variables Mode set to development production or none enables built in optimizations default production Browser Compatibility supports all browsers that are ES5 compliant Simple usage i Install bash start project npm init for development only npm install webpack save dev instead of using file url npm install webpack dev server save dev ii Configure Used like webpack entry point output file js package json scripts build webpack dev server entry src js app js output filename dist bundle js build prod webpack src js app js dist bundle js p minify for production iii Implement What dependencies are determined by these only es6 syntax js app js import name from domloader js js domloader js export var name function html index html script src dist bundle js Simple configuration ref configuration https webpack js org configuration js package json scripts build webpack config prod config js js webpack config js const path require path module exports entry src index js output filename main js path path resolve dirname dist Development ref plugins https webpack js org plugins Plugins can support your workflow These are three useful plugins HtmlWebpackPlugin generates new names in output clean webpack plugin clean dist folder before each output Automatically update webpage bash npm start js package json name development version 1 0 0 description private true scripts test echo Error no test specified exit 1 watch webpack watch start webpack dev server open build webpack keywords author license ISC devDependencies js webpack config js const path require path const HtmlWebpackPlugin require html webpack plugin const CleanWebpackPlugin require clean webpack plugin module exports mode development entry app src index js print src print js devtool inline source map devServer contentBase dist plugins new CleanWebpackPlugin dist for v2 versions of CleanWebpackPlugin new CleanWebpackPlugin new HtmlWebpackPlugin title Development output filename name bundle js path path resolve dirname dist Advanced Topics code splitting and bundle analysis https webpack js org guides code splitting env variables https webpack js org guides environment variables progressive web apps https webpack js org guides progressive web application Vue Ecosystem Tooling Vue CLI https cli vuejs org interactive project scaffolding with zero config rapid prototyping a runtime dependency vue cli service and a full graphical user interface to create and manage Vue js projects vue cli service built on top of webpack that loads other plugins vue cli plugin for built in plugins vue cli plugin for community plugins Vue Webpack Loader https medium com nupoor neha starting with webpack 4 and vuejs a quick start tutorial 4a244410d55e allows you to author Vue components in a format called Single File Components SFCs Vue browser dev tools Extension https github com vuejs vue devtools for in browser development Libraries Testing Vue Test Utils https vue test utils vuejs org guides getting started HTTP Client Axios requests for consuming API Router official router support State Management Vuex an architecture for Vue applications and allows simple management of the application state Pre Render Production NuxtJs https nuxtjs org opinionated for spa Component Search Bit https bit dev components q carousel curated Vue https curated vuejs org Vue components https vuecomponents com Dev Env Storybook https www learnstorybook com vue en get started build UIs like legos OverVue https www overvue io prototype based dev ref awesome Vue https github com vuejs awesome vue mobile Vue CLI Scaffolding ref blog post https code tutsplus com tutorials boost your vuejs workflow with vue cli 3 cms 32232 ref guide docs https cli vuejs org guide Projects created by Vue CLI are pre configured with most of the common development needs working out of the box including Vue Loader bash single component npm install g vue cli service global vue serve browser localhost 8080 bash project npm install g vue cli vue version vue create my project npm run serve browser localhost 8080 or with ui for dependency management vue ui or directly access the binary npx vue cli service serve Project Structure node modules folder contains the packages that the app and development tools require public folder contains static project assets which will not be included in the bundling process src folder contains the Vue js application with all resources assets folder is used for static resources required by the app which will be included in the bundling process components folder is used for the application s components views folder is used for components which will be displayed using the URL routing feature App vue is the root component main js is the JavaScript file that creates the Vue instance object router js is used to configure the Vue router store js is used to configure the data store created with Vuex gitignore contains a list of files and folders that are excluded from the Git version control babel config js contains the configuration settings for the Babel compiler package json contains a list of the packages required for Vue js development as well as the commands used for the development tools package lock json contains a complete list of the packages required by the project and their dependencies README md contains general information about the project bash install plugin vue add bootstrap vue src plugins new plugin bash build production bundle of app library or component npm run build modern target app dist folder created and two version with the browser appropriate version selected automatically bash analyze the build npm run inspect TODO Guide Development Vue Basics Vue js allows you to simply bind your data models to the representation layer It also allows you to easily reuse components throughout the application Useful Frontend Terms Declarative Views These are the Views that provide a way of direct data binding between plain JavaScript data models and the representation Directives These are special HTML elements attributes prefixed with v in Vue js that allow data binding in different ways They apply special reactive behavior to the rendered DOM Reactivity In the Web this is actually the immediate propagation of any changes of data to the View layer Vue Foundations html div id app message div js var app new Vue el app data message Hello Vue Directives vue directive syntax div v directive argument of dynamic argument event modifier or key modifier js expression filter js data output div interpolated data div v bind div v bind id dynamicId div or id attribName null var id elemId disabled null href url v once v html p Using v html directive span v html rawHtml span p data input v model conditionals v if v else if v else v show v for item index in items v for value name index in object v for todo in todos v if todo isComplete event listener v on or click eventName keyup enter keyup page down click click say what click once hover focus submit style v bind class active isActive div v bind style base color activeColor fontSize fontSize px div Data instance properties prefixed by are different from user defined var data data Implementation designs All js in HTML html script var vm new Vue el example data props item methods name function return this msg computed hooks created mounted updated destroyed function script Split js into a globally registered component js div id timer Timer title my timer Timer div Vue component Timer template div div props title data passed to and maintained by instance data function data must be a function to maintain indep data copy return count 0 methods new Vue el timer Use local registration of sub component js ComponentA vue js ComponentB vue import ComponentA from ComponentA export default components ComponentA js main js import Vue from vue import upperFirst from lodash upperFirst html index html Single file component separation of layers js comp vue template div This will be pre compiled div template script src my component js script style src my component css style Typical single file component todo app https codesandbox io s o29j95wx9 This is advanced javascript and must understand npm intro https www sitepoint com beginners guide node package manager npm up to uninstalling global packages https docs npmjs com uninstalling packages and dependencies learn es2015 https babeljs io docs en learn html index html div id app div js index js import Vue from vue import App from App Vue config productionTip false eslint disable no new new Vue el app template App components App js App vue template div id app h1 My Todo App h1 TodoList div template script import TodoList from components TodoList vue export default components TodoList script style style Unit testing individual components ref unit tests https vuejs org v2 guide unit testing html js Component vue template p msg p template script export default props msg script js test js import Vue from vue import MyComponent from MyComponent vue helper function that mounts and returns the rendered text function getRenderedText Component propsData const Constructor Vue extend Component const vm new Constructor propsData propsData mount return vm el textContent describe MyComponent it renders correctly with different props expect getRenderedText MyComponent msg Hello toBe Hello expect getRenderedText MyComponent msg Bye toBe Bye TODO emit https www telerik com blogs how to emit data in vue beyond the vuejs documentation client side storage https vuejs org v2 cookbook client side storage html storage with indexdDb https developer mozilla org en US docs Web API IndexedDB API debugging in vscode https vuejs org v2 cookbook debugging in vscode html END",
        "tags": [
            "vue",
            "JavaScript",
            "tag3"
        ]
    },
    {
        "uri": "/posts/blog_test-hugo_blog",
        "title": "Formatting for Jupyter (.ipynb) Notebooks",
        "content": "\nThis is a test post for formatting Jupyter Notebooks for Hugo This workflow makes use of the code at repository nb2hugo https github com vlunot nb2hugo as well as the beakerx jupyter kernel This is will test blog is a complicated workflow Begin by running the newest version of JupyterLab Run through the basic markdown sections Next try working with the R kernel by using rpy2 library Run these cells to ensure functionality Then close the notebook and re open it in Beakerx with the beakerx Groovy kernel This will ensure that the beakerx object is available for autotranslation Try the autotranslated cells Finally change the kernel back to Python and finish running the notebook Basic Section Headers Subsection header Cupiditate voluptas sunt velit Accusantium aliquid expedita excepturi quis laborum autem Quas occaecati et atque est repellat dolores Laudantium in molestiae consequatur voluptate ipsa Nulla quia non qui sed Voluptatem et enim nesciunt sunt pariatur Libero eius excepturi voluptatibus reprehenderit Facere enim neque dolorem sed ullam non Dolor sit molestias repellendus Example of one output python print goodbye output nb output goodbye output Example of multiple outputs python print hello print world print goodbye output nb output hello world goodbye output Subsection header Cupiditate voluptas sunt velit Accusantium aliquid expedita excepturi quis laborum autem Quas occaecati et atque est repellat dolores Laudantium in molestiae consequatur voluptate ipsa Nulla quia non qui sed Voluptatem et enim nesciunt sunt pariatur Libero eius excepturi voluptatibus reprehenderit Facere enim neque dolorem sed ullam non Dolor sit molestias repellendus This is a footnote as performed with text 1 which follows as 1 The bottom of the page can be marked with the following 1 the footnote text Scroll to the bottom to see the result Formatting Requirements Markdown section The post must conform to the following notebook filename must be lowercase ipynb apply metadata formatting Formatting for Jupyter ipynb Notebooks Date 2019 05 08 Author Jason Beach Categories Blog Category Tags jupyter tag eofm notebook name must be lowercase ipynb Title As Above ipynb or part of metadata md All Second Sections to ensure proper smartToc All third sections use opening paragraph beneath metadata ensure either output or markdown cell between code cells reference other posts with absolute url my post ref posts blog page todo md List of Future Posts add external references to documentation ref http domain com Latex section This is inline latex x i 2 The display mode notation c sqrt a 2 b 2 becomes c sqrt a 2 b 2 This is a latex code block using latex cell magic latex begin aligned nabla times vec mathbf B frac1c frac partial vec mathbf E partial t frac 4 pi c vec mathbf j nabla cdot vec mathbf E 4 pi rho nabla times vec mathbf E frac1c frac partial vec mathbf B partial t vec mathbf 0 nabla cdot vec mathbf B 0 end aligned Graphic section python import matplotlib pyplot as plt import numpy as np a x for x in range 10 b np square a plt plot a b plt show png output 18 0 png Dataframes and tables python import pandas as pd d col1 1 2 3 4 5 6 7 col2 1 2 3 4 5 6 7 df pd DataFrame data d df head div style scoped dataframe tbody tr th only of type vertical align middle dataframe tbody tr th vertical align top dataframe thead th text align right style table border 1 class dataframe thead tr style text align right th th th col1 th th col2 th tr thead tbody tr th 0 th td 1 td td 1 td tr tr th 1 th td 2 td td 2 td tr tr th 2 th td 3 td td 3 td tr tr th 3 th td 4 td td 4 td tr tr th 4 th td 5 td td 5 td tr tbody table div Additional Language Kernels Python The code above is written in python Now lets try R statistical language R language python load ext rpy2 ipython output nb output The rpy2 ipython extension is already loaded To reload it use reload ext rpy2 ipython output python R require ggplot2 output nb output array 1 dtype int32 output python import pandas as pd df pd DataFrame Letter a a a b b b c c c X 4 3 5 2 1 7 7 5 9 Y 0 4 3 6 7 10 11 9 13 Z 1 2 3 1 2 3 1 2 3 r R i df head df 3 output nb output Letter X Y Z 0 a 4 0 1 1 a 3 4 2 2 a 5 3 3 output r R i df w 400 h 300 options repr plot width 1 repr plot height 0 75 thm theme panel background element rect fill transparent bg of the panel plot background element rect fill transparent color NA bg of the plot panel grid major element blank get rid of major grid panel grid minor element blank get rid of minor grid legend background element rect fill transparent get rid of legend bg legend box background element rect fill transparent get rid of legend panel bg p ggplot data df geom point aes x X y Y color Letter size Z p thm png output 29 0 png Groovy Now the kernel is changed to Groovy to introduce autotranslation Autotranslation is only available in beakerx with the Groovy kernel python beakerx foo a groovy value output nb output a groovy value output Javascript Now we use javascript javascript javascript beakerx bar 23 48 7 beakerx foo beakerx foo Back to python python python from beakerx import beakerx beakerx bar output nb output 23 48 7 a groovy value output HTML The below is written in HTML and is used for rendering within the notebook python html style node background color lightblue style div class node Hello World div style node background color lightblue style div class node Hello World div Use the script tag to write safe non rendering HTML that still allows for correct syntax highlighting python html script type application text style node background color lightblue style div class node Hello World div script script type application text style node background color lightblue style div class node Hello World div script When you use nbconvert to change to markdown you will receive the following error However the output will be correct python output writer convert notebook site dir section usr local lib python3 7 site packages nbconvert 5 5 0 py3 7 egg nbconvert filters datatypefilter py 41 UserWarning Your element with mimetype s dict keys application javascript is not able to be represented mimetypes output keys Created posts blog test hugo blog md Back to python Now manually change the kernel back to python python print back to python output nb output back to python output Final Section Cupiditate voluptas sunt velit Accusantium aliquid expedita excepturi quis laborum autem Quas occaecati et atque est repellat dolores Laudantium in molestiae consequatur voluptate ipsa Nulla quia non qui sed Voluptatem et enim nesciunt sunt pariatur Libero eius excepturi voluptatibus reprehenderit Facere enim neque dolorem sed ullam non Dolor sit molestias repellendus References 1 the reference goes here",
        "tags": [
            "jupyter",
            "tag"
        ]
    },
    {
        "uri": "/posts/blog_test-my_first_post",
        "title": "Formatting a Markdown Post",
        "content": "\nCupiditate voluptas sunt velit Accusantium aliquid expedita excepturi quis laborum autem Quas occaecati et atque est repellat dolores Laudantium in molestiae consequatur voluptate ipsa Nulla quia non qui sed Voluptatem et enim nesciunt sunt pariatur Libero eius excepturi voluptatibus reprehenderit Facere enim neque dolorem sed ullam non Dolor sit molestias repellendus Awesome 1 Facilis maiores doloribus similique sint quaerat reiciendis quia Autem nemo voluptas rerum Eos odio aut omnis Adipisci voluptas nihil autem recusandae This is a footnote 1 In addition we have task lists a task list item list syntax required incomplete x completed One stormy night Rem aut rerum provident Minima dolor tempore veniam veniam repellendus nihil Cat Fluffy animal everyone likes Internet Vector of transmission for pictures of cats Alias explicabo est et Voluptas neque inventore beatae sequi dolor et autem non Temporibus facilis molestiae sint excepturi a et quia Assumenda libero qui et rerum quia nam aliquam dolores Et eos placeat assumenda Eligendi sunt aut illum Odio voluptate commodi non temporibus vel veniam Voluptatem magnam eum eum Awesome 2 Facilis maiores doloribus similique sint quaerat reiciendis quia Autem nemo voluptas rerum Eos odio aut omnis Adipisci voluptas nihil autem recusandae Rem aut rerum provident Minima dolor tempore veniam veniam repellendus nihil Alias explicabo est et Voluptas neque inventore beatae sequi dolor et autem non Temporibus facilis molestiae sint excepturi a et quia Assumenda libero qui et rerum quia nam aliquam dolores Et eos placeat assumenda Eligendi sunt aut illum Odio voluptate commodi non temporibus vel veniam Voluptatem magnam eum eum Sub Awesome 1 Facilis maiores doloribus similique sint quaerat reiciendis quia Autem nemo voluptas rerum Eos odio aut omnis Adipisci voluptas nihil autem recusandae Rem aut rerum provident Minima dolor tempore veniam veniam repellendus nihil Alias explicabo est et Voluptas neque inventore beatae sequi dolor et autem non Temporibus facilis molestiae sint excepturi a et quia Assumenda libero qui et rerum quia nam aliquam dolores Et eos placeat assumenda Eligendi sunt aut illum Odio voluptate commodi non temporibus vel veniam Voluptatem magnam eum eum Sub Awesome 2 Facilis maiores doloribus similique sint quaerat reiciendis quia Autem nemo voluptas rerum Eos odio aut omnis Adipisci voluptas nihil autem recusandae Rem aut rerum provident Minima dolor tempore veniam veniam repellendus nihil Alias explicabo est et Voluptas neque inventore beatae sequi dolor et autem non Temporibus facilis molestiae sint excepturi a et quia Assumenda libero qui et rerum quia nam aliquam dolores Et eos placeat assumenda Eligendi sunt aut illum Odio voluptate commodi non temporibus vel veniam Voluptatem magnam eum eum Sub Awesome 3 Facilis maiores doloribus similique sint quaerat reiciendis quia Autem nemo voluptas rerum Eos odio aut omnis Adipisci voluptas nihil autem recusandae Rem aut rerum provident Minima dolor tempore veniam veniam repellendus nihil Alias explicabo est et Voluptas neque inventore beatae sequi dolor et autem non Temporibus facilis molestiae sint excepturi a et quia Assumenda libero qui et rerum quia nam aliquam dolores Et eos placeat assumenda Eligendi sunt aut illum Odio voluptate commodi non temporibus vel veniam Voluptatem magnam eum eum Conclusion Facilis maiores doloribus similique sint quaerat reiciendis quia Autem nemo voluptas rerum Eos odio aut omnis Adipisci voluptas nihil autem recusandae Rem aut rerum provident Minima dolor tempore veniam veniam repellendus nihil Alias explicabo est et Voluptas neque inventore beatae sequi dolor et autem non Temporibus facilis molestiae sint excepturi a et quia Assumenda libero qui et rerum quia nam aliquam dolores Et eos placeat assumenda Eligendi sunt aut illum Odio voluptate commodi non temporibus vel veniam Voluptatem magnam eum eum 1 the footnote text",
        "tags": [
            "markdown",
            "tag"
        ]
    },
    {
        "uri": "/posts/blog-hugo_site_process",
        "title": "Communication Workflows with Hugo, Jupyter, and Friends",
        "content": "\nStatic Site Generators are quite popular replacements for traditional server based methods of delivering HTML One of the most popular is Hugo because of its compilation speed Combining Hugo with Jupyter notebooks and other tools can provide for a speedy workflow for pushing your ideas to the web books online or pdf and more This post will discuss why you may want to do this and provides tools for doing it Creating and Sharing Ideas Creating and publishing content is an investment Even poorly created content still takes time to put text to file and file to web I ve seen many people get started with blogging only to quit after getting the site running They refine the site styling to a remarkable degree then the posts end after two weeks Which begs the question why blog A way to to have an online presence or to build a brand Rubbish No one will go to your site because you re nobody And why should they you don t care about them either Funny enough people go to Paul Graham s blog http paulgraham com articles html and I don t think he spent 10 minutes on his CSS Another perspective is that you want to share ideas with yourself and sometimes others The content I create is a knowledge base I ve learned a great deal of things I want to access reference and update those things as I refine skills and knowledge If someone asks me a question and I m feeling selfish with my time then I can point them to a post it is researched organized and documented at times that I was interested in a topic I can t remember everything all of the time Personally I m easily distracted by new ideas Creating content adds a little more time to the current work I m doing but it helps drive new ideas toward longer term interests and goals The ideas are incorporated into a previous world view that is then updated Strategically I can look over this past work and use it in future projects This is not so much to make things easier in the future as it is to see how perspectives change with the addition of new information Better yet prove to yourself that you understand some material You don t know something until you can teach to others or teach it simply to a child something like that This post is about creating this new habit and sticking to it by not wasting your time with the boring stuff An Effective Workflow Process overview I ve tried multiple workflows and the following is by far the fastest and most effective Two key components are Jupyter nobooks and Hugo Static Site Generator SSG The key components are separating your content Jupyter from the delivery Hugo and ensuring you use simple scripts for the plumbing in your workflow Docker Jupyter Markdown Hugo SSG Book online Book pdf github pages Jupyter allows you to succinctly place all of your content together even if it doesn t concern programming That way you can easily move to some new method of dissemination if SSG doesn t serve your purpose If you make programming a topic in your content you are really helping yourself The code and output are maintained together and can easily be update in the future Using simple scripts bash or python files to automate your work ensures that plumbing can be created easily and quickly modified when you improve your process or make major changes to it This might seem like more overhead and it is in the short term But having the ability to direct your content to and reuse it in different sources such as blog post book or a journal format is incredibly powerful Detailed process To go into more detail I start with a docker image with Jupyter installed The docker container shares volumes with the local space for saving ipynb files These are maintained in a github repo so all content is secure and easily reproducible The only concern is where to keep your accompanying data which is mostly dependent on size An AWS S3 bucket is usually a safe bet Once the content is ready it can be prepared for dissemination using a simple script Jupyter notebook files ipynb are json These should be converted to markdown md and placed with dependencies images media etc into the appropriate Hugo directory structure A final review can be performed by running Hugo locally Changes can be made to the markdown files the Hugo public directory converted HTML SSG files is commited and pushed to github repo for publication on github pages All of this can be done in less than 30 seconds There are some similar but less flexible workflows If you are using RStudio https www rstudio com and are only concerned with data science content using R or Python then you can use blogdown https bookdown org yihui blogdown This is a great workflow and really saves the user much time However both RStudio and blogdown are opinionated and large If you want to change something then you will either have to do it their way if the option is present or you will have to dig knee deep into code probably for several days to modify things to how you want them This lack of control does not suite me Complete process code For docker images I use one of the following all spark notebook all the data science goodies you expect beakerx strong multi language and prototyping support including JVM languages python and javascript bash create your notebook repo git clone repo bash profile export NOTEBOOK HOME Users jason beach Desktop Projects IMTorgDemo Notebooks create container and share volume docker run d p 8887 8888 v NOTEBOOK HOME home beakerx PROJECTS PERSONAL v WORK HOME home beakerx PROJECTS WORK name cntr beakerx beakerx beakerx Apply consistent formatting across notebooks Using a script to look for such formatting can be helpful The following are useful standards when running the nb2hugo https github com IMTorgCustomSoln nb2hugo script for converting a notebook to markdown notebook name must be lowercase ipynb Title As Above ipynb or part of metadata md All Second Sections to ensure proper smartToc All third sections use opening paragraph beneath metadata ensure either output or markdown cell between code cells reference other posts with absolute url my post ref posts blog page todo md List of Future Posts add external references to documentation ref http domain com add image references description images name png Convert the file to markdown and place files and dependencies into appropriate directory structure bash nb2hugo directory to file ipynb site dir Hugo Site section posts Take a quick look for final review bash hugo server D Then commit and deploy to github pages Also commit and push your notebook modifications to github repo deploy sh add new post This is a simple process once it is set up The only difficulty is getting accustomed to the above formatting rules Jupyter for code and content Jupyter notebooks can be real productivity enhancers because they bring code output and mathematical notation all under one JSON based HTML renderer The notebook can be shared as HTML or converted to other formats While docker is not necessary running Jupyter from docker can make costly installation and configuration changes both automated and portable Two of the best images are all spark notebook https github com jupyter docker stacks tree master all spark notebook all the data science goodies you expect beakerx http beakerx com strong multi language and prototyping support including JVM languages python and javascript The kernels of these two images cover almost every language you might want to use except NodeJs I ve tried a few of different set ups but haven t found any that are consistently maintained Once you ve completed some work in a notebook you have a variety of different formats for which to convert it Converting it to markdown and diseminating files to Hugo is my chosen workflow and the script nb2hugo https github com IMTorgCustomSoln nb2hugo performans quite well by making use of the Jupyter API I m slowly improving it with post processing Hugo for static sites SSGs improved steadily over the last few years and Hugo proclaims it is the fastest for compiling code The speed is quite impressive and allows users to see HTML updates while the underlying markdown is being modified similar to how nodemon https nodemon io works for Node developers Hugo is also relatively simple to learn and customize The basic tutorials https gohugo io documentation are quite good Installing the system with code block language coloring pygments is straightforward brew install hugo pip3 install Pygments pip3 install nb2hugo Typically a new user will get started with a theme chosen from the Hugo Theme library https themes gohugo io The actual theme repo is cloned within the Hugo directory structure hugo new site quickstart cd quickstart git init cd themes git clone depth 1 https github com carsonip hugo theme minos hugo t hugo theme minos The final bit is to customize Hugo using the config toml file This includes adding the url and other static site variables the chosen theme and parameters associated with the theme and static pages like About or Tags Creating a new post from markdown without Jupyter is simply hugo new posts my first post md Hugo has some very powerful themes to choose from including academic https themes gohugo io coder portfolio https themes gohugo io hugo coder portfolio tufte style https github com shawnohare hugo tufte book style https themes gohugo io hugo book Mathematical notation is supported through Katex https katex org docs supported html Useful Tools To deploy Hugo simply place the compiled public directory to a server You have many options however deploying your site simply by pushing commits to your code repo is one of the easiest enter GithubPages https gohugo io hosting and deployment hosting on github The provided Hugo script is quite useful Later you can create a custom domain name and point it at the account github io url such as with Namecheap https www namecheap com support knowledgebase article aspx 9645 2208 how do i link my domain to github pages utm source CJ utm medium Affiliate utm campaign 8162476 ref cj affnetwork cj cjevent 3e815fa6a12a11e9816104bd0a24060b Lastly you may want to consider distributing your content using other means such as book pdf Pandoc https pandoc org appears to cover all needs for markdown transformations The writer Thorsten Ball https thorstenball com blog 2018 09 04 the tools i use to write books appears to have good experience on this process as well Conclusion There are many choices for distributing content to the web but I find most are time consuming in either overhead process or customization This is not the case with Jupyter and Hugo Overhead is only a few hours for set up and getting accustomed to styling The process only takes a two commands and a localhost review Customization cannot be any easier because of the simplicity of the pipeline and scripts If fewer languages or less flexibility is acceptable than RStudio and blogdown may be preferable but this may be regretful later",
        "tags": [
            "knowledgebase",
            "markdown",
            "tag3"
        ]
    },
    {
        "uri": "/posts/blog-intro_latex",
        "title": "Introduction to LaTeX",
        "content": "\nLaTeX is the document preparation and typesetting system used for scientific publications LaTeX is based on the idea that it is better to leave document design to document designers so the user can focus on the content It requires a greater technical understanding than typical simple note taking systems however because it is incredibly descriptive and produces aesthetically appealing output it is becoming more popular This post provides a reference to configuration and syntax LaTeX Beginnings Tex is the actual low level language created by Donald Knuth in 1978 Leslie Lamport created an alternative high level macro file called lplain l for Lamport with a set of much easier to use commands The latex script ran the macros first then compiled the Tex language and outputs to a PostScript file that another program converts to a document This evolved into the LaTeX program The LaTeX site https www latex project org provides the open source software distribution that compiles your LaTeX markup Getting this set up and using it can be quite involved and most workflows don t allow for such complexities Also most users don t have to worry about becoming comfortable with the LaTeX markup There are many templates available including free boilerplates http mrzool cc tex boilerplates free templates http www latextemplates com some commercial https www overleaf com gallery tagged book Large journal publications provide their own templates for document preparation such as IEEE http www latextemplates com template ieee However some users may want to customize their own output An example document could include the following begin document begin environment1 begin environment2 end environment2 end environment1 end document There is an interesting post https olivierpieters be blog 2017 02 11 designing a business card in latex describing how to create a business card in LaTeX This is ridiculous For more graphic intensive work there are much better options such Photoshop or even PowerPoint For more information look into latex tutorial https www latex tutorial com Typical Usage Jupyter More commonly simple snippets or blocks of LaTeX are used within common markdown or HTML to display mathematical text or special symbols Pandoc https pandoc org can be used to convert simple markdown into other formats including a PDF file with LaTeX Jupyter notebook uses MathJax https www mathjax org to render LaTeX inside html markdown Just put your LaTeX math inside The inline notation c sqrt a 2 b 2 becomes c sqrt a 2 b 2 The display mode notation c sqrt a 2 b 2 becomes c sqrt a 2 b 2 Or place it in an individual cell python from IPython display import Math Math r F k int infty infty f x e 2 pi i k dx displaystyle F k int infty infty f x e 2 pi i k dx You can enter latex directly with the latex cell magic within a Markdown cell latex begin aligned nabla times vec mathbf B frac1c frac partial vec mathbf E partial t frac 4 pi c vec mathbf j nabla cdot vec mathbf E 4 pi rho nabla times vec mathbf E frac1c frac partial vec mathbf B partial t vec mathbf 0 nabla cdot vec mathbf B 0 end aligned latex begin aligned nabla times vec mathbf B frac1c frac partial vec mathbf E partial t frac 4 pi c vec mathbf j nabla cdot vec mathbf E 4 pi rho nabla times vec mathbf E frac1c frac partial vec mathbf B partial t vec mathbf 0 nabla cdot vec mathbf B 0 end aligned MathJax Superscripts and Subscripts use and For example x i 2 x i 2 log 2 x log 2 x Groups Superscripts Subscripts and other operations apply only to the next group A group is either a single symbol or any formula surrounded by curly braces If you do 10 10 you will get a surprise 1010 But 10 10 gives what you probably wanted 10 10 Use curly braces to delimit a formula to which a superscript or subscript applies x 5 6 is an error x y z is x y z x y z is x y z Observe the difference between x i 2 x i 2 and x i 2 x i 2 Parentheses and Ordinary symbols make parentheses and brackets 2 3 4 4 Use and for curly braces These do not scale with the formula in between so if you write frac sqrt x y 3 the parentheses will be too small frac sqrt x y 3 Using left right will make the sizes adjust automatically to the formula they enclose left frac sqrt x y 3 right is left frac sqrt x y 3 right left and right apply to all the following sorts of parentheses vert vert x vert Vert Vert x Vert langle and rangle langle x rangle lceil and rceil lceil x rceil lfloor and rfloor lfloor x rfloor middle can be used to add additional dividers There are also invisible parentheses denoted by left frac12 right rbrace is left frac12 right rbrace If manual size adjustments are required Biggl biggl Bigl bigl x bigr Bigr biggr Biggr gives Biggl biggl Bigl bigl x bigr Bigr biggr Biggr Sums and integrals sum and int the subscript is the lower limit and the superscript is the upper limit so for example sum 1 n sum 1 n Don t forget if the limits are more than a single symbol For example sum i 0 infty i 2 is sum i 0 infty i 2 Similarly prod prod int int bigcup bigcup bigcap bigcap iint iint iiint iiint idotsint idotsint Fractions There are three ways to make these frac ab applies to the next two groups and produces frac ab for more complicated numerators and denominators use frac a 1 b 1 is frac a 1 b 1 If the numerator and denominator are complicated you may prefer over which splits up the group that it is in a 1 over b 1 is a 1 over b 1 Using cfrac a b command is useful for continued fractions cfrac a b more details for which are given in this sub article Radical signs use sqrt which adjusts to the size of its argument sqrt x 3 sqrt x 3 sqrt 3 frac xy sqrt 3 frac xy For complicated expressions consider using 1 2 1 2 instead Special functions such as lim sin max ln and so on are normally set in roman font instead of italic font Use lim lim sin sin etc to make these sin x sin x not sin x sin x Use subscripts to attach a notation to lim lim x to 0 lim x to 0 There are a very large number of special symbols and notations too many to list here see this shorter listing https pic plover com MISC symbols pdf or this exhaustive listing http mirrors ibiblio org CTAN info symbols comprehensive symbols a4 pdf Some of the most common include lt gt le leq leqq leqslant lt gt le leq leqq leqslant ge geq geqq geqslant neq ge geq geqq geqslant neq You can use not to put a slash through almost anything not lt not lt but it often looks bad times div pm mp times div pm mp cup cap setminus subset subseteq subsetneq supset cup cap setminus subset subseteq subsetneq supset in notin emptyset varnothing in notin emptyset varnothing cdot is a centered dot x cdot y n 1 choose 2k n 1 choose 2k or binom n 1 2k binom n 1 2k to rightarrow leftarrow Rightarrow Leftarrow mapsto to rightarrow leftarrow Rightarrow Leftarrow mapsto land lor lnot forall exists top bot vdash vDash land lor lnot forall exists top bot vdash vDash star ast oplus circ bullet star ast oplus circ bullet approx sim simeq cong equiv prec lhd therefore approx sim simeq cong equiv prec lhd therefore infty aleph 0 infty aleph 0 nabla partial nabla partial Im Re Im Re For modular equivalence use pmod like this a equiv b pmod n a equiv b pmod n ldots is the dots in a1 a2 ldots an cdots is the dots in a1 a2 cdots an Some Greek letters have variant forms epsilon varepsilon epsilon varepsilon and phi varphi phi varphi and others Script lowercase l is ell Formula to code can be done with Detexify http detexify kirelabs org classify html which lets you draw a symbol on a web page and then lists the symbols that seem to resemble it These are not guaranteed to work in MathJax but are a good place to start To check that a command is supported note that MathJax org maintains a list of currently supported commands and one can also check Dr Carol JVF Burns s page of Spaces MathJax usually decides for itself how to space formulas using a complex set of rules Putting extra literal spaces into formulas will not change the amount of space MathJax puts in a b and a b are both ab To add more space use for a thin space a b and use for a wider space a b quad and qquad are large spaces a quad b adn a qquad b To set plain text use text x in s mid x text is extra large You can nest inside of text Accents and diacritical marks use hat for a single symbol hat x widehat for a larger formula hat xy If you make it too wide it will look silly Similarly there are bar bar x and overline overline xyz and vec vec x and overrightarrow overrightarrow xy and overleftrightarrow overleftrightarrow xy For dots as in frac d dx x dot x dot x 2 x ddot x use dot dot and ddot ddot Special characters used for MathJax interpreting can be escaped using the character etc If you want itself you should use backslash because is for a new line References To see how any formula was written in any question or answer including this one right click on the expression it and choose Show Math As TeX Commands This small mathjax post https math meta stackexchange com questions 5020 mathjax basic tutorial and quick reference on stackexchange provided the best mathjax examples I ve seen The docs https docs mathjax org en latest mathjax html are useful but a bit wordy The wikipedia page https oeis org wiki List of LaTeX mathematical symbols provides some nice LaTeX references Tables MathJax does not implement LaTeX tables latex begin array c c hline X P X i hline 1 1 6 hline 2 1 6 hline 3 1 6 hline 4 1 6 hline 5 1 6 hline 6 1 6 hline end array Greek letters latex begin array c c c c hline alpha theta o tau hline beta vartheta pi upsilon hline gamma gamma varpi phi hline delta kappa rho varphi hline epsilon lambda varrho chi hline varepsilon mu sigma psi hline zeta nu varsigma omega hline eta xi hline end array latex begin array c c c c hline Gamma Lambda Sigma Psi hline Delta Xi Upsilon Omega hline Theta Pi Phi hline end array Notation latex begin array c c c c c hline hat a acute a bar a dot a breve a hline check a grave a vec a ddot a tilde a hline end array latex begin array c c hline widetilde abc widehat abc hline overleftarrow abc overrightarrow abc hline overline abc underline abc hline overbrace abc underbrace abc hline sqrt abc sqrt n abc hline f frac abc xyz hline end array Basic arrows and symbols latex begin array c c c hline leftarrow longleftarrow uparrow hline Leftarrow Longleftarrow Uparrow hline rightarrow longrightarrow downarrow hline Rightarrow Longrightarrow Downarrow hline leftrightarrow longleftrightarrow updownarrow hline Leftrightarrow Longleftrightarrow Updownarrow hline mapsto longmapsto nearrow hline hookleftarrow hookrightarrow searrow hline leftharpoonup rightharpoonup swarrow hline leftharpoondown rightharpoondown nwarrow hline rightleftharpoons leadsto hline end array Logic set and operator symbols latex begin array c c c c hline forall complement therefore emptyset hline exists subset because empty hline exist supset mapsto varnothing hline nexists mid to implies hline in land gets impliedby hline isin lor leftrightarrow iff hline notin ni notni neg or lnot hline end array latex begin array c c c c hline pm cap diamond oplus hline mp cup bigtriangleup ominus hline times uplus bigtriangledown otimes hline div sqcap triangleleft oslash hline ast sqcup triangleright odot hline star vee lhd b bigcirc hline circ wedge rhd b dagger hline bullet setminus unlhd b ddagger hline cdot wr unrhd b amalg hline hline end array Relation symbols latex begin array c c c c hline leq geq equiv models hline prec succ sim perp hline preceq succeq simeq mid hline ll gg asymp parallel hline subset supset approx bowtie hline subseteq supseteq cong Join b hline sqsubset b sqsupset b neq smile hline sqsubseteq sqsupseteq doteq frown hline in ni propto hline vdash dashv hline hline end array Miscellaneous symbols latex begin array c c c c hline ldots cdots vdots ddots hline ldots cdots vdots ddots hline aleph prime forall infty hline hbar emptyset exists Box b hline imath nabla neg Diamond b hline jmath surd flat triangle hline ell top natural clubsuit hline wp bot sharp diamondsuit hline Re backslash heartsuit hline Im angle partial spadesuit hline mho b hline end array latex begin array c c c c c c c hline arccos cos csc exp ker limsup min sinh hline arcsin cosh deg gcd lg ln Pr sup hline arctan cot det hom lim log sec tan hline arg coth dim inf liminf max sin tanh hline end array Variable sized symbols latex begin array c c c hline sum bigcap bigodot hline prod bigcup bigotimes hline coprod bigsqcup bigoplus hline int bigvee biguplus hline oint bigwedge hline end array Delimiters latex begin array c c c c hline uparrow Uparrow hline downarrow Downarrow hline updownarrow Updownarrow hline lfloor rfloor lceil rceil hline langle rangle backslash hline hline end array latex begin array c c c c hline rmoustache lmoustache rgroup lgroup hline arrowvert Arrowvert bracevert hline end array Matrix symbols begin matrix a b c d end matrix latex begin pmatrix a b c d end pmatrix begin bmatrix 1 2 1 3 0 1 0 2 4 end bmatrix left frac p q right Geometry symbols latex begin array c c hline angle measuredangle hline triangle square hline cong ncong hline sim nsim hline nparallel hline perp not perp hline end array Algebraic symbols sum n 0 infty prod n 0 infty Calculus symbols int a b lim x to a f a lim x to a frac f x f a x a lim x to a f x f a lim x to a f x Conclusion Remembering these symbols code may be difficult when only writing intermitently however this reference should provide any required information quickly References wikipedia page of latex references https oeis org wiki List of LaTeX mathematical symbols mathjax tutorial https math meta stackexchange com questions 5020 mathjax basic tutorial and quick reference tex symbols http web ift uib no Teori KURS WRK TeX symALL html latex wiki symbols https oeis org wiki List of LaTeX mathematical symbols katex page https katex org docs supported html html katex supported https github com KaTeX KaTeX blob master docs supported md",
        "tags": [
            "visualization",
            "tag2",
            "tag3"
        ]
    },
    {
        "uri": "/posts/blog-logic_for_math",
        "title": "Building Math from the Ground-Up",
        "content": "\nAfter completing basic high school mathematics one might think that math stands on its own To understand and know that 1 1 2 is obvious But math can go much deeper In fact we can build new concepts from math as well as build a math itself This is important because it effects how we think about other subjects and is especially useful in helping us think about language and abstract concepts such as in programming This post will introduce a few of these concepts We will also make some references to how it is useful in natural language processing Logical Beginnings There are a few different types of logic These are presented here with increasing rigor informal logic typically that of natural language formal logic the study of inference or steps in reasoning in addition it is possible to analyze the form of an argument symbolic logic abstractions for capturing features of inference mathematical logic extension of symbolic to use in different theories such as model set and proof theory Moving from informal to formal logic is a big jump Showing the logical form of an argument is difficult in informal logic because indicative sentences of ordinary language show a considerable variety of form and complexity that makes their use in inference impractical Aristotle was the first to support the use of logical form by defining variables to represent valid inferences An example is all men are mortals has the form all Ps are Qs This advancement leads us to symbolic logic Three formal systems of symbolic logic began with Greek philosophers and now provide the foundations we need to do mathematics These are i syllogism ii propositional sentential and iii predicate first order logics In order to discuss these we need to define a few terms These are formal definitions that are different from how we use every day language but they are not un related Important Definitions Arguments and inference A premise is an assumption that something is true In logic an argument requires a set of at least two declarative sentences known as the premises along with another declarative sentence known as the conclusion The proof of a conclusion depends on both the truth of the premises and the validity of the argument An argument is valid if and only if it takes a form that makes it impossible for the premises to be true and the conclusion nevertheless to be false The word inference is used quite often in logic math and statistics It comes from the latin infero which means to carry forward and is usually divided between deduction and induction Deduction is the act of deriving using formal proof logical conclusions from premises using the laws of valid inference So there are a finite sequence of well formed forumlas each of which is an assumption axiom or conclusion inferred from the others used as an assumption that create a theorem proven statement There are a few popular rules for inference and they include such important ones as modus ponens modus tollens contrapositive and reductio ad absurdum for propositional calculus In the example of modus ponens the form is written A B A B There are additional rules for predicate calculus as well as other logics and many of the rules are displayed here https en wikipedia org wiki List of rules of inference A formal system is an organization of terms used for the analysis of deduction It consists of an alphabet a language over the alphabet to construct sentences and a rule for deriving sentences Induction involves inference from particular premises each with some evidence of truth to a universal conclusion While a deductive argument is certain an inductive argument can only be probable It is the basis for the scientific method which is the foundation of all natural sciences study of naturally occurring phenomena Inductive reasoning is inherently uncertain therefore it is important when used for making arguments with probability Bayes rule is an example of a rule for inference within probability based inductive reasoning Instead of being valid or invalid inductive arguments are either strong or weak according to how probable it is that the conclusion is true An argument may be plausible probable reasonable justified or strong but never certain Confusingly inductive reasoning is different from mathematical induction which is a form of deductive reasoning which is used for strict proofs of properties on recursively defined sets Reaching such a deep level of analysis and relating it to the real world can become quite philosophical An example is the Second Axiom of Probability which states that at least one of the elementary events in the entire sample space will occur is 1 which in epistemic uncertainty uses the closed world assumption So it can be difficult to know when one has gone too far down the rabbit hole to use another philosophical reference Oftentimes latin terms may be used to describe rules of inference such as modus ponens and these underly their Greek philosophical underpinnings As an aside the greek language is not used because the vast majority of that culture s ideas are transferred only by the latin bearing Roman scrolls Interestingly there is not much latin texts since the destruction of the Ptolemaic Library of Alexandria also but more is still being uncovered through the use of xray photography that displays text erased to provide for medieval christian writings At the same time some philosophy of science must be understood For instance the idea of hypothesis testing and the use of the p value is fundamental to classical statistics and is almost universally used across all scientific disciplines Less conspicuous but equally controversial is the assumption of ceteris paribus all things held constant in economics research which allowed statistical theory to be bridged from controlled experimental designs to observational data First order logic Syntax is the collection of symbols concepts and rules used for creating well formed expressions It is independent of symantics and interpretation In natural language the rules are called grammar and one such rule in english is that statement structure must be of the form Subject Verb Object Symantics determine the meaning behind expressions It is concerned with words phrases signs and symbols Oftentimes there may be a mapping from one set of symbols to another In effect a translation between known and unknown symbols These necessitate a definition for expression which is a finite combination of symbols that are well formed according to the syntax The term combination can be difficult because mathematical combinations which are selections made regardless of ordering Here order is important to syntax In programming expressions return a new value as opposed to a statement which does not Expressions are stated using terms to represent objects and formulas which are predicates relations to true false A predicate can visualized as the Unit Step Heaviside Function The domain of all terms and formulas symbols is the alphabet of that system Syllogistic and Propositional Logic A syllogism is a kind of logical argument that applies deductive reasoning to arrive at a conclusion based on two or more propositions that are asserted or assumed to be true The modus ponens described above is an example Aristotle of the Nyaya school defined the three part form where from a general statement the major premise and a specific statement the minor premise a conclusion is deduced All men are mortal Socrates is a man Therefore Socrates is mortal The Stoics created propositional logic A proposition is any sentence that can be assigned a truth value such as Helsinki is the capital of Finland The versatility and restriction of propositional logic lies in the fact that we can use it with any statement whatsoever regardless of its inner structure or logical form But it is also very very simple Elementary propositions are denoted usually by letters such as lower case p and q These propositions are connected to each other and manipulated using simple logical connectives such as not and or if then if and only if Using these symbols we can generate combinations of the elementary propositions to claim certain logical connections between them We then use so called truth tables to evaluate the truth of this complex proposition We can also determine whether it is a tautology logical truth In the truth table method we go through all combinations of p and q as to their truth and falsity and see what the truth value of the whole proposition is Like so If the last column has only T in it sometimes or 1 0 are used for truth and falsity the proposition is a tautology if it has only F in it it is a contradiction Predicate and Mathematical Logic While propositional logic treats whole propositions predicate logic distinguishes between objects and their properties called predicates An alphabet consists of logical and non logical symbols Non logical symbols include predicates relations functions and constants The set of all of these are the signature The signature may be i empty ii finite iii infinite or iv uncountable Logical symbols include i quantifiers ii logical connectives iii and truth constants Predicate logic is essentially a system where the elementary propositions of propositional logic can be further analysed using predicates properties that are assigned to subjects For example above Helsinki is the capital of Finland can be further analysed by denoting Helsinki with the lower case letter h and the predicate the capital of Finland with a upper case letter say C We get h is C Predicate logic has standardly employed so called quantifiers which express the scope of the predicate over the subject term In the above case Helsinki is an individual object so a quantifier makes little sense so take the tapir example now the subject term is the general concept of tapir denote it with T and cuddly with C Since the statement in effect claims that all tapirs are cuddly we write All T are C This is the traditional Aristotelian way of expressing the matter But the quantifier itself in modern predicate logic is expressed by one of the two symbols Universal quantifier meaning all every Existential quantifier meaning some there exists Thus we see that unlike propositional logic predicate logic is capable of dealing with sets of entities making it very useful e g in mathematics Unfortunately this property also makes it impossible to employ truth tables in predicate logic one would have to iterate over a potential infinity of individuals Instead in determining the validity of inferences in predicate logic simple logical rules are established and iterated For example we can apply the rule that negating the universal quantifier gives us the existential quantifier with the negation of the proposition x Px x Px Since in addition we can also use all the logical rules established in propositional logic to the propositions themselves we have a very powerful and versatile form of logic Use in Natural Language Processing What does it take to move from a natural language to a logical form First ignoring those grammatical features irrelevant to logic such as gender and declension if the argument is in Latin replacing conjunctions irrelevant to logic such as but with logical conjunctions like and and replacing ambiguous or alternative logical expressions any every etc with expressions of a standard type such as all or the universal quantifier Second certain parts of the sentence must be replaced with schematic letters Thus for example the expression all Ps are Qs shows the logical form common to the sentences all men are mortals all cats are carnivores all Greeks are philosophers and so on The schema can further be condensed into the formula A P Q where the letter A indicates the judgement all are The english language uses the Subject Verb Object statement structure From this a Noun Phrase is created from the subject and object while the verb and object define the predicate The subject and predict together create a clause The clause may be independent or dependent The entire SVO statement in a meaningful context is a sentence Making use of all of these rules and building models around form structure can be highly supportive for both understanding natural language and creating it Conclusion Logic is one of the worlds oldest subjects of study and it is initmately related with mathematics especially at the level of analysis While this may seem impractical for practicioners learning and applying it provides a mucher richer understanding of why and how some things are done in math It also provides a strong precendence in studying math related disciplines such as Natural Language Processing",
        "tags": [
            "nlp",
            "tag2",
            "tag3"
        ]
    }
]