<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on IMTorg Kbase</title>
    <link>https://imtorgdemo.github.io/tags/python/</link>
    <description>Recent content in python on IMTorg Kbase</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://imtorgdemo.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Cheatsheet for Python&#39;s Pipenv</title>
      <link>https://imtorgdemo.github.io/posts/blog_programming_py-pipenv_virtualenv/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_programming_py-pipenv_virtualenv/</guid>
      <description>Python&amp;rsquo;s Pipenv and Pyenv make a strong team for creating a cosistent development environment for exact specifications. Pyenv allows you to choose from any Python version for your project. Pipenv attempts to improve upon the original virtual environment (venv) and requirements.txt file. It does some things well, including integration of virtual environment with dependecy management, and is straight-forward to use. Unfortunately, it doesn&amp;rsquo;t always live up to the originally-planned, ambitious, goals.</description>
    </item>
    
    <item>
      <title>Working with XML Data Using Python</title>
      <link>https://imtorgdemo.github.io/posts/blog_datastore-xml_elementtree/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_datastore-xml_elementtree/</guid>
      <description>Together with JSON, the XML format is the most popular structure for data on the web. It is not only used for data storage, but also for websites, in the form of HTML. XML was seen as the ubiquitous data format, but with the ascent of Javascript, JSON became more popular for web applications. Still, XML is an effective format, and learning to parse and work with it is necessary for anyone who works with a variety of data sources.</description>
    </item>
    
    <item>
      <title>An Introduction to Numpy and Pandas</title>
      <link>https://imtorgdemo.github.io/posts/blog_ds-intro_numpy_pandas/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_ds-intro_numpy_pandas/</guid>
      <description>Numpy and Pandas are the basic data science tools in the Python environment. Having a good understanding of their capabilities and how they process data is imperative to writing optimal code. This post provides an introductory overview and a refresher for those who might come back to the libraries after taking a break. The end of the post explains external interfaces for increasing code execution and performing more sophisticated matrix operations.</description>
    </item>
    
    <item>
      <title>Python Functional Programming</title>
      <link>https://imtorgdemo.github.io/posts/blog_programming-python_functional/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_programming-python_functional/</guid>
      <description>Introduction Most programming languages are procedural or are written in an imperative style: programs are lists of instructions that tell the computer what to do with the program’s input. Even &amp;lsquo;purely&amp;rsquo; OOP languages, such as Java, are typically written in an imperative style with little thought give in actual OOP modeling.
Functional code is characterised by one thing: the absence of side effects. It doesn’t rely on data outside the current function, and it doesn’t change data that exists outside the current function.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming with Python</title>
      <link>https://imtorgdemo.github.io/posts/blog_programming-python_oop/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_programming-python_oop/</guid>
      <description>Object Oriented Programming (OOP) programming became popular with Java. Microsoft quickly followed-up with the C# language. Now, OOP concepts are available in many languages. Python inherits alot of these OOP attributes, but performs it in its usual pythonic minimalism. The concepts are the same, but much of the cruft, such as accessor modifiers, are limited, leaving an succinct and enjoyable object modeling experience.
Introduction OOP deals with classes (blueprints) and objects (instances of blueprint).</description>
    </item>
    
    <item>
      <title>The R and Pandas Dataframe</title>
      <link>https://imtorgdemo.github.io/posts/blog_ds-dataframe_r_and_pandas/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_ds-dataframe_r_and_pandas/</guid>
      <description>Although Pandas uses the Dataframe as its primary data structure, just as R does, the Pandas syntax and underlying fundamentals can be disorienting for R users. This post will describe some basic comparisons and inconsistencies between the two languages. It will also provide some examples of very non-intuitive solutions to common problems.
Introduction In the Datascience R versus Pandas debate, it is really an apples and oranges comparison. R is a domain specific language in the field of statistics, analytics, and data visualization.</description>
    </item>
    
    <item>
      <title>Working through a Progressive Python Application</title>
      <link>https://imtorgdemo.github.io/posts/blog_programming_python-develop_and_deploy/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_programming_python-develop_and_deploy/</guid>
      <description>This post walks the developer through a python application as it progresses in development. It uses linux, docker, vscode, pyenv, pipenv and other tools for developing, building, and deploying an application.
Environment Two tools can help you setup your local development environment: pyenv and pipenv. Pyenv is good for getting the correct python version. Pipenv is quite good at setting your virtual environment so that your versions of python and dependencies are separate from your actual machine.</description>
    </item>
    
    <item>
      <title>Working with Matrices and Tensors in PyTorch</title>
      <link>https://imtorgdemo.github.io/posts/blog_models-matrix_tensor_operations/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_models-matrix_tensor_operations/</guid>
      <description>The Artificial Intelligence field is moving from single-function libraries to frameworks for building different network models. TensorFlow was one of the first, and has strong production capabilities, such as process optimizations. However, its syntax is unintuitive, and the library has a reputation for being difficult for testing new models. This led to many organizations adopting PyTorch, with underlying Numpy, for designing network models. This post describes the basic data structures for working with Matrices and Tensors in PyTorch.</description>
    </item>
    
    <item>
      <title>Distributing Code in Python</title>
      <link>https://imtorgdemo.github.io/posts/blog_programming_py-distributing_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_programming_py-distributing_code/</guid>
      <description>Distributing and deploying products is a necessary step in the solution development process, and an imperative in business. Each solution must be thoughtfully analyzed for strengths and weaknesses, especially from the perspective of security. The decisons you make are largely based on the language employed to create the solution. This post will describe steps taken in distributing a Python solution.
Introduction to Bytecode Simple python scripts are a terrific approach to getting work done, quickly.</description>
    </item>
    
  </channel>
</rss>