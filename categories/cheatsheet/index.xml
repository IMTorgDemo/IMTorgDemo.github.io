<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cheatsheet on IMTorg Kbase</title>
    <link>https://imtorgdemo.github.io/categories/cheatsheet/</link>
    <description>Recent content in Cheatsheet on IMTorg Kbase</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://imtorgdemo.github.io/categories/cheatsheet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cheatsheet for Documentation</title>
      <link>https://imtorgdemo.github.io/posts/blog_programming-py_docs/</link>
      <pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_programming-py_docs/</guid>
      <description>The README.md file Docstring Single-line for a function Focus on &amp;lsquo;do this, return that&amp;rsquo;. def multiplier(a,b): &amp;#34;&amp;#34;&amp;#34;Take in two numbers, return their product.&amp;#34; product = a*b return product Multi-line for function The PEP 257 provides standard conventions for usage. def multiplier(a,b): &amp;#34;&amp;#34;&amp;#34; Take in two numbers, return their product. This is typical multiplication for two scalars with no extension to matrices. Args: a(int): a decimal integer b(int): another decimal integer Returns: product(str): string of the product of a and b Raises: IOError: an error occurred.</description>
    </item>
    
    <item>
      <title>Cheatsheet for PyTest Configurations</title>
      <link>https://imtorgdemo.github.io/posts/blog_programming-py_pytest/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_programming-py_pytest/</guid>
      <description>Multiple tests Run the same test code with many different parameters to create multiple tests. All tests will run even if there is a failure.
recs = [(1,2),(2,3),(3,4)] @pytest.mark.parametrize(&amp;#34;x, y&amp;#34;, recs ) def test_extract_process(x, y): val = my_function(x) assert val == y Fixtures Use fixtures to run code before and after all tests.
Database fixture @pytest.fixture() def resource_db(): # setup log_file = Path(&amp;#39;./tests/tmp/process.log&amp;#39;) db_file = Path(&amp;#39;./tests/tmp/test.db&amp;#39;) logger = Logger(log_file).create_logger() db = Database(db_file = db_file, tables_list = LIST_ALL_TABLES, meta = meta, logger = logger, path_download = &amp;#39;.</description>
    </item>
    
    <item>
      <title>Computer Vision Using PyTorch</title>
      <link>https://imtorgdemo.github.io/posts/blog_models-pytorch_computervision/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_models-pytorch_computervision/</guid>
      <description>The deep learning movement began by applying neural networks to image classification. PyTorch became a leading framework for work in this field. This post provides a cheatsheet to some of the basic methods used for computer vision, using PyTorch.
Configuration This is a typical environment setup. Seed the Random Number Generator for all devices (both CPU and CUDA) using manual_seed() so that work can be reproduced. Computations are deterministic only on your specific problem, platform, and PyTorch release.</description>
    </item>
    
    <item>
      <title>A Cheatsheet for Python&#39;s Pipenv</title>
      <link>https://imtorgdemo.github.io/posts/blog_programming_py-pipenv_virtualenv/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://imtorgdemo.github.io/posts/blog_programming_py-pipenv_virtualenv/</guid>
      <description>Python&amp;rsquo;s Pipenv and Pyenv make a strong team for creating a consistent development environment for exact specifications. Pyenv allows you to choose from any Python version for your project. Pipenv attempts to improve upon the original virtual environment (venv) and requirements.txt file. It does some things well, including integration of virtual environment with dependecy management, and is straight-forward to use. Unfortunately, it doesn&amp;rsquo;t always live up to the originally-planned, ambitious, goals.</description>
    </item>
    
  </channel>
</rss>
